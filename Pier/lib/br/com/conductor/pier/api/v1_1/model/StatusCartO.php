<?php
/**
 * StatusCartO
 *
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v1_1.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v1_1.model;

use \ArrayAccess;
/**
 * StatusCartO Class Doc Comment
 *
 * @category    Class
 * @description Representa\u00C3\u00A7\u00C3\u00A3o do recurso Status Cart\u00C3\u00A3o
 * @package     br.com.conductor.pier.api.v1_1.invoker
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class StatusCartO implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'flag_altera_status' => 'string',
        'flag_cadastro_nova_senha' => 'string',
        'flag_cadastro_senha' => 'string',
        'flag_cancela_cartao' => 'string',
        'flag_cancela_conta' => 'string',
        'flag_cobra_tarifa' => 'string',
        'flag_desbloqueio' => 'string',
        'flag_destino_transferencia' => 'string',
        'flag_emite_provisorio' => 'string',
        'flag_excecao_bandeira' => 'string',
        'flag_origem_transferencia' => 'string',
        'flag_reemite_cartao' => 'string',
        'flag_reversao_cancelamento' => 'string',
        'flag_reversao_desbloqueio' => 'string',
        'id' => 'int',
        'id_status_destino_conta' => 'int',
        'id_status_destino_desbloqueio' => 'int',
        'nome' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'flag_altera_status' => 'flagAlteraStatus',
        'flag_cadastro_nova_senha' => 'flagCadastroNovaSenha',
        'flag_cadastro_senha' => 'flagCadastroSenha',
        'flag_cancela_cartao' => 'flagCancelaCartao',
        'flag_cancela_conta' => 'flagCancelaConta',
        'flag_cobra_tarifa' => 'flagCobraTarifa',
        'flag_desbloqueio' => 'flagDesbloqueio',
        'flag_destino_transferencia' => 'flagDestinoTransferencia',
        'flag_emite_provisorio' => 'flagEmiteProvisorio',
        'flag_excecao_bandeira' => 'flagExcecaoBandeira',
        'flag_origem_transferencia' => 'flagOrigemTransferencia',
        'flag_reemite_cartao' => 'flagReemiteCartao',
        'flag_reversao_cancelamento' => 'flagReversaoCancelamento',
        'flag_reversao_desbloqueio' => 'flagReversaoDesbloqueio',
        'id' => 'id',
        'id_status_destino_conta' => 'idStatusDestinoConta',
        'id_status_destino_desbloqueio' => 'idStatusDestinoDesbloqueio',
        'nome' => 'nome'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'flag_altera_status' => 'setFlagAlteraStatus',
        'flag_cadastro_nova_senha' => 'setFlagCadastroNovaSenha',
        'flag_cadastro_senha' => 'setFlagCadastroSenha',
        'flag_cancela_cartao' => 'setFlagCancelaCartao',
        'flag_cancela_conta' => 'setFlagCancelaConta',
        'flag_cobra_tarifa' => 'setFlagCobraTarifa',
        'flag_desbloqueio' => 'setFlagDesbloqueio',
        'flag_destino_transferencia' => 'setFlagDestinoTransferencia',
        'flag_emite_provisorio' => 'setFlagEmiteProvisorio',
        'flag_excecao_bandeira' => 'setFlagExcecaoBandeira',
        'flag_origem_transferencia' => 'setFlagOrigemTransferencia',
        'flag_reemite_cartao' => 'setFlagReemiteCartao',
        'flag_reversao_cancelamento' => 'setFlagReversaoCancelamento',
        'flag_reversao_desbloqueio' => 'setFlagReversaoDesbloqueio',
        'id' => 'setId',
        'id_status_destino_conta' => 'setIdStatusDestinoConta',
        'id_status_destino_desbloqueio' => 'setIdStatusDestinoDesbloqueio',
        'nome' => 'setNome'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'flag_altera_status' => 'getFlagAlteraStatus',
        'flag_cadastro_nova_senha' => 'getFlagCadastroNovaSenha',
        'flag_cadastro_senha' => 'getFlagCadastroSenha',
        'flag_cancela_cartao' => 'getFlagCancelaCartao',
        'flag_cancela_conta' => 'getFlagCancelaConta',
        'flag_cobra_tarifa' => 'getFlagCobraTarifa',
        'flag_desbloqueio' => 'getFlagDesbloqueio',
        'flag_destino_transferencia' => 'getFlagDestinoTransferencia',
        'flag_emite_provisorio' => 'getFlagEmiteProvisorio',
        'flag_excecao_bandeira' => 'getFlagExcecaoBandeira',
        'flag_origem_transferencia' => 'getFlagOrigemTransferencia',
        'flag_reemite_cartao' => 'getFlagReemiteCartao',
        'flag_reversao_cancelamento' => 'getFlagReversaoCancelamento',
        'flag_reversao_desbloqueio' => 'getFlagReversaoDesbloqueio',
        'id' => 'getId',
        'id_status_destino_conta' => 'getIdStatusDestinoConta',
        'id_status_destino_desbloqueio' => 'getIdStatusDestinoDesbloqueio',
        'nome' => 'getNome'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $flag_altera_status Quanto ativa, indica que Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo n\u00C3\u00A3o ter\u00C3\u00A3o seu idStatusCartao Alterado, fazendo com que o Cart\u00C3\u00A3o atual possa continuar sendo utilizado at\u00C3\u00A9 o desbloqueio de um novo cart\u00C3\u00A3o.
      * @var string
      */
    protected $flag_altera_status;
    
    /**
      * $flag_cadastro_nova_senha Quando ativa, indica que os Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo ter\u00C3\u00A3o a senha atual exclu\u00C3\u00ADda.
      * @var string
      */
    protected $flag_cadastro_nova_senha;
    
    /**
      * $flag_cadastro_senha Quando ativa, indica se poder\u00C3\u00A1 ser realizado o cadastro de uma senha para o Cart\u00C3\u00A3o.
      * @var string
      */
    protected $flag_cadastro_senha;
    
    /**
      * $flag_cancela_cartao Quando ativa, indica que Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo ter\u00C3\u00A3o o cart\u00C3\u00A3o Cancelado.
      * @var string
      */
    protected $flag_cancela_cartao;
    
    /**
      * $flag_cancela_conta Quando ativa, indica que Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo ter\u00C3\u00A3o a conta Cancelada.
      * @var string
      */
    protected $flag_cancela_conta;
    
    /**
      * $flag_cobra_tarifa Quando ativa, indica que Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo ter\u00C3\u00A3o a cobran\u00C3\u00A7a de tarifa lan\u00C3\u00A7ada junto a gera\u00C3\u00A7\u00C3\u00A3o do novo cart\u00C3\u00A3o, desde que o Produto ao qual o cart\u00C3\u00A3o pertence possua o respectivo par\u00C3\u00A2metro configurado.
      * @var string
      */
    protected $flag_cobra_tarifa;
    
    /**
      * $flag_desbloqueio Quando ativa, indica que Cart\u00C3\u00B5es com este idStatusCartao poder\u00C3\u00A3o ser Desbloqueados.
      * @var string
      */
    protected $flag_desbloqueio;
    
    /**
      * $flag_destino_transferencia Quando ativa, indica que Cart\u00C3\u00B5es com este idStatusCartao podem receber transfer\u00C3\u00AAncias de cr\u00C3\u00A9ditos/d\u00C3\u00A9bitos oriundos de outros cart\u00C3\u00B5es.
      * @var string
      */
    protected $flag_destino_transferencia;
    
    /**
      * $flag_emite_provisorio Quando ativa, indica que os portadores que tiverem seus cart\u00C3\u00B5es associados a idStatusCartao com esta flag poder\u00C3\u00A3o solicitar a emiss\u00C3\u00A3o de um cart\u00C3\u00A3o provis\u00C3\u00B3rio at\u00C3\u00A9 que um novo cart\u00C3\u00A3o definitivo seja recebido. 
      * @var string
      */
    protected $flag_emite_provisorio;
    
    /**
      * $flag_excecao_bandeira Quando ativa, indica que os Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo dever\u00C3\u00A3o ter a respectiva informa\u00C3\u00A7\u00C3\u00A3o de mudan\u00C3\u00A7a de status inclu\u00C3\u00ADda no arquivo de exce\u00C3\u00A7\u00C3\u00A3o da Bandeira, a fim de manter atualizado o cadastro do cart\u00C3\u00A3o nela para nortear o que fazer com as transa\u00C3\u00A7\u00C3\u00B5es quando o autorizador estiver indispon\u00C3\u00ADvel.
      * @var string
      */
    protected $flag_excecao_bandeira;
    
    /**
      * $flag_origem_transferencia Quando ativa, indica que Cart\u00C3\u00B5es com este idStatusCartao podem realizar a transfer\u00C3\u00AAncia de cr\u00C3\u00A9ditos/d\u00C3\u00A9bitos para outros cart\u00C3\u00B5es.
      * @var string
      */
    protected $flag_origem_transferencia;
    
    /**
      * $flag_reemite_cartao Quando ativa, indica que Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo ter\u00C3\u00A3o um novo cart\u00C3\u00A3o automaticamente gerado.
      * @var string
      */
    protected $flag_reemite_cartao;
    
    /**
      * $flag_reversao_cancelamento Quando ativa, indica que o cart\u00C3\u00A3o, mesmo tendo sido cancelado, poder\u00C3\u00A1 ter o processo desfeito.
      * @var string
      */
    protected $flag_reversao_cancelamento;
    
    /**
      * $flag_reversao_desbloqueio Quando ativa, indica que o cart\u00C3\u00A3o, mesmo tendo sido bloqueado, poder\u00C3\u00A1 ter o processo desfeito.
      * @var string
      */
    protected $flag_reversao_desbloqueio;
    
    /**
      * $id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Status do Cart\u00C3\u00A3o (id) 
      * @var int
      */
    protected $id;
    
    /**
      * $id_status_destino_conta Indica qual o idStatusConta que ser\u00C3\u00A1 atribu\u00C3\u00ADdo ao idConta que tiver o Cartao do titular da mesma cancelado por um idStatusCartao que recomenda o cancelamento da conta.
      * @var int
      */
    protected $id_status_destino_conta;
    
    /**
      * $id_status_destino_desbloqueio Indica qual o idStatusCartao que deve ser atribu\u00C3\u00ADdo a um idCartao quando ele for desbloqueado.
      * @var int
      */
    protected $id_status_destino_desbloqueio;
    
    /**
      * $nome Nome atribu\u00C3\u00ADdo ao Status de Entrega do Cart\u00C3\u00A3o.
      * @var string
      */
    protected $nome;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->flag_altera_status = $data["flag_altera_status"];
            $this->flag_cadastro_nova_senha = $data["flag_cadastro_nova_senha"];
            $this->flag_cadastro_senha = $data["flag_cadastro_senha"];
            $this->flag_cancela_cartao = $data["flag_cancela_cartao"];
            $this->flag_cancela_conta = $data["flag_cancela_conta"];
            $this->flag_cobra_tarifa = $data["flag_cobra_tarifa"];
            $this->flag_desbloqueio = $data["flag_desbloqueio"];
            $this->flag_destino_transferencia = $data["flag_destino_transferencia"];
            $this->flag_emite_provisorio = $data["flag_emite_provisorio"];
            $this->flag_excecao_bandeira = $data["flag_excecao_bandeira"];
            $this->flag_origem_transferencia = $data["flag_origem_transferencia"];
            $this->flag_reemite_cartao = $data["flag_reemite_cartao"];
            $this->flag_reversao_cancelamento = $data["flag_reversao_cancelamento"];
            $this->flag_reversao_desbloqueio = $data["flag_reversao_desbloqueio"];
            $this->id = $data["id"];
            $this->id_status_destino_conta = $data["id_status_destino_conta"];
            $this->id_status_destino_desbloqueio = $data["id_status_destino_desbloqueio"];
            $this->nome = $data["nome"];
        }
    }
    
    /**
     * Gets flag_altera_status
     * @return string
     */
    public function getFlagAlteraStatus()
    {
        return $this->flag_altera_status;
    }
  
    /**
     * Sets flag_altera_status
     * @param string $flag_altera_status Quanto ativa, indica que Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo n\u00C3\u00A3o ter\u00C3\u00A3o seu idStatusCartao Alterado, fazendo com que o Cart\u00C3\u00A3o atual possa continuar sendo utilizado at\u00C3\u00A9 o desbloqueio de um novo cart\u00C3\u00A3o.
     * @return $this
     */
    public function setFlagAlteraStatus($flag_altera_status)
    {
        
        $this->flag_altera_status = $flag_altera_status;
        return $this;
    }
    
    /**
     * Gets flag_cadastro_nova_senha
     * @return string
     */
    public function getFlagCadastroNovaSenha()
    {
        return $this->flag_cadastro_nova_senha;
    }
  
    /**
     * Sets flag_cadastro_nova_senha
     * @param string $flag_cadastro_nova_senha Quando ativa, indica que os Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo ter\u00C3\u00A3o a senha atual exclu\u00C3\u00ADda.
     * @return $this
     */
    public function setFlagCadastroNovaSenha($flag_cadastro_nova_senha)
    {
        
        $this->flag_cadastro_nova_senha = $flag_cadastro_nova_senha;
        return $this;
    }
    
    /**
     * Gets flag_cadastro_senha
     * @return string
     */
    public function getFlagCadastroSenha()
    {
        return $this->flag_cadastro_senha;
    }
  
    /**
     * Sets flag_cadastro_senha
     * @param string $flag_cadastro_senha Quando ativa, indica se poder\u00C3\u00A1 ser realizado o cadastro de uma senha para o Cart\u00C3\u00A3o.
     * @return $this
     */
    public function setFlagCadastroSenha($flag_cadastro_senha)
    {
        
        $this->flag_cadastro_senha = $flag_cadastro_senha;
        return $this;
    }
    
    /**
     * Gets flag_cancela_cartao
     * @return string
     */
    public function getFlagCancelaCartao()
    {
        return $this->flag_cancela_cartao;
    }
  
    /**
     * Sets flag_cancela_cartao
     * @param string $flag_cancela_cartao Quando ativa, indica que Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo ter\u00C3\u00A3o o cart\u00C3\u00A3o Cancelado.
     * @return $this
     */
    public function setFlagCancelaCartao($flag_cancela_cartao)
    {
        
        $this->flag_cancela_cartao = $flag_cancela_cartao;
        return $this;
    }
    
    /**
     * Gets flag_cancela_conta
     * @return string
     */
    public function getFlagCancelaConta()
    {
        return $this->flag_cancela_conta;
    }
  
    /**
     * Sets flag_cancela_conta
     * @param string $flag_cancela_conta Quando ativa, indica que Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo ter\u00C3\u00A3o a conta Cancelada.
     * @return $this
     */
    public function setFlagCancelaConta($flag_cancela_conta)
    {
        
        $this->flag_cancela_conta = $flag_cancela_conta;
        return $this;
    }
    
    /**
     * Gets flag_cobra_tarifa
     * @return string
     */
    public function getFlagCobraTarifa()
    {
        return $this->flag_cobra_tarifa;
    }
  
    /**
     * Sets flag_cobra_tarifa
     * @param string $flag_cobra_tarifa Quando ativa, indica que Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo ter\u00C3\u00A3o a cobran\u00C3\u00A7a de tarifa lan\u00C3\u00A7ada junto a gera\u00C3\u00A7\u00C3\u00A3o do novo cart\u00C3\u00A3o, desde que o Produto ao qual o cart\u00C3\u00A3o pertence possua o respectivo par\u00C3\u00A2metro configurado.
     * @return $this
     */
    public function setFlagCobraTarifa($flag_cobra_tarifa)
    {
        
        $this->flag_cobra_tarifa = $flag_cobra_tarifa;
        return $this;
    }
    
    /**
     * Gets flag_desbloqueio
     * @return string
     */
    public function getFlagDesbloqueio()
    {
        return $this->flag_desbloqueio;
    }
  
    /**
     * Sets flag_desbloqueio
     * @param string $flag_desbloqueio Quando ativa, indica que Cart\u00C3\u00B5es com este idStatusCartao poder\u00C3\u00A3o ser Desbloqueados.
     * @return $this
     */
    public function setFlagDesbloqueio($flag_desbloqueio)
    {
        
        $this->flag_desbloqueio = $flag_desbloqueio;
        return $this;
    }
    
    /**
     * Gets flag_destino_transferencia
     * @return string
     */
    public function getFlagDestinoTransferencia()
    {
        return $this->flag_destino_transferencia;
    }
  
    /**
     * Sets flag_destino_transferencia
     * @param string $flag_destino_transferencia Quando ativa, indica que Cart\u00C3\u00B5es com este idStatusCartao podem receber transfer\u00C3\u00AAncias de cr\u00C3\u00A9ditos/d\u00C3\u00A9bitos oriundos de outros cart\u00C3\u00B5es.
     * @return $this
     */
    public function setFlagDestinoTransferencia($flag_destino_transferencia)
    {
        
        $this->flag_destino_transferencia = $flag_destino_transferencia;
        return $this;
    }
    
    /**
     * Gets flag_emite_provisorio
     * @return string
     */
    public function getFlagEmiteProvisorio()
    {
        return $this->flag_emite_provisorio;
    }
  
    /**
     * Sets flag_emite_provisorio
     * @param string $flag_emite_provisorio Quando ativa, indica que os portadores que tiverem seus cart\u00C3\u00B5es associados a idStatusCartao com esta flag poder\u00C3\u00A3o solicitar a emiss\u00C3\u00A3o de um cart\u00C3\u00A3o provis\u00C3\u00B3rio at\u00C3\u00A9 que um novo cart\u00C3\u00A3o definitivo seja recebido. 
     * @return $this
     */
    public function setFlagEmiteProvisorio($flag_emite_provisorio)
    {
        
        $this->flag_emite_provisorio = $flag_emite_provisorio;
        return $this;
    }
    
    /**
     * Gets flag_excecao_bandeira
     * @return string
     */
    public function getFlagExcecaoBandeira()
    {
        return $this->flag_excecao_bandeira;
    }
  
    /**
     * Sets flag_excecao_bandeira
     * @param string $flag_excecao_bandeira Quando ativa, indica que os Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo dever\u00C3\u00A3o ter a respectiva informa\u00C3\u00A7\u00C3\u00A3o de mudan\u00C3\u00A7a de status inclu\u00C3\u00ADda no arquivo de exce\u00C3\u00A7\u00C3\u00A3o da Bandeira, a fim de manter atualizado o cadastro do cart\u00C3\u00A3o nela para nortear o que fazer com as transa\u00C3\u00A7\u00C3\u00B5es quando o autorizador estiver indispon\u00C3\u00ADvel.
     * @return $this
     */
    public function setFlagExcecaoBandeira($flag_excecao_bandeira)
    {
        
        $this->flag_excecao_bandeira = $flag_excecao_bandeira;
        return $this;
    }
    
    /**
     * Gets flag_origem_transferencia
     * @return string
     */
    public function getFlagOrigemTransferencia()
    {
        return $this->flag_origem_transferencia;
    }
  
    /**
     * Sets flag_origem_transferencia
     * @param string $flag_origem_transferencia Quando ativa, indica que Cart\u00C3\u00B5es com este idStatusCartao podem realizar a transfer\u00C3\u00AAncia de cr\u00C3\u00A9ditos/d\u00C3\u00A9bitos para outros cart\u00C3\u00B5es.
     * @return $this
     */
    public function setFlagOrigemTransferencia($flag_origem_transferencia)
    {
        
        $this->flag_origem_transferencia = $flag_origem_transferencia;
        return $this;
    }
    
    /**
     * Gets flag_reemite_cartao
     * @return string
     */
    public function getFlagReemiteCartao()
    {
        return $this->flag_reemite_cartao;
    }
  
    /**
     * Sets flag_reemite_cartao
     * @param string $flag_reemite_cartao Quando ativa, indica que Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo ter\u00C3\u00A3o um novo cart\u00C3\u00A3o automaticamente gerado.
     * @return $this
     */
    public function setFlagReemiteCartao($flag_reemite_cartao)
    {
        
        $this->flag_reemite_cartao = $flag_reemite_cartao;
        return $this;
    }
    
    /**
     * Gets flag_reversao_cancelamento
     * @return string
     */
    public function getFlagReversaoCancelamento()
    {
        return $this->flag_reversao_cancelamento;
    }
  
    /**
     * Sets flag_reversao_cancelamento
     * @param string $flag_reversao_cancelamento Quando ativa, indica que o cart\u00C3\u00A3o, mesmo tendo sido cancelado, poder\u00C3\u00A1 ter o processo desfeito.
     * @return $this
     */
    public function setFlagReversaoCancelamento($flag_reversao_cancelamento)
    {
        
        $this->flag_reversao_cancelamento = $flag_reversao_cancelamento;
        return $this;
    }
    
    /**
     * Gets flag_reversao_desbloqueio
     * @return string
     */
    public function getFlagReversaoDesbloqueio()
    {
        return $this->flag_reversao_desbloqueio;
    }
  
    /**
     * Sets flag_reversao_desbloqueio
     * @param string $flag_reversao_desbloqueio Quando ativa, indica que o cart\u00C3\u00A3o, mesmo tendo sido bloqueado, poder\u00C3\u00A1 ter o processo desfeito.
     * @return $this
     */
    public function setFlagReversaoDesbloqueio($flag_reversao_desbloqueio)
    {
        
        $this->flag_reversao_desbloqueio = $flag_reversao_desbloqueio;
        return $this;
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Status do Cart\u00C3\u00A3o (id) 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets id_status_destino_conta
     * @return int
     */
    public function getIdStatusDestinoConta()
    {
        return $this->id_status_destino_conta;
    }
  
    /**
     * Sets id_status_destino_conta
     * @param int $id_status_destino_conta Indica qual o idStatusConta que ser\u00C3\u00A1 atribu\u00C3\u00ADdo ao idConta que tiver o Cartao do titular da mesma cancelado por um idStatusCartao que recomenda o cancelamento da conta.
     * @return $this
     */
    public function setIdStatusDestinoConta($id_status_destino_conta)
    {
        
        $this->id_status_destino_conta = $id_status_destino_conta;
        return $this;
    }
    
    /**
     * Gets id_status_destino_desbloqueio
     * @return int
     */
    public function getIdStatusDestinoDesbloqueio()
    {
        return $this->id_status_destino_desbloqueio;
    }
  
    /**
     * Sets id_status_destino_desbloqueio
     * @param int $id_status_destino_desbloqueio Indica qual o idStatusCartao que deve ser atribu\u00C3\u00ADdo a um idCartao quando ele for desbloqueado.
     * @return $this
     */
    public function setIdStatusDestinoDesbloqueio($id_status_destino_desbloqueio)
    {
        
        $this->id_status_destino_desbloqueio = $id_status_destino_desbloqueio;
        return $this;
    }
    
    /**
     * Gets nome
     * @return string
     */
    public function getNome()
    {
        return $this->nome;
    }
  
    /**
     * Sets nome
     * @param string $nome Nome atribu\u00C3\u00ADdo ao Status de Entrega do Cart\u00C3\u00A3o.
     * @return $this
     */
    public function setNome($nome)
    {
        
        $this->nome = $nome;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\br.com.conductor.pier.api.v1_1.invoker\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\br.com.conductor.pier.api.v1_1.invoker\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
