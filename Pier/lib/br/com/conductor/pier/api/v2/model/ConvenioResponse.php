<?php
/**
 * ConvenioResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2.model;

use \ArrayAccess;
/**
 * ConvenioResponse Class Doc Comment
 *
 * @category    Class
 * @description Objeto Conv\u00EAnio
 * @package     br.com.conductor.pier.api.v2.invoker
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ConvenioResponse implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'banco' => 'int',
        'agencia' => 'int',
        'conta_corrente' => 'string',
        'especie' => 'string',
        'numero_convenio' => 'Number',
        'carteira' => 'int',
        'codigo_cedente' => 'string',
        'especie_tipo' => 'string',
        'especie_documento' => 'string',
        'aceite' => 'string',
        'instrucoes' => 'string',
        'local_pagamento1' => 'string',
        'local_pagamento2' => 'string',
        'endereco_cobranca_emissor' => 'string',
        'nome_beneficiario' => 'string',
        'cnpj_beneficiario' => 'string',
        'operador' => 'string',
        'data' => 'string',
        'maquina' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'banco' => 'banco',
        'agencia' => 'agencia',
        'conta_corrente' => 'contaCorrente',
        'especie' => 'especie',
        'numero_convenio' => 'numeroConvenio',
        'carteira' => 'carteira',
        'codigo_cedente' => 'codigoCedente',
        'especie_tipo' => 'especieTipo',
        'especie_documento' => 'especieDocumento',
        'aceite' => 'aceite',
        'instrucoes' => 'instrucoes',
        'local_pagamento1' => 'localPagamento1',
        'local_pagamento2' => 'localPagamento2',
        'endereco_cobranca_emissor' => 'enderecoCobrancaEmissor',
        'nome_beneficiario' => 'nomeBeneficiario',
        'cnpj_beneficiario' => 'cnpjBeneficiario',
        'operador' => 'operador',
        'data' => 'data',
        'maquina' => 'maquina'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'banco' => 'setBanco',
        'agencia' => 'setAgencia',
        'conta_corrente' => 'setContaCorrente',
        'especie' => 'setEspecie',
        'numero_convenio' => 'setNumeroConvenio',
        'carteira' => 'setCarteira',
        'codigo_cedente' => 'setCodigoCedente',
        'especie_tipo' => 'setEspecieTipo',
        'especie_documento' => 'setEspecieDocumento',
        'aceite' => 'setAceite',
        'instrucoes' => 'setInstrucoes',
        'local_pagamento1' => 'setLocalPagamento1',
        'local_pagamento2' => 'setLocalPagamento2',
        'endereco_cobranca_emissor' => 'setEnderecoCobrancaEmissor',
        'nome_beneficiario' => 'setNomeBeneficiario',
        'cnpj_beneficiario' => 'setCnpjBeneficiario',
        'operador' => 'setOperador',
        'data' => 'setData',
        'maquina' => 'setMaquina'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'banco' => 'getBanco',
        'agencia' => 'getAgencia',
        'conta_corrente' => 'getContaCorrente',
        'especie' => 'getEspecie',
        'numero_convenio' => 'getNumeroConvenio',
        'carteira' => 'getCarteira',
        'codigo_cedente' => 'getCodigoCedente',
        'especie_tipo' => 'getEspecieTipo',
        'especie_documento' => 'getEspecieDocumento',
        'aceite' => 'getAceite',
        'instrucoes' => 'getInstrucoes',
        'local_pagamento1' => 'getLocalPagamento1',
        'local_pagamento2' => 'getLocalPagamento2',
        'endereco_cobranca_emissor' => 'getEnderecoCobrancaEmissor',
        'nome_beneficiario' => 'getNomeBeneficiario',
        'cnpj_beneficiario' => 'getCnpjBeneficiario',
        'operador' => 'getOperador',
        'data' => 'getData',
        'maquina' => 'getMaquina'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id Id do conv\u00EAnio.
      * @var int
      */
    protected $id;
    
    /**
      * $banco Identifica\u00E7\u00E3o do banco.
      * @var int
      */
    protected $banco;
    
    /**
      * $agencia N\u00FAmero da ag\u00EAncia.
      * @var int
      */
    protected $agencia;
    
    /**
      * $conta_corrente Conta corrente.
      * @var string
      */
    protected $conta_corrente;
    
    /**
      * $especie C\u00F3digo do tipo de esp\u00E9cie do documento.
      * @var string
      */
    protected $especie;
    
    /**
      * $numero_convenio C\u00F3digo de identifica\u00E7\u00E3o do conv\u00EAnio.
      * @var Number
      */
    protected $numero_convenio;
    
    /**
      * $carteira C\u00F3digo da carteira de cobran\u00E7a.
      * @var int
      */
    protected $carteira;
    
    /**
      * $codigo_cedente C\u00F3digo do cedente.
      * @var string
      */
    protected $codigo_cedente;
    
    /**
      * $especie_tipo Tipo de esp\u00E9cie de t\u00EDtulo de cr\u00E9dito.
      * @var string
      */
    protected $especie_tipo;
    
    /**
      * $especie_documento Esp\u00E9cie do documento.
      * @var string
      */
    protected $especie_documento;
    
    /**
      * $aceite Indica se o pagador assinou o documento de cobran\u00E7a que originou o boleto. O padr\u00E3o \u00E9 usar \"N\".
      * @var string
      */
    protected $aceite;
    
    /**
      * $instrucoes Instru\u00E7\u00F5es para pagamento.
      * @var string
      */
    protected $instrucoes;
    
    /**
      * $local_pagamento1 Local preferencial onde pode ser efetuado o pagamento.
      * @var string
      */
    protected $local_pagamento1;
    
    /**
      * $local_pagamento2 Local para pagamento (campo adicional).
      * @var string
      */
    protected $local_pagamento2;
    
    /**
      * $endereco_cobranca_emissor Endere\u00E7o de cobran\u00E7a do emissor.
      * @var string
      */
    protected $endereco_cobranca_emissor;
    
    /**
      * $nome_beneficiario Nome do benefici\u00E1rio/cedente da cobran\u00E7a.
      * @var string
      */
    protected $nome_beneficiario;
    
    /**
      * $cnpj_beneficiario CNPJ do benefici\u00E1rio/cedente da cobran\u00E7a.
      * @var string
      */
    protected $cnpj_beneficiario;
    
    /**
      * $operador Usu\u00E1rio responsavel pelo cadastro e/ou altera\u00E7\u00E3o do conv\u00EAnio.
      * @var string
      */
    protected $operador;
    
    /**
      * $data Data de cadastro/altera\u00E7\u00E3o do conv\u00EAnio.
      * @var string
      */
    protected $data;
    
    /**
      * $maquina M\u00E1quina pela qual foi realizado o cadastro ou altera\u00E7\u00E3o.
      * @var string
      */
    protected $maquina;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->banco = $data["banco"];
            $this->agencia = $data["agencia"];
            $this->conta_corrente = $data["conta_corrente"];
            $this->especie = $data["especie"];
            $this->numero_convenio = $data["numero_convenio"];
            $this->carteira = $data["carteira"];
            $this->codigo_cedente = $data["codigo_cedente"];
            $this->especie_tipo = $data["especie_tipo"];
            $this->especie_documento = $data["especie_documento"];
            $this->aceite = $data["aceite"];
            $this->instrucoes = $data["instrucoes"];
            $this->local_pagamento1 = $data["local_pagamento1"];
            $this->local_pagamento2 = $data["local_pagamento2"];
            $this->endereco_cobranca_emissor = $data["endereco_cobranca_emissor"];
            $this->nome_beneficiario = $data["nome_beneficiario"];
            $this->cnpj_beneficiario = $data["cnpj_beneficiario"];
            $this->operador = $data["operador"];
            $this->data = $data["data"];
            $this->maquina = $data["maquina"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id Id do conv\u00EAnio.
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets banco
     * @return int
     */
    public function getBanco()
    {
        return $this->banco;
    }
  
    /**
     * Sets banco
     * @param int $banco Identifica\u00E7\u00E3o do banco.
     * @return $this
     */
    public function setBanco($banco)
    {
        
        $this->banco = $banco;
        return $this;
    }
    
    /**
     * Gets agencia
     * @return int
     */
    public function getAgencia()
    {
        return $this->agencia;
    }
  
    /**
     * Sets agencia
     * @param int $agencia N\u00FAmero da ag\u00EAncia.
     * @return $this
     */
    public function setAgencia($agencia)
    {
        
        $this->agencia = $agencia;
        return $this;
    }
    
    /**
     * Gets conta_corrente
     * @return string
     */
    public function getContaCorrente()
    {
        return $this->conta_corrente;
    }
  
    /**
     * Sets conta_corrente
     * @param string $conta_corrente Conta corrente.
     * @return $this
     */
    public function setContaCorrente($conta_corrente)
    {
        
        $this->conta_corrente = $conta_corrente;
        return $this;
    }
    
    /**
     * Gets especie
     * @return string
     */
    public function getEspecie()
    {
        return $this->especie;
    }
  
    /**
     * Sets especie
     * @param string $especie C\u00F3digo do tipo de esp\u00E9cie do documento.
     * @return $this
     */
    public function setEspecie($especie)
    {
        
        $this->especie = $especie;
        return $this;
    }
    
    /**
     * Gets numero_convenio
     * @return Number
     */
    public function getNumeroConvenio()
    {
        return $this->numero_convenio;
    }
  
    /**
     * Sets numero_convenio
     * @param Number $numero_convenio C\u00F3digo de identifica\u00E7\u00E3o do conv\u00EAnio.
     * @return $this
     */
    public function setNumeroConvenio($numero_convenio)
    {
        
        $this->numero_convenio = $numero_convenio;
        return $this;
    }
    
    /**
     * Gets carteira
     * @return int
     */
    public function getCarteira()
    {
        return $this->carteira;
    }
  
    /**
     * Sets carteira
     * @param int $carteira C\u00F3digo da carteira de cobran\u00E7a.
     * @return $this
     */
    public function setCarteira($carteira)
    {
        
        $this->carteira = $carteira;
        return $this;
    }
    
    /**
     * Gets codigo_cedente
     * @return string
     */
    public function getCodigoCedente()
    {
        return $this->codigo_cedente;
    }
  
    /**
     * Sets codigo_cedente
     * @param string $codigo_cedente C\u00F3digo do cedente.
     * @return $this
     */
    public function setCodigoCedente($codigo_cedente)
    {
        
        $this->codigo_cedente = $codigo_cedente;
        return $this;
    }
    
    /**
     * Gets especie_tipo
     * @return string
     */
    public function getEspecieTipo()
    {
        return $this->especie_tipo;
    }
  
    /**
     * Sets especie_tipo
     * @param string $especie_tipo Tipo de esp\u00E9cie de t\u00EDtulo de cr\u00E9dito.
     * @return $this
     */
    public function setEspecieTipo($especie_tipo)
    {
        
        $this->especie_tipo = $especie_tipo;
        return $this;
    }
    
    /**
     * Gets especie_documento
     * @return string
     */
    public function getEspecieDocumento()
    {
        return $this->especie_documento;
    }
  
    /**
     * Sets especie_documento
     * @param string $especie_documento Esp\u00E9cie do documento.
     * @return $this
     */
    public function setEspecieDocumento($especie_documento)
    {
        
        $this->especie_documento = $especie_documento;
        return $this;
    }
    
    /**
     * Gets aceite
     * @return string
     */
    public function getAceite()
    {
        return $this->aceite;
    }
  
    /**
     * Sets aceite
     * @param string $aceite Indica se o pagador assinou o documento de cobran\u00E7a que originou o boleto. O padr\u00E3o \u00E9 usar \"N\".
     * @return $this
     */
    public function setAceite($aceite)
    {
        
        $this->aceite = $aceite;
        return $this;
    }
    
    /**
     * Gets instrucoes
     * @return string
     */
    public function getInstrucoes()
    {
        return $this->instrucoes;
    }
  
    /**
     * Sets instrucoes
     * @param string $instrucoes Instru\u00E7\u00F5es para pagamento.
     * @return $this
     */
    public function setInstrucoes($instrucoes)
    {
        
        $this->instrucoes = $instrucoes;
        return $this;
    }
    
    /**
     * Gets local_pagamento1
     * @return string
     */
    public function getLocalPagamento1()
    {
        return $this->local_pagamento1;
    }
  
    /**
     * Sets local_pagamento1
     * @param string $local_pagamento1 Local preferencial onde pode ser efetuado o pagamento.
     * @return $this
     */
    public function setLocalPagamento1($local_pagamento1)
    {
        
        $this->local_pagamento1 = $local_pagamento1;
        return $this;
    }
    
    /**
     * Gets local_pagamento2
     * @return string
     */
    public function getLocalPagamento2()
    {
        return $this->local_pagamento2;
    }
  
    /**
     * Sets local_pagamento2
     * @param string $local_pagamento2 Local para pagamento (campo adicional).
     * @return $this
     */
    public function setLocalPagamento2($local_pagamento2)
    {
        
        $this->local_pagamento2 = $local_pagamento2;
        return $this;
    }
    
    /**
     * Gets endereco_cobranca_emissor
     * @return string
     */
    public function getEnderecoCobrancaEmissor()
    {
        return $this->endereco_cobranca_emissor;
    }
  
    /**
     * Sets endereco_cobranca_emissor
     * @param string $endereco_cobranca_emissor Endere\u00E7o de cobran\u00E7a do emissor.
     * @return $this
     */
    public function setEnderecoCobrancaEmissor($endereco_cobranca_emissor)
    {
        
        $this->endereco_cobranca_emissor = $endereco_cobranca_emissor;
        return $this;
    }
    
    /**
     * Gets nome_beneficiario
     * @return string
     */
    public function getNomeBeneficiario()
    {
        return $this->nome_beneficiario;
    }
  
    /**
     * Sets nome_beneficiario
     * @param string $nome_beneficiario Nome do benefici\u00E1rio/cedente da cobran\u00E7a.
     * @return $this
     */
    public function setNomeBeneficiario($nome_beneficiario)
    {
        
        $this->nome_beneficiario = $nome_beneficiario;
        return $this;
    }
    
    /**
     * Gets cnpj_beneficiario
     * @return string
     */
    public function getCnpjBeneficiario()
    {
        return $this->cnpj_beneficiario;
    }
  
    /**
     * Sets cnpj_beneficiario
     * @param string $cnpj_beneficiario CNPJ do benefici\u00E1rio/cedente da cobran\u00E7a.
     * @return $this
     */
    public function setCnpjBeneficiario($cnpj_beneficiario)
    {
        
        $this->cnpj_beneficiario = $cnpj_beneficiario;
        return $this;
    }
    
    /**
     * Gets operador
     * @return string
     */
    public function getOperador()
    {
        return $this->operador;
    }
  
    /**
     * Sets operador
     * @param string $operador Usu\u00E1rio responsavel pelo cadastro e/ou altera\u00E7\u00E3o do conv\u00EAnio.
     * @return $this
     */
    public function setOperador($operador)
    {
        
        $this->operador = $operador;
        return $this;
    }
    
    /**
     * Gets data
     * @return string
     */
    public function getData()
    {
        return $this->data;
    }
  
    /**
     * Sets data
     * @param string $data Data de cadastro/altera\u00E7\u00E3o do conv\u00EAnio.
     * @return $this
     */
    public function setData($data)
    {
        
        $this->data = $data;
        return $this;
    }
    
    /**
     * Gets maquina
     * @return string
     */
    public function getMaquina()
    {
        return $this->maquina;
    }
  
    /**
     * Sets maquina
     * @param string $maquina M\u00E1quina pela qual foi realizado o cadastro ou altera\u00E7\u00E3o.
     * @return $this
     */
    public function setMaquina($maquina)
    {
        
        $this->maquina = $maquina;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
