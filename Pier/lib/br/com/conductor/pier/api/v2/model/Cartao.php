<?php
/**
 * Cartao
 *
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2.model;

use \ArrayAccess;
/**
 * Cartao Class Doc Comment
 *
 * @category    Class
 * @description Objeto Cart\u00C3\u00A3o
 * @package     br.com.conductor.pier.api.v2.invoker
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Cartao implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'id_status_cartao' => 'int',
        'id_estagio_cartao' => 'int',
        'id_conta' => 'int',
        'id_pessoa' => 'int',
        'id_produto' => 'int',
        'tipo_portador' => 'string',
        'numero_cartao' => 'string',
        'nome_impresso' => 'string',
        'data_geracao' => '\DateTime',
        'data_status_cartao' => '\DateTime',
        'data_estagio_cartao' => '\DateTime',
        'data_validade' => '\DateTime',
        'data_impressao' => '\DateTime',
        'arquivo_impressao' => 'string',
        'flag_impressao_origem_comercial' => 'int',
        'flag_provisorio' => 'int',
        'codigo_desbloqueio' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'id_status_cartao' => 'idStatusCartao',
        'id_estagio_cartao' => 'idEstagioCartao',
        'id_conta' => 'idConta',
        'id_pessoa' => 'idPessoa',
        'id_produto' => 'idProduto',
        'tipo_portador' => 'tipoPortador',
        'numero_cartao' => 'numeroCartao',
        'nome_impresso' => 'nomeImpresso',
        'data_geracao' => 'dataGeracao',
        'data_status_cartao' => 'dataStatusCartao',
        'data_estagio_cartao' => 'dataEstagioCartao',
        'data_validade' => 'dataValidade',
        'data_impressao' => 'dataImpressao',
        'arquivo_impressao' => 'arquivoImpressao',
        'flag_impressao_origem_comercial' => 'flagImpressaoOrigemComercial',
        'flag_provisorio' => 'flagProvisorio',
        'codigo_desbloqueio' => 'codigoDesbloqueio'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'id_status_cartao' => 'setIdStatusCartao',
        'id_estagio_cartao' => 'setIdEstagioCartao',
        'id_conta' => 'setIdConta',
        'id_pessoa' => 'setIdPessoa',
        'id_produto' => 'setIdProduto',
        'tipo_portador' => 'setTipoPortador',
        'numero_cartao' => 'setNumeroCartao',
        'nome_impresso' => 'setNomeImpresso',
        'data_geracao' => 'setDataGeracao',
        'data_status_cartao' => 'setDataStatusCartao',
        'data_estagio_cartao' => 'setDataEstagioCartao',
        'data_validade' => 'setDataValidade',
        'data_impressao' => 'setDataImpressao',
        'arquivo_impressao' => 'setArquivoImpressao',
        'flag_impressao_origem_comercial' => 'setFlagImpressaoOrigemComercial',
        'flag_provisorio' => 'setFlagProvisorio',
        'codigo_desbloqueio' => 'setCodigoDesbloqueio'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'id_status_cartao' => 'getIdStatusCartao',
        'id_estagio_cartao' => 'getIdEstagioCartao',
        'id_conta' => 'getIdConta',
        'id_pessoa' => 'getIdPessoa',
        'id_produto' => 'getIdProduto',
        'tipo_portador' => 'getTipoPortador',
        'numero_cartao' => 'getNumeroCartao',
        'nome_impresso' => 'getNomeImpresso',
        'data_geracao' => 'getDataGeracao',
        'data_status_cartao' => 'getDataStatusCartao',
        'data_estagio_cartao' => 'getDataEstagioCartao',
        'data_validade' => 'getDataValidade',
        'data_impressao' => 'getDataImpressao',
        'arquivo_impressao' => 'getArquivoImpressao',
        'flag_impressao_origem_comercial' => 'getFlagImpressaoOrigemComercial',
        'flag_provisorio' => 'getFlagProvisorio',
        'codigo_desbloqueio' => 'getCodigoDesbloqueio'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
      * @var int
      */
    protected $id;
    
    /**
      * $id_status_cartao C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Status do Cart\u00C3\u00A3o (id).
      * @var int
      */
    protected $id_status_cartao;
    
    /**
      * $id_estagio_cartao C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Est\u00C3\u00A1gio de Impress\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
      * @var int
      */
    protected $id_estagio_cartao;
    
    /**
      * $id_conta C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Conta a qual o cart\u00C3\u00A3o pertence (id).
      * @var int
      */
    protected $id_conta;
    
    /**
      * $id_pessoa C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o cart\u00C3\u00A3o pertence (id)
      * @var int
      */
    protected $id_pessoa;
    
    /**
      * $id_produto C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto a qual o cart\u00C3\u00A3o pertence (id).
      * @var int
      */
    protected $id_produto;
    
    /**
      * $tipo_portador Apresenta o tipo do Portador do cart\u00C3\u00A3o, sendo: ('T': Titular, 'A': Adicional).
      * @var string
      */
    protected $tipo_portador;
    
    /**
      * $numero_cartao Apresenta o n\u00C3\u00BAmero do cart\u00C3\u00A3o.
      * @var string
      */
    protected $numero_cartao;
    
    /**
      * $nome_impresso Apresenta o nome impresso no cart\u00C3\u00A3o.
      * @var string
      */
    protected $nome_impresso;
    
    /**
      * $data_geracao Apresenta a data em que o cart\u00C3\u00A3o foi gerado.
      * @var \DateTime
      */
    protected $data_geracao;
    
    /**
      * $data_status_cartao Apresenta a data em que o idStatusCartao atual do cart\u00C3\u00A3o fora aplicado, quando houver.
      * @var \DateTime
      */
    protected $data_status_cartao;
    
    /**
      * $data_estagio_cartao Apresenta a data em que o idEstagioCartao atual do cart\u00C3\u00A3o fora aplicado, quando houver.
      * @var \DateTime
      */
    protected $data_estagio_cartao;
    
    /**
      * $data_validade Apresenta a data de validade do cart\u00C3\u00A3o em formato yyyy-MM, quando houver.
      * @var \DateTime
      */
    protected $data_validade;
    
    /**
      * $data_impressao Apresenta a data em que o cart\u00C3\u00A3o fora impresso, caso impress\u00C3\u00A3o em loja, ou a data em que ele fora inclu\u00C3\u00ADdo no arquivo para impress\u00C3\u00A3o via gr\u00C3\u00A1fica.
      * @var \DateTime
      */
    protected $data_impressao;
    
    /**
      * $arquivo_impressao Apresenta o nome do arquivo onde o cart\u00C3\u00A3o fora inclu\u00C3\u00ADdo para impress\u00C3\u00A3o por uma gr\u00C3\u00A1fica, quando houver.
      * @var string
      */
    protected $arquivo_impressao;
    
    /**
      * $flag_impressao_origem_comercial Quando ativa, indica que o cart\u00C3\u00A3o fora impresso na Origem Comercial.
      * @var int
      */
    protected $flag_impressao_origem_comercial;
    
    /**
      * $flag_provisorio Quando ativa, indica que o cart\u00C3\u00A3o \u00C3\u00A9 provis\u00C3\u00B3rio. Ou seja, \u00C3\u00A9 um cart\u00C3\u00A3o para uso tempor\u00C3\u00A1rio quando se deseja permitir que o cliente transacione sem que ele tenha recebido um cart\u00C3\u00A3o definitivo.
      * @var int
      */
    protected $flag_provisorio;
    
    /**
      * $codigo_desbloqueio Apresenta um c\u00C3\u00B3digo espec\u00C3\u00ADfico para ser utilizado como vari\u00C3\u00A1vel no processo de desbloqueio do cart\u00C3\u00A3o para emissores que querem usar esta funcionalidade.
      * @var string
      */
    protected $codigo_desbloqueio;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->id_status_cartao = $data["id_status_cartao"];
            $this->id_estagio_cartao = $data["id_estagio_cartao"];
            $this->id_conta = $data["id_conta"];
            $this->id_pessoa = $data["id_pessoa"];
            $this->id_produto = $data["id_produto"];
            $this->tipo_portador = $data["tipo_portador"];
            $this->numero_cartao = $data["numero_cartao"];
            $this->nome_impresso = $data["nome_impresso"];
            $this->data_geracao = $data["data_geracao"];
            $this->data_status_cartao = $data["data_status_cartao"];
            $this->data_estagio_cartao = $data["data_estagio_cartao"];
            $this->data_validade = $data["data_validade"];
            $this->data_impressao = $data["data_impressao"];
            $this->arquivo_impressao = $data["arquivo_impressao"];
            $this->flag_impressao_origem_comercial = $data["flag_impressao_origem_comercial"];
            $this->flag_provisorio = $data["flag_provisorio"];
            $this->codigo_desbloqueio = $data["codigo_desbloqueio"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets id_status_cartao
     * @return int
     */
    public function getIdStatusCartao()
    {
        return $this->id_status_cartao;
    }
  
    /**
     * Sets id_status_cartao
     * @param int $id_status_cartao C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Status do Cart\u00C3\u00A3o (id).
     * @return $this
     */
    public function setIdStatusCartao($id_status_cartao)
    {
        
        $this->id_status_cartao = $id_status_cartao;
        return $this;
    }
    
    /**
     * Gets id_estagio_cartao
     * @return int
     */
    public function getIdEstagioCartao()
    {
        return $this->id_estagio_cartao;
    }
  
    /**
     * Sets id_estagio_cartao
     * @param int $id_estagio_cartao C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Est\u00C3\u00A1gio de Impress\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
     * @return $this
     */
    public function setIdEstagioCartao($id_estagio_cartao)
    {
        
        $this->id_estagio_cartao = $id_estagio_cartao;
        return $this;
    }
    
    /**
     * Gets id_conta
     * @return int
     */
    public function getIdConta()
    {
        return $this->id_conta;
    }
  
    /**
     * Sets id_conta
     * @param int $id_conta C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Conta a qual o cart\u00C3\u00A3o pertence (id).
     * @return $this
     */
    public function setIdConta($id_conta)
    {
        
        $this->id_conta = $id_conta;
        return $this;
    }
    
    /**
     * Gets id_pessoa
     * @return int
     */
    public function getIdPessoa()
    {
        return $this->id_pessoa;
    }
  
    /**
     * Sets id_pessoa
     * @param int $id_pessoa C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o cart\u00C3\u00A3o pertence (id)
     * @return $this
     */
    public function setIdPessoa($id_pessoa)
    {
        
        $this->id_pessoa = $id_pessoa;
        return $this;
    }
    
    /**
     * Gets id_produto
     * @return int
     */
    public function getIdProduto()
    {
        return $this->id_produto;
    }
  
    /**
     * Sets id_produto
     * @param int $id_produto C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto a qual o cart\u00C3\u00A3o pertence (id).
     * @return $this
     */
    public function setIdProduto($id_produto)
    {
        
        $this->id_produto = $id_produto;
        return $this;
    }
    
    /**
     * Gets tipo_portador
     * @return string
     */
    public function getTipoPortador()
    {
        return $this->tipo_portador;
    }
  
    /**
     * Sets tipo_portador
     * @param string $tipo_portador Apresenta o tipo do Portador do cart\u00C3\u00A3o, sendo: ('T': Titular, 'A': Adicional).
     * @return $this
     */
    public function setTipoPortador($tipo_portador)
    {
        
        $this->tipo_portador = $tipo_portador;
        return $this;
    }
    
    /**
     * Gets numero_cartao
     * @return string
     */
    public function getNumeroCartao()
    {
        return $this->numero_cartao;
    }
  
    /**
     * Sets numero_cartao
     * @param string $numero_cartao Apresenta o n\u00C3\u00BAmero do cart\u00C3\u00A3o.
     * @return $this
     */
    public function setNumeroCartao($numero_cartao)
    {
        
        $this->numero_cartao = $numero_cartao;
        return $this;
    }
    
    /**
     * Gets nome_impresso
     * @return string
     */
    public function getNomeImpresso()
    {
        return $this->nome_impresso;
    }
  
    /**
     * Sets nome_impresso
     * @param string $nome_impresso Apresenta o nome impresso no cart\u00C3\u00A3o.
     * @return $this
     */
    public function setNomeImpresso($nome_impresso)
    {
        
        $this->nome_impresso = $nome_impresso;
        return $this;
    }
    
    /**
     * Gets data_geracao
     * @return \DateTime
     */
    public function getDataGeracao()
    {
        return $this->data_geracao;
    }
  
    /**
     * Sets data_geracao
     * @param \DateTime $data_geracao Apresenta a data em que o cart\u00C3\u00A3o foi gerado.
     * @return $this
     */
    public function setDataGeracao($data_geracao)
    {
        
        $this->data_geracao = $data_geracao;
        return $this;
    }
    
    /**
     * Gets data_status_cartao
     * @return \DateTime
     */
    public function getDataStatusCartao()
    {
        return $this->data_status_cartao;
    }
  
    /**
     * Sets data_status_cartao
     * @param \DateTime $data_status_cartao Apresenta a data em que o idStatusCartao atual do cart\u00C3\u00A3o fora aplicado, quando houver.
     * @return $this
     */
    public function setDataStatusCartao($data_status_cartao)
    {
        
        $this->data_status_cartao = $data_status_cartao;
        return $this;
    }
    
    /**
     * Gets data_estagio_cartao
     * @return \DateTime
     */
    public function getDataEstagioCartao()
    {
        return $this->data_estagio_cartao;
    }
  
    /**
     * Sets data_estagio_cartao
     * @param \DateTime $data_estagio_cartao Apresenta a data em que o idEstagioCartao atual do cart\u00C3\u00A3o fora aplicado, quando houver.
     * @return $this
     */
    public function setDataEstagioCartao($data_estagio_cartao)
    {
        
        $this->data_estagio_cartao = $data_estagio_cartao;
        return $this;
    }
    
    /**
     * Gets data_validade
     * @return \DateTime
     */
    public function getDataValidade()
    {
        return $this->data_validade;
    }
  
    /**
     * Sets data_validade
     * @param \DateTime $data_validade Apresenta a data de validade do cart\u00C3\u00A3o em formato yyyy-MM, quando houver.
     * @return $this
     */
    public function setDataValidade($data_validade)
    {
        
        $this->data_validade = $data_validade;
        return $this;
    }
    
    /**
     * Gets data_impressao
     * @return \DateTime
     */
    public function getDataImpressao()
    {
        return $this->data_impressao;
    }
  
    /**
     * Sets data_impressao
     * @param \DateTime $data_impressao Apresenta a data em que o cart\u00C3\u00A3o fora impresso, caso impress\u00C3\u00A3o em loja, ou a data em que ele fora inclu\u00C3\u00ADdo no arquivo para impress\u00C3\u00A3o via gr\u00C3\u00A1fica.
     * @return $this
     */
    public function setDataImpressao($data_impressao)
    {
        
        $this->data_impressao = $data_impressao;
        return $this;
    }
    
    /**
     * Gets arquivo_impressao
     * @return string
     */
    public function getArquivoImpressao()
    {
        return $this->arquivo_impressao;
    }
  
    /**
     * Sets arquivo_impressao
     * @param string $arquivo_impressao Apresenta o nome do arquivo onde o cart\u00C3\u00A3o fora inclu\u00C3\u00ADdo para impress\u00C3\u00A3o por uma gr\u00C3\u00A1fica, quando houver.
     * @return $this
     */
    public function setArquivoImpressao($arquivo_impressao)
    {
        
        $this->arquivo_impressao = $arquivo_impressao;
        return $this;
    }
    
    /**
     * Gets flag_impressao_origem_comercial
     * @return int
     */
    public function getFlagImpressaoOrigemComercial()
    {
        return $this->flag_impressao_origem_comercial;
    }
  
    /**
     * Sets flag_impressao_origem_comercial
     * @param int $flag_impressao_origem_comercial Quando ativa, indica que o cart\u00C3\u00A3o fora impresso na Origem Comercial.
     * @return $this
     */
    public function setFlagImpressaoOrigemComercial($flag_impressao_origem_comercial)
    {
        
        $this->flag_impressao_origem_comercial = $flag_impressao_origem_comercial;
        return $this;
    }
    
    /**
     * Gets flag_provisorio
     * @return int
     */
    public function getFlagProvisorio()
    {
        return $this->flag_provisorio;
    }
  
    /**
     * Sets flag_provisorio
     * @param int $flag_provisorio Quando ativa, indica que o cart\u00C3\u00A3o \u00C3\u00A9 provis\u00C3\u00B3rio. Ou seja, \u00C3\u00A9 um cart\u00C3\u00A3o para uso tempor\u00C3\u00A1rio quando se deseja permitir que o cliente transacione sem que ele tenha recebido um cart\u00C3\u00A3o definitivo.
     * @return $this
     */
    public function setFlagProvisorio($flag_provisorio)
    {
        
        $this->flag_provisorio = $flag_provisorio;
        return $this;
    }
    
    /**
     * Gets codigo_desbloqueio
     * @return string
     */
    public function getCodigoDesbloqueio()
    {
        return $this->codigo_desbloqueio;
    }
  
    /**
     * Sets codigo_desbloqueio
     * @param string $codigo_desbloqueio Apresenta um c\u00C3\u00B3digo espec\u00C3\u00ADfico para ser utilizado como vari\u00C3\u00A1vel no processo de desbloqueio do cart\u00C3\u00A3o para emissores que querem usar esta funcionalidade.
     * @return $this
     */
    public function setCodigoDesbloqueio($codigo_desbloqueio)
    {
        
        $this->codigo_desbloqueio = $codigo_desbloqueio;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
