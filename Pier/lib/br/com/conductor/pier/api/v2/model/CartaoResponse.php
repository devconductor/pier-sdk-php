<?php
/**
 * CartaoResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2.model;

use \ArrayAccess;
/**
 * CartaoResponse Class Doc Comment
 *
 * @category    Class
 * @description Objeto Cart\u00E3o
 * @package     br.com.conductor.pier.api.v2.invoker
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CartaoResponse implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'flag_titular' => 'int',
        'id_pessoa' => 'int',
        'sequencial_cartao' => 'int',
        'id_conta' => 'int',
        'id_status' => 'int',
        'data_status' => 'string',
        'id_estagio' => 'int',
        'data_estagio' => 'string',
        'numero_bin' => 'int',
        'numero_cartao' => 'string',
        'numero_cartao_hash' => 'int',
        'numero_cartao_criptografado' => 'string',
        'data_emissao' => 'string',
        'data_validade' => 'string',
        'cartao_virtual' => 'int',
        'impressao_avulsa' => 'int',
        'data_impressao' => 'string',
        'nome_arquivo_impressao' => 'string',
        'id_produto' => 'int',
        'nome_impresso' => 'string',
        'codigo_desbloqueio' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'flag_titular' => 'flagTitular',
        'id_pessoa' => 'idPessoa',
        'sequencial_cartao' => 'sequencialCartao',
        'id_conta' => 'idConta',
        'id_status' => 'idStatus',
        'data_status' => 'dataStatus',
        'id_estagio' => 'idEstagio',
        'data_estagio' => 'dataEstagio',
        'numero_bin' => 'numeroBin',
        'numero_cartao' => 'numeroCartao',
        'numero_cartao_hash' => 'numeroCartaoHash',
        'numero_cartao_criptografado' => 'numeroCartaoCriptografado',
        'data_emissao' => 'dataEmissao',
        'data_validade' => 'dataValidade',
        'cartao_virtual' => 'cartaoVirtual',
        'impressao_avulsa' => 'impressaoAvulsa',
        'data_impressao' => 'dataImpressao',
        'nome_arquivo_impressao' => 'nomeArquivoImpressao',
        'id_produto' => 'idProduto',
        'nome_impresso' => 'nomeImpresso',
        'codigo_desbloqueio' => 'codigoDesbloqueio'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'flag_titular' => 'setFlagTitular',
        'id_pessoa' => 'setIdPessoa',
        'sequencial_cartao' => 'setSequencialCartao',
        'id_conta' => 'setIdConta',
        'id_status' => 'setIdStatus',
        'data_status' => 'setDataStatus',
        'id_estagio' => 'setIdEstagio',
        'data_estagio' => 'setDataEstagio',
        'numero_bin' => 'setNumeroBin',
        'numero_cartao' => 'setNumeroCartao',
        'numero_cartao_hash' => 'setNumeroCartaoHash',
        'numero_cartao_criptografado' => 'setNumeroCartaoCriptografado',
        'data_emissao' => 'setDataEmissao',
        'data_validade' => 'setDataValidade',
        'cartao_virtual' => 'setCartaoVirtual',
        'impressao_avulsa' => 'setImpressaoAvulsa',
        'data_impressao' => 'setDataImpressao',
        'nome_arquivo_impressao' => 'setNomeArquivoImpressao',
        'id_produto' => 'setIdProduto',
        'nome_impresso' => 'setNomeImpresso',
        'codigo_desbloqueio' => 'setCodigoDesbloqueio'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'flag_titular' => 'getFlagTitular',
        'id_pessoa' => 'getIdPessoa',
        'sequencial_cartao' => 'getSequencialCartao',
        'id_conta' => 'getIdConta',
        'id_status' => 'getIdStatus',
        'data_status' => 'getDataStatus',
        'id_estagio' => 'getIdEstagio',
        'data_estagio' => 'getDataEstagio',
        'numero_bin' => 'getNumeroBin',
        'numero_cartao' => 'getNumeroCartao',
        'numero_cartao_hash' => 'getNumeroCartaoHash',
        'numero_cartao_criptografado' => 'getNumeroCartaoCriptografado',
        'data_emissao' => 'getDataEmissao',
        'data_validade' => 'getDataValidade',
        'cartao_virtual' => 'getCartaoVirtual',
        'impressao_avulsa' => 'getImpressaoAvulsa',
        'data_impressao' => 'getDataImpressao',
        'nome_arquivo_impressao' => 'getNomeArquivoImpressao',
        'id_produto' => 'getIdProduto',
        'nome_impresso' => 'getNomeImpresso',
        'codigo_desbloqueio' => 'getCodigoDesbloqueio'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o.
      * @var int
      */
    protected $id;
    
    /**
      * $flag_titular Apresenta o tipo do Portador do cart\u00E3o, sendo: (1: Titular, 0: Adicional).
      * @var int
      */
    protected $flag_titular;
    
    /**
      * $id_pessoa C\u00F3digo de Identifica\u00E7\u00E3o da Pessoa a qual o cart\u00E3o pertence
      * @var int
      */
    protected $id_pessoa;
    
    /**
      * $sequencial_cartao N\u00FAmero sequencial do cart\u00E3o
      * @var int
      */
    protected $sequencial_cartao;
    
    /**
      * $id_conta C\u00F3digo de Identifica\u00E7\u00E3o da Conta a qual o cart\u00E3o pertence.
      * @var int
      */
    protected $id_conta;
    
    /**
      * $id_status C\u00F3digo de Identifica\u00E7\u00E3o do Status do Cart\u00E3o.
      * @var int
      */
    protected $id_status;
    
    /**
      * $data_status Apresenta a data em que o idStatusCartao atual do cart\u00E3o fora aplicado, quando houver.
      * @var string
      */
    protected $data_status;
    
    /**
      * $id_estagio C\u00F3digo de Identifica\u00E7\u00E3o do Est\u00E1gio de Impress\u00E3o do Cart\u00E3o.
      * @var int
      */
    protected $id_estagio;
    
    /**
      * $data_estagio Apresenta a data em que o idEstagio atual do cart\u00E3o fora aplicado, quando houver.
      * @var string
      */
    protected $data_estagio;
    
    /**
      * $numero_bin N\u00FAmero do bin do cart\u00E3o.
      * @var int
      */
    protected $numero_bin;
    
    /**
      * $numero_cartao Apresenta o n\u00FAmero do cart\u00E3o.
      * @var string
      */
    protected $numero_cartao;
    
    /**
      * $numero_cartao_hash N\u00FAmero do cart\u00E3o hash.
      * @var int
      */
    protected $numero_cartao_hash;
    
    /**
      * $numero_cartao_criptografado N\u00FAmero do cart\u00E3o criptografado.
      * @var string
      */
    protected $numero_cartao_criptografado;
    
    /**
      * $data_emissao Apresenta a data de emiss\u00E3o do cart\u00E3o.
      * @var string
      */
    protected $data_emissao;
    
    /**
      * $data_validade Apresenta a data de validade do cart\u00E3o em formato yyyy-MM, quando houver.
      * @var string
      */
    protected $data_validade;
    
    /**
      * $cartao_virtual Apresenta o status que informa se o cart\u00E3o \u00E9 virtual. Sendo: (1: True, 0: False).
      * @var int
      */
    protected $cartao_virtual;
    
    /**
      * $impressao_avulsa Quando ativa, indica que o cart\u00E3o fora impresso na Origem Comercial.
      * @var int
      */
    protected $impressao_avulsa;
    
    /**
      * $data_impressao Apresenta a data em que o cart\u00E3o fora impresso, caso impress\u00E3o em loja, ou a data em que ele fora inclu\u00EDdo no arquivo para impress\u00E3o via gr\u00E1fica.
      * @var string
      */
    protected $data_impressao;
    
    /**
      * $nome_arquivo_impressao Apresenta o nome do arquivo onde o cart\u00E3o fora inclu\u00EDdo para impress\u00E3o por uma gr\u00E1fica, quando houver.
      * @var string
      */
    protected $nome_arquivo_impressao;
    
    /**
      * $id_produto C\u00F3digo de Identifica\u00E7\u00E3o do Produto a qual o cart\u00E3o pertence.
      * @var int
      */
    protected $id_produto;
    
    /**
      * $nome_impresso Apresenta o nome impresso no cart\u00E3o.
      * @var string
      */
    protected $nome_impresso;
    
    /**
      * $codigo_desbloqueio Apresenta um c\u00F3digo espec\u00EDfico para ser utilizado como vari\u00E1vel no processo de desbloqueio do cart\u00E3o para emissores que querem usar esta funcionalidade.
      * @var string
      */
    protected $codigo_desbloqueio;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->flag_titular = $data["flag_titular"];
            $this->id_pessoa = $data["id_pessoa"];
            $this->sequencial_cartao = $data["sequencial_cartao"];
            $this->id_conta = $data["id_conta"];
            $this->id_status = $data["id_status"];
            $this->data_status = $data["data_status"];
            $this->id_estagio = $data["id_estagio"];
            $this->data_estagio = $data["data_estagio"];
            $this->numero_bin = $data["numero_bin"];
            $this->numero_cartao = $data["numero_cartao"];
            $this->numero_cartao_hash = $data["numero_cartao_hash"];
            $this->numero_cartao_criptografado = $data["numero_cartao_criptografado"];
            $this->data_emissao = $data["data_emissao"];
            $this->data_validade = $data["data_validade"];
            $this->cartao_virtual = $data["cartao_virtual"];
            $this->impressao_avulsa = $data["impressao_avulsa"];
            $this->data_impressao = $data["data_impressao"];
            $this->nome_arquivo_impressao = $data["nome_arquivo_impressao"];
            $this->id_produto = $data["id_produto"];
            $this->nome_impresso = $data["nome_impresso"];
            $this->codigo_desbloqueio = $data["codigo_desbloqueio"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o.
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets flag_titular
     * @return int
     */
    public function getFlagTitular()
    {
        return $this->flag_titular;
    }
  
    /**
     * Sets flag_titular
     * @param int $flag_titular Apresenta o tipo do Portador do cart\u00E3o, sendo: (1: Titular, 0: Adicional).
     * @return $this
     */
    public function setFlagTitular($flag_titular)
    {
        
        $this->flag_titular = $flag_titular;
        return $this;
    }
    
    /**
     * Gets id_pessoa
     * @return int
     */
    public function getIdPessoa()
    {
        return $this->id_pessoa;
    }
  
    /**
     * Sets id_pessoa
     * @param int $id_pessoa C\u00F3digo de Identifica\u00E7\u00E3o da Pessoa a qual o cart\u00E3o pertence
     * @return $this
     */
    public function setIdPessoa($id_pessoa)
    {
        
        $this->id_pessoa = $id_pessoa;
        return $this;
    }
    
    /**
     * Gets sequencial_cartao
     * @return int
     */
    public function getSequencialCartao()
    {
        return $this->sequencial_cartao;
    }
  
    /**
     * Sets sequencial_cartao
     * @param int $sequencial_cartao N\u00FAmero sequencial do cart\u00E3o
     * @return $this
     */
    public function setSequencialCartao($sequencial_cartao)
    {
        
        $this->sequencial_cartao = $sequencial_cartao;
        return $this;
    }
    
    /**
     * Gets id_conta
     * @return int
     */
    public function getIdConta()
    {
        return $this->id_conta;
    }
  
    /**
     * Sets id_conta
     * @param int $id_conta C\u00F3digo de Identifica\u00E7\u00E3o da Conta a qual o cart\u00E3o pertence.
     * @return $this
     */
    public function setIdConta($id_conta)
    {
        
        $this->id_conta = $id_conta;
        return $this;
    }
    
    /**
     * Gets id_status
     * @return int
     */
    public function getIdStatus()
    {
        return $this->id_status;
    }
  
    /**
     * Sets id_status
     * @param int $id_status C\u00F3digo de Identifica\u00E7\u00E3o do Status do Cart\u00E3o.
     * @return $this
     */
    public function setIdStatus($id_status)
    {
        
        $this->id_status = $id_status;
        return $this;
    }
    
    /**
     * Gets data_status
     * @return string
     */
    public function getDataStatus()
    {
        return $this->data_status;
    }
  
    /**
     * Sets data_status
     * @param string $data_status Apresenta a data em que o idStatusCartao atual do cart\u00E3o fora aplicado, quando houver.
     * @return $this
     */
    public function setDataStatus($data_status)
    {
        
        $this->data_status = $data_status;
        return $this;
    }
    
    /**
     * Gets id_estagio
     * @return int
     */
    public function getIdEstagio()
    {
        return $this->id_estagio;
    }
  
    /**
     * Sets id_estagio
     * @param int $id_estagio C\u00F3digo de Identifica\u00E7\u00E3o do Est\u00E1gio de Impress\u00E3o do Cart\u00E3o.
     * @return $this
     */
    public function setIdEstagio($id_estagio)
    {
        
        $this->id_estagio = $id_estagio;
        return $this;
    }
    
    /**
     * Gets data_estagio
     * @return string
     */
    public function getDataEstagio()
    {
        return $this->data_estagio;
    }
  
    /**
     * Sets data_estagio
     * @param string $data_estagio Apresenta a data em que o idEstagio atual do cart\u00E3o fora aplicado, quando houver.
     * @return $this
     */
    public function setDataEstagio($data_estagio)
    {
        
        $this->data_estagio = $data_estagio;
        return $this;
    }
    
    /**
     * Gets numero_bin
     * @return int
     */
    public function getNumeroBin()
    {
        return $this->numero_bin;
    }
  
    /**
     * Sets numero_bin
     * @param int $numero_bin N\u00FAmero do bin do cart\u00E3o.
     * @return $this
     */
    public function setNumeroBin($numero_bin)
    {
        
        $this->numero_bin = $numero_bin;
        return $this;
    }
    
    /**
     * Gets numero_cartao
     * @return string
     */
    public function getNumeroCartao()
    {
        return $this->numero_cartao;
    }
  
    /**
     * Sets numero_cartao
     * @param string $numero_cartao Apresenta o n\u00FAmero do cart\u00E3o.
     * @return $this
     */
    public function setNumeroCartao($numero_cartao)
    {
        
        $this->numero_cartao = $numero_cartao;
        return $this;
    }
    
    /**
     * Gets numero_cartao_hash
     * @return int
     */
    public function getNumeroCartaoHash()
    {
        return $this->numero_cartao_hash;
    }
  
    /**
     * Sets numero_cartao_hash
     * @param int $numero_cartao_hash N\u00FAmero do cart\u00E3o hash.
     * @return $this
     */
    public function setNumeroCartaoHash($numero_cartao_hash)
    {
        
        $this->numero_cartao_hash = $numero_cartao_hash;
        return $this;
    }
    
    /**
     * Gets numero_cartao_criptografado
     * @return string
     */
    public function getNumeroCartaoCriptografado()
    {
        return $this->numero_cartao_criptografado;
    }
  
    /**
     * Sets numero_cartao_criptografado
     * @param string $numero_cartao_criptografado N\u00FAmero do cart\u00E3o criptografado.
     * @return $this
     */
    public function setNumeroCartaoCriptografado($numero_cartao_criptografado)
    {
        
        $this->numero_cartao_criptografado = $numero_cartao_criptografado;
        return $this;
    }
    
    /**
     * Gets data_emissao
     * @return string
     */
    public function getDataEmissao()
    {
        return $this->data_emissao;
    }
  
    /**
     * Sets data_emissao
     * @param string $data_emissao Apresenta a data de emiss\u00E3o do cart\u00E3o.
     * @return $this
     */
    public function setDataEmissao($data_emissao)
    {
        
        $this->data_emissao = $data_emissao;
        return $this;
    }
    
    /**
     * Gets data_validade
     * @return string
     */
    public function getDataValidade()
    {
        return $this->data_validade;
    }
  
    /**
     * Sets data_validade
     * @param string $data_validade Apresenta a data de validade do cart\u00E3o em formato yyyy-MM, quando houver.
     * @return $this
     */
    public function setDataValidade($data_validade)
    {
        
        $this->data_validade = $data_validade;
        return $this;
    }
    
    /**
     * Gets cartao_virtual
     * @return int
     */
    public function getCartaoVirtual()
    {
        return $this->cartao_virtual;
    }
  
    /**
     * Sets cartao_virtual
     * @param int $cartao_virtual Apresenta o status que informa se o cart\u00E3o \u00E9 virtual. Sendo: (1: True, 0: False).
     * @return $this
     */
    public function setCartaoVirtual($cartao_virtual)
    {
        
        $this->cartao_virtual = $cartao_virtual;
        return $this;
    }
    
    /**
     * Gets impressao_avulsa
     * @return int
     */
    public function getImpressaoAvulsa()
    {
        return $this->impressao_avulsa;
    }
  
    /**
     * Sets impressao_avulsa
     * @param int $impressao_avulsa Quando ativa, indica que o cart\u00E3o fora impresso na Origem Comercial.
     * @return $this
     */
    public function setImpressaoAvulsa($impressao_avulsa)
    {
        
        $this->impressao_avulsa = $impressao_avulsa;
        return $this;
    }
    
    /**
     * Gets data_impressao
     * @return string
     */
    public function getDataImpressao()
    {
        return $this->data_impressao;
    }
  
    /**
     * Sets data_impressao
     * @param string $data_impressao Apresenta a data em que o cart\u00E3o fora impresso, caso impress\u00E3o em loja, ou a data em que ele fora inclu\u00EDdo no arquivo para impress\u00E3o via gr\u00E1fica.
     * @return $this
     */
    public function setDataImpressao($data_impressao)
    {
        
        $this->data_impressao = $data_impressao;
        return $this;
    }
    
    /**
     * Gets nome_arquivo_impressao
     * @return string
     */
    public function getNomeArquivoImpressao()
    {
        return $this->nome_arquivo_impressao;
    }
  
    /**
     * Sets nome_arquivo_impressao
     * @param string $nome_arquivo_impressao Apresenta o nome do arquivo onde o cart\u00E3o fora inclu\u00EDdo para impress\u00E3o por uma gr\u00E1fica, quando houver.
     * @return $this
     */
    public function setNomeArquivoImpressao($nome_arquivo_impressao)
    {
        
        $this->nome_arquivo_impressao = $nome_arquivo_impressao;
        return $this;
    }
    
    /**
     * Gets id_produto
     * @return int
     */
    public function getIdProduto()
    {
        return $this->id_produto;
    }
  
    /**
     * Sets id_produto
     * @param int $id_produto C\u00F3digo de Identifica\u00E7\u00E3o do Produto a qual o cart\u00E3o pertence.
     * @return $this
     */
    public function setIdProduto($id_produto)
    {
        
        $this->id_produto = $id_produto;
        return $this;
    }
    
    /**
     * Gets nome_impresso
     * @return string
     */
    public function getNomeImpresso()
    {
        return $this->nome_impresso;
    }
  
    /**
     * Sets nome_impresso
     * @param string $nome_impresso Apresenta o nome impresso no cart\u00E3o.
     * @return $this
     */
    public function setNomeImpresso($nome_impresso)
    {
        
        $this->nome_impresso = $nome_impresso;
        return $this;
    }
    
    /**
     * Gets codigo_desbloqueio
     * @return string
     */
    public function getCodigoDesbloqueio()
    {
        return $this->codigo_desbloqueio;
    }
  
    /**
     * Sets codigo_desbloqueio
     * @param string $codigo_desbloqueio Apresenta um c\u00F3digo espec\u00EDfico para ser utilizado como vari\u00E1vel no processo de desbloqueio do cart\u00E3o para emissores que querem usar esta funcionalidade.
     * @return $this
     */
    public function setCodigoDesbloqueio($codigo_desbloqueio)
    {
        
        $this->codigo_desbloqueio = $codigo_desbloqueio;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
