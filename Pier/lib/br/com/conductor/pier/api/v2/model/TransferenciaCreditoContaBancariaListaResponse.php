<?php
/**
 * TransferenciaCreditoContaBancariaListaResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2.model;

use \ArrayAccess;
/**
 * TransferenciaCreditoContaBancariaListaResponse Class Doc Comment
 *
 * @category    Class
 * @description Listagem de Transfer\u00EAncia de cr\u00E9dito para contas banc\u00E1rias
 * @package     br.com.conductor.pier.api.v2.invoker
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TransferenciaCreditoContaBancariaListaResponse implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id_transferencia' => 'int',
        'id_conta' => 'int',
        'id_cartao' => 'int',
        'valor_compra' => 'Number',
        'valor_contrato' => 'Number',
        'data_compra' => 'string',
        'status' => 'int',
        'status_processamento' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id_transferencia' => 'idTransferencia',
        'id_conta' => 'idConta',
        'id_cartao' => 'idCartao',
        'valor_compra' => 'valorCompra',
        'valor_contrato' => 'valorContrato',
        'data_compra' => 'dataCompra',
        'status' => 'status',
        'status_processamento' => 'statusProcessamento'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id_transferencia' => 'setIdTransferencia',
        'id_conta' => 'setIdConta',
        'id_cartao' => 'setIdCartao',
        'valor_compra' => 'setValorCompra',
        'valor_contrato' => 'setValorContrato',
        'data_compra' => 'setDataCompra',
        'status' => 'setStatus',
        'status_processamento' => 'setStatusProcessamento'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id_transferencia' => 'getIdTransferencia',
        'id_conta' => 'getIdConta',
        'id_cartao' => 'getIdCartao',
        'valor_compra' => 'getValorCompra',
        'valor_contrato' => 'getValorContrato',
        'data_compra' => 'getDataCompra',
        'status' => 'getStatus',
        'status_processamento' => 'getStatusProcessamento'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id_transferencia C\u00F3digo de identifica\u00E7\u00E3o da transferencia.
      * @var int
      */
    protected $id_transferencia;
    
    /**
      * $id_conta C\u00F3digo de identifica\u00E7\u00E3o da conta.
      * @var int
      */
    protected $id_conta;
    
    /**
      * $id_cartao C\u00F3digo de identifica\u00E7\u00E3o do cart\u00E3o.
      * @var int
      */
    protected $id_cartao;
    
    /**
      * $valor_compra Valor da transfer\u00EAncia.
      * @var Number
      */
    protected $valor_compra;
    
    /**
      * $valor_contrato Valor da transfer\u00EAncia acrescido do valor da tarifa de saque se houver tarifa de saque.
      * @var Number
      */
    protected $valor_contrato;
    
    /**
      * $data_compra Data da transfer\u00EAncia.
      * @var string
      */
    protected $data_compra;
    
    /**
      * $status C\u00F3digo de status de processamento.
      * @var int
      */
    protected $status;
    
    /**
      * $status_processamento Status Processamento.
      * @var string
      */
    protected $status_processamento;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id_transferencia = $data["id_transferencia"];
            $this->id_conta = $data["id_conta"];
            $this->id_cartao = $data["id_cartao"];
            $this->valor_compra = $data["valor_compra"];
            $this->valor_contrato = $data["valor_contrato"];
            $this->data_compra = $data["data_compra"];
            $this->status = $data["status"];
            $this->status_processamento = $data["status_processamento"];
        }
    }
    
    /**
     * Gets id_transferencia
     * @return int
     */
    public function getIdTransferencia()
    {
        return $this->id_transferencia;
    }
  
    /**
     * Sets id_transferencia
     * @param int $id_transferencia C\u00F3digo de identifica\u00E7\u00E3o da transferencia.
     * @return $this
     */
    public function setIdTransferencia($id_transferencia)
    {
        
        $this->id_transferencia = $id_transferencia;
        return $this;
    }
    
    /**
     * Gets id_conta
     * @return int
     */
    public function getIdConta()
    {
        return $this->id_conta;
    }
  
    /**
     * Sets id_conta
     * @param int $id_conta C\u00F3digo de identifica\u00E7\u00E3o da conta.
     * @return $this
     */
    public function setIdConta($id_conta)
    {
        
        $this->id_conta = $id_conta;
        return $this;
    }
    
    /**
     * Gets id_cartao
     * @return int
     */
    public function getIdCartao()
    {
        return $this->id_cartao;
    }
  
    /**
     * Sets id_cartao
     * @param int $id_cartao C\u00F3digo de identifica\u00E7\u00E3o do cart\u00E3o.
     * @return $this
     */
    public function setIdCartao($id_cartao)
    {
        
        $this->id_cartao = $id_cartao;
        return $this;
    }
    
    /**
     * Gets valor_compra
     * @return Number
     */
    public function getValorCompra()
    {
        return $this->valor_compra;
    }
  
    /**
     * Sets valor_compra
     * @param Number $valor_compra Valor da transfer\u00EAncia.
     * @return $this
     */
    public function setValorCompra($valor_compra)
    {
        
        $this->valor_compra = $valor_compra;
        return $this;
    }
    
    /**
     * Gets valor_contrato
     * @return Number
     */
    public function getValorContrato()
    {
        return $this->valor_contrato;
    }
  
    /**
     * Sets valor_contrato
     * @param Number $valor_contrato Valor da transfer\u00EAncia acrescido do valor da tarifa de saque se houver tarifa de saque.
     * @return $this
     */
    public function setValorContrato($valor_contrato)
    {
        
        $this->valor_contrato = $valor_contrato;
        return $this;
    }
    
    /**
     * Gets data_compra
     * @return string
     */
    public function getDataCompra()
    {
        return $this->data_compra;
    }
  
    /**
     * Sets data_compra
     * @param string $data_compra Data da transfer\u00EAncia.
     * @return $this
     */
    public function setDataCompra($data_compra)
    {
        
        $this->data_compra = $data_compra;
        return $this;
    }
    
    /**
     * Gets status
     * @return int
     */
    public function getStatus()
    {
        return $this->status;
    }
  
    /**
     * Sets status
     * @param int $status C\u00F3digo de status de processamento.
     * @return $this
     */
    public function setStatus($status)
    {
        
        $this->status = $status;
        return $this;
    }
    
    /**
     * Gets status_processamento
     * @return string
     */
    public function getStatusProcessamento()
    {
        return $this->status_processamento;
    }
  
    /**
     * Sets status_processamento
     * @param string $status_processamento Status Processamento.
     * @return $this
     */
    public function setStatusProcessamento($status_processamento)
    {
        
        $this->status_processamento = $status_processamento;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
