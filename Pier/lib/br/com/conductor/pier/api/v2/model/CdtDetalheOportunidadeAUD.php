<?php
/**
 * CdtDetalheOportunidadeAUD
 *
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2.model;

use \ArrayAccess;
/**
 * CdtDetalheOportunidadeAUD Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     br.com.conductor.pier.api.v2.invoker
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CdtDetalheOportunidadeAUD implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'conteudo' => 'string',
        'id' => 'int',
        'id_oportunidade' => 'int',
        'nome_campo' => 'string',
        'rev' => 'int',
        'rev_date' => '\DateTime',
        'rev_oportunidade' => 'int',
        'rev_type' => 'int',
        'rev_user' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'conteudo' => 'conteudo',
        'id' => 'id',
        'id_oportunidade' => 'idOportunidade',
        'nome_campo' => 'nomeCampo',
        'rev' => 'rev',
        'rev_date' => 'revDate',
        'rev_oportunidade' => 'revOportunidade',
        'rev_type' => 'revType',
        'rev_user' => 'revUser'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'conteudo' => 'setConteudo',
        'id' => 'setId',
        'id_oportunidade' => 'setIdOportunidade',
        'nome_campo' => 'setNomeCampo',
        'rev' => 'setRev',
        'rev_date' => 'setRevDate',
        'rev_oportunidade' => 'setRevOportunidade',
        'rev_type' => 'setRevType',
        'rev_user' => 'setRevUser'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'conteudo' => 'getConteudo',
        'id' => 'getId',
        'id_oportunidade' => 'getIdOportunidade',
        'nome_campo' => 'getNomeCampo',
        'rev' => 'getRev',
        'rev_date' => 'getRevDate',
        'rev_oportunidade' => 'getRevOportunidade',
        'rev_type' => 'getRevType',
        'rev_user' => 'getRevUser'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $conteudo 
      * @var string
      */
    protected $conteudo;
    
    /**
      * $id 
      * @var int
      */
    protected $id;
    
    /**
      * $id_oportunidade 
      * @var int
      */
    protected $id_oportunidade;
    
    /**
      * $nome_campo 
      * @var string
      */
    protected $nome_campo;
    
    /**
      * $rev 
      * @var int
      */
    protected $rev;
    
    /**
      * $rev_date 
      * @var \DateTime
      */
    protected $rev_date;
    
    /**
      * $rev_oportunidade 
      * @var int
      */
    protected $rev_oportunidade;
    
    /**
      * $rev_type 
      * @var int
      */
    protected $rev_type;
    
    /**
      * $rev_user 
      * @var string
      */
    protected $rev_user;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->conteudo = $data["conteudo"];
            $this->id = $data["id"];
            $this->id_oportunidade = $data["id_oportunidade"];
            $this->nome_campo = $data["nome_campo"];
            $this->rev = $data["rev"];
            $this->rev_date = $data["rev_date"];
            $this->rev_oportunidade = $data["rev_oportunidade"];
            $this->rev_type = $data["rev_type"];
            $this->rev_user = $data["rev_user"];
        }
    }
    
    /**
     * Gets conteudo
     * @return string
     */
    public function getConteudo()
    {
        return $this->conteudo;
    }
  
    /**
     * Sets conteudo
     * @param string $conteudo 
     * @return $this
     */
    public function setConteudo($conteudo)
    {
        
        $this->conteudo = $conteudo;
        return $this;
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets id_oportunidade
     * @return int
     */
    public function getIdOportunidade()
    {
        return $this->id_oportunidade;
    }
  
    /**
     * Sets id_oportunidade
     * @param int $id_oportunidade 
     * @return $this
     */
    public function setIdOportunidade($id_oportunidade)
    {
        
        $this->id_oportunidade = $id_oportunidade;
        return $this;
    }
    
    /**
     * Gets nome_campo
     * @return string
     */
    public function getNomeCampo()
    {
        return $this->nome_campo;
    }
  
    /**
     * Sets nome_campo
     * @param string $nome_campo 
     * @return $this
     */
    public function setNomeCampo($nome_campo)
    {
        
        $this->nome_campo = $nome_campo;
        return $this;
    }
    
    /**
     * Gets rev
     * @return int
     */
    public function getRev()
    {
        return $this->rev;
    }
  
    /**
     * Sets rev
     * @param int $rev 
     * @return $this
     */
    public function setRev($rev)
    {
        
        $this->rev = $rev;
        return $this;
    }
    
    /**
     * Gets rev_date
     * @return \DateTime
     */
    public function getRevDate()
    {
        return $this->rev_date;
    }
  
    /**
     * Sets rev_date
     * @param \DateTime $rev_date 
     * @return $this
     */
    public function setRevDate($rev_date)
    {
        
        $this->rev_date = $rev_date;
        return $this;
    }
    
    /**
     * Gets rev_oportunidade
     * @return int
     */
    public function getRevOportunidade()
    {
        return $this->rev_oportunidade;
    }
  
    /**
     * Sets rev_oportunidade
     * @param int $rev_oportunidade 
     * @return $this
     */
    public function setRevOportunidade($rev_oportunidade)
    {
        
        $this->rev_oportunidade = $rev_oportunidade;
        return $this;
    }
    
    /**
     * Gets rev_type
     * @return int
     */
    public function getRevType()
    {
        return $this->rev_type;
    }
  
    /**
     * Sets rev_type
     * @param int $rev_type 
     * @return $this
     */
    public function setRevType($rev_type)
    {
        
        $this->rev_type = $rev_type;
        return $this;
    }
    
    /**
     * Gets rev_user
     * @return string
     */
    public function getRevUser()
    {
        return $this->rev_user;
    }
  
    /**
     * Sets rev_user
     * @param string $rev_user 
     * @return $this
     */
    public function setRevUser($rev_user)
    {
        
        $this->rev_user = $rev_user;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
