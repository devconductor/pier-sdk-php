<?php
/**
 * GlobaltagcadastroclienteApi
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2;

use \br.com.conductor.pier.api.v2.invoker\Configuration;
use \br.com.conductor.pier.api.v2.invoker\ApiClient;
use \br.com.conductor.pier.api.v2.invoker\ApiException;
use \br.com.conductor.pier.api.v2.invoker\ObjectSerializer;

/**
 * GlobaltagcadastroclienteApi Class Doc Comment
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GlobaltagcadastroclienteApi
{

    /**
     * API Client
     * @var \br.com.conductor.pier.api.v2.invoker\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://localhost/');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \br.com.conductor.pier.api.v2.invoker\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient $apiClient set the API client
     * @return GlobaltagcadastroclienteApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * alterarUsingPUT
     *
     * {{{adicional_resource_alterar}}}
     *
     * @param int $id {{{adicional_resource_alterar_param_id_conta}}} (required)
     * @param int $id_pessoa {{{adicional_resource_alterar_param_id_pessoa}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\AdicionalUpdate $adicional_update adicionalUpdate (required)
     * @return \br.com.conductor.pier.api.v2.model\AdicionalDetalheResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUT($id, $id_pessoa, $adicional_update)
    {
        list($response, $statusCode, $httpHeader) = $this->alterarUsingPUTWithHttpInfo ($id, $id_pessoa, $adicional_update);
        return $response; 
    }


    /**
     * alterarUsingPUTWithHttpInfo
     *
     * {{{adicional_resource_alterar}}}
     *
     * @param int $id {{{adicional_resource_alterar_param_id_conta}}} (required)
     * @param int $id_pessoa {{{adicional_resource_alterar_param_id_pessoa}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\AdicionalUpdate $adicional_update adicionalUpdate (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\AdicionalDetalheResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUTWithHttpInfo($id, $id_pessoa, $adicional_update)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling alterarUsingPUT');
        }
        // verify the required parameter 'id_pessoa' is set
        if ($id_pessoa === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_pessoa when calling alterarUsingPUT');
        }
        // verify the required parameter 'adicional_update' is set
        if ($adicional_update === null) {
            throw new \InvalidArgumentException('Missing the required parameter $adicional_update when calling alterarUsingPUT');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/adicionais/{idPessoa}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }// path params
        
        if ($id_pessoa !== null) {
            $resourcePath = str_replace(
                "{" . "idPessoa" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_pessoa),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($adicional_update)) {
            $_tempBody = $adicional_update;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\AdicionalDetalheResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\AdicionalDetalheResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\AdicionalDetalheResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * alterarUsingPUT15
     *
     * {{{pessoa_detalhe_resource_alterar}}}
     *
     * @param int $id {{{pessoa_detalhe_resource_alterar_param_id}}} (required)
     * @param string $nome_mae {{{pessoa_detalhe_update_nome_mae_value}}} (optional)
     * @param int $id_estado_civil {{{pessoa_detalhe_update_id_estado_civil_value}}} (optional)
     * @param string $id_profissao {{{pessoa_detalhe_update_id_profissao_value}}} (optional)
     * @param int $id_natureza_ocupacao {{{pessoa_detalhe_update_id_natureza_ocupacao_value}}} (optional)
     * @param int $id_nacionalidade {{{pessoa_detalhe_update_id_nacionalidade_value}}} (optional)
     * @param int $numero_banco {{{pessoa_detalhe_update_numero_banco_value}}} (optional)
     * @param int $numero_agencia {{{pessoa_detalhe_update_numero_agencia_value}}} (optional)
     * @param string $numero_conta_corrente {{{pessoa_detalhe_update_numero_conta_corrente_value}}} (optional)
     * @param string $email {{{pessoa_detalhe_update_email_value}}} (optional)
     * @param string $nome_empresa {{{pessoa_detalhe_update_nome_empresa_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PessoaDetalheResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUT15($id, $nome_mae = null, $id_estado_civil = null, $id_profissao = null, $id_natureza_ocupacao = null, $id_nacionalidade = null, $numero_banco = null, $numero_agencia = null, $numero_conta_corrente = null, $email = null, $nome_empresa = null)
    {
        list($response, $statusCode, $httpHeader) = $this->alterarUsingPUT15WithHttpInfo ($id, $nome_mae, $id_estado_civil, $id_profissao, $id_natureza_ocupacao, $id_nacionalidade, $numero_banco, $numero_agencia, $numero_conta_corrente, $email, $nome_empresa);
        return $response; 
    }


    /**
     * alterarUsingPUT15WithHttpInfo
     *
     * {{{pessoa_detalhe_resource_alterar}}}
     *
     * @param int $id {{{pessoa_detalhe_resource_alterar_param_id}}} (required)
     * @param string $nome_mae {{{pessoa_detalhe_update_nome_mae_value}}} (optional)
     * @param int $id_estado_civil {{{pessoa_detalhe_update_id_estado_civil_value}}} (optional)
     * @param string $id_profissao {{{pessoa_detalhe_update_id_profissao_value}}} (optional)
     * @param int $id_natureza_ocupacao {{{pessoa_detalhe_update_id_natureza_ocupacao_value}}} (optional)
     * @param int $id_nacionalidade {{{pessoa_detalhe_update_id_nacionalidade_value}}} (optional)
     * @param int $numero_banco {{{pessoa_detalhe_update_numero_banco_value}}} (optional)
     * @param int $numero_agencia {{{pessoa_detalhe_update_numero_agencia_value}}} (optional)
     * @param string $numero_conta_corrente {{{pessoa_detalhe_update_numero_conta_corrente_value}}} (optional)
     * @param string $email {{{pessoa_detalhe_update_email_value}}} (optional)
     * @param string $nome_empresa {{{pessoa_detalhe_update_nome_empresa_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PessoaDetalheResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUT15WithHttpInfo($id, $nome_mae = null, $id_estado_civil = null, $id_profissao = null, $id_natureza_ocupacao = null, $id_nacionalidade = null, $numero_banco = null, $numero_agencia = null, $numero_conta_corrente = null, $email = null, $nome_empresa = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling alterarUsingPUT15');
        }
  
        // parse inputs
        $resourcePath = "/api/pessoas-detalhes/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($nome_mae !== null) {
            $queryParams['nomeMae'] = $this->apiClient->getSerializer()->toQueryValue($nome_mae);
        }// query params
        
        if ($id_estado_civil !== null) {
            $queryParams['idEstadoCivil'] = $this->apiClient->getSerializer()->toQueryValue($id_estado_civil);
        }// query params
        
        if ($id_profissao !== null) {
            $queryParams['idProfissao'] = $this->apiClient->getSerializer()->toQueryValue($id_profissao);
        }// query params
        
        if ($id_natureza_ocupacao !== null) {
            $queryParams['idNaturezaOcupacao'] = $this->apiClient->getSerializer()->toQueryValue($id_natureza_ocupacao);
        }// query params
        
        if ($id_nacionalidade !== null) {
            $queryParams['idNacionalidade'] = $this->apiClient->getSerializer()->toQueryValue($id_nacionalidade);
        }// query params
        
        if ($numero_banco !== null) {
            $queryParams['numeroBanco'] = $this->apiClient->getSerializer()->toQueryValue($numero_banco);
        }// query params
        
        if ($numero_agencia !== null) {
            $queryParams['numeroAgencia'] = $this->apiClient->getSerializer()->toQueryValue($numero_agencia);
        }// query params
        
        if ($numero_conta_corrente !== null) {
            $queryParams['numeroContaCorrente'] = $this->apiClient->getSerializer()->toQueryValue($numero_conta_corrente);
        }// query params
        
        if ($email !== null) {
            $queryParams['email'] = $this->apiClient->getSerializer()->toQueryValue($email);
        }// query params
        
        if ($nome_empresa !== null) {
            $queryParams['nomeEmpresa'] = $this->apiClient->getSerializer()->toQueryValue($nome_empresa);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PessoaDetalheResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PessoaDetalheResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PessoaDetalheResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * alterarUsingPUT16
     *
     * {{{pessoa_resource_alterar}}}
     *
     * @param int $id {{{pessoa_resource_alterar_param_id}}} (required)
     * @param string $nome {{{pessoa_persist_nome_value}}} (required)
     * @param string $tipo {{{pessoa_persist_tipo_value}}} (required)
     * @param string $data_nascimento {{{pessoa_persist_data_nascimento_value}}} (required)
     * @param string $cpf {{{pessoa_persist_cpf_value}}} (optional)
     * @param string $cnpj {{{pessoa_persist_cnpj_value}}} (optional)
     * @param string $sexo {{{pessoa_persist_sexo_value}}} (optional)
     * @param string $numero_identidade {{{pessoa_persist_numero_identidade_value}}} (optional)
     * @param string $orgao_expedidor_identidade {{{pessoa_persist_orgao_expedidor_identidade_value}}} (optional)
     * @param string $unidade_federativa_identidade {{{pessoa_persist_unidade_federativa_identidade_value}}} (optional)
     * @param string $data_emissao_identidade {{{pessoa_persist_data_emissao_identidade_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PessoaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUT16($id, $nome, $tipo, $data_nascimento, $cpf = null, $cnpj = null, $sexo = null, $numero_identidade = null, $orgao_expedidor_identidade = null, $unidade_federativa_identidade = null, $data_emissao_identidade = null)
    {
        list($response, $statusCode, $httpHeader) = $this->alterarUsingPUT16WithHttpInfo ($id, $nome, $tipo, $data_nascimento, $cpf, $cnpj, $sexo, $numero_identidade, $orgao_expedidor_identidade, $unidade_federativa_identidade, $data_emissao_identidade);
        return $response; 
    }


    /**
     * alterarUsingPUT16WithHttpInfo
     *
     * {{{pessoa_resource_alterar}}}
     *
     * @param int $id {{{pessoa_resource_alterar_param_id}}} (required)
     * @param string $nome {{{pessoa_persist_nome_value}}} (required)
     * @param string $tipo {{{pessoa_persist_tipo_value}}} (required)
     * @param string $data_nascimento {{{pessoa_persist_data_nascimento_value}}} (required)
     * @param string $cpf {{{pessoa_persist_cpf_value}}} (optional)
     * @param string $cnpj {{{pessoa_persist_cnpj_value}}} (optional)
     * @param string $sexo {{{pessoa_persist_sexo_value}}} (optional)
     * @param string $numero_identidade {{{pessoa_persist_numero_identidade_value}}} (optional)
     * @param string $orgao_expedidor_identidade {{{pessoa_persist_orgao_expedidor_identidade_value}}} (optional)
     * @param string $unidade_federativa_identidade {{{pessoa_persist_unidade_federativa_identidade_value}}} (optional)
     * @param string $data_emissao_identidade {{{pessoa_persist_data_emissao_identidade_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PessoaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUT16WithHttpInfo($id, $nome, $tipo, $data_nascimento, $cpf = null, $cnpj = null, $sexo = null, $numero_identidade = null, $orgao_expedidor_identidade = null, $unidade_federativa_identidade = null, $data_emissao_identidade = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling alterarUsingPUT16');
        }
        // verify the required parameter 'nome' is set
        if ($nome === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nome when calling alterarUsingPUT16');
        }
        // verify the required parameter 'tipo' is set
        if ($tipo === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tipo when calling alterarUsingPUT16');
        }
        // verify the required parameter 'data_nascimento' is set
        if ($data_nascimento === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data_nascimento when calling alterarUsingPUT16');
        }
  
        // parse inputs
        $resourcePath = "/api/pessoas/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($nome !== null) {
            $queryParams['nome'] = $this->apiClient->getSerializer()->toQueryValue($nome);
        }// query params
        
        if ($tipo !== null) {
            $queryParams['tipo'] = $this->apiClient->getSerializer()->toQueryValue($tipo);
        }// query params
        
        if ($cpf !== null) {
            $queryParams['cpf'] = $this->apiClient->getSerializer()->toQueryValue($cpf);
        }// query params
        
        if ($cnpj !== null) {
            $queryParams['cnpj'] = $this->apiClient->getSerializer()->toQueryValue($cnpj);
        }// query params
        
        if ($data_nascimento !== null) {
            $queryParams['dataNascimento'] = $this->apiClient->getSerializer()->toQueryValue($data_nascimento);
        }// query params
        
        if ($sexo !== null) {
            $queryParams['sexo'] = $this->apiClient->getSerializer()->toQueryValue($sexo);
        }// query params
        
        if ($numero_identidade !== null) {
            $queryParams['numeroIdentidade'] = $this->apiClient->getSerializer()->toQueryValue($numero_identidade);
        }// query params
        
        if ($orgao_expedidor_identidade !== null) {
            $queryParams['orgaoExpedidorIdentidade'] = $this->apiClient->getSerializer()->toQueryValue($orgao_expedidor_identidade);
        }// query params
        
        if ($unidade_federativa_identidade !== null) {
            $queryParams['unidadeFederativaIdentidade'] = $this->apiClient->getSerializer()->toQueryValue($unidade_federativa_identidade);
        }// query params
        
        if ($data_emissao_identidade !== null) {
            $queryParams['dataEmissaoIdentidade'] = $this->apiClient->getSerializer()->toQueryValue($data_emissao_identidade);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PessoaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PessoaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PessoaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * alterarUsingPUT18
     *
     * {{{telefone_resource_alterar}}}
     *
     * @param int $id {{{telefone_alterar_persist_id_value}}} (required)
     * @param int $id_tipo_telefone {{{telefone_alterar_persist_id_tipo_telefone_value}}} (optional)
     * @param string $ddd {{{telefone_alterar_persist_ddd_value}}} (optional)
     * @param string $telefone {{{telefone_alterar_persist_telefone_value}}} (optional)
     * @param string $ramal {{{telefone_alterar_persist_ramal_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\TelefoneResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUT18($id, $id_tipo_telefone = null, $ddd = null, $telefone = null, $ramal = null)
    {
        list($response, $statusCode, $httpHeader) = $this->alterarUsingPUT18WithHttpInfo ($id, $id_tipo_telefone, $ddd, $telefone, $ramal);
        return $response; 
    }


    /**
     * alterarUsingPUT18WithHttpInfo
     *
     * {{{telefone_resource_alterar}}}
     *
     * @param int $id {{{telefone_alterar_persist_id_value}}} (required)
     * @param int $id_tipo_telefone {{{telefone_alterar_persist_id_tipo_telefone_value}}} (optional)
     * @param string $ddd {{{telefone_alterar_persist_ddd_value}}} (optional)
     * @param string $telefone {{{telefone_alterar_persist_telefone_value}}} (optional)
     * @param string $ramal {{{telefone_alterar_persist_ramal_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\TelefoneResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUT18WithHttpInfo($id, $id_tipo_telefone = null, $ddd = null, $telefone = null, $ramal = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling alterarUsingPUT18');
        }
  
        // parse inputs
        $resourcePath = "/api/telefones";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }// query params
        
        if ($id_tipo_telefone !== null) {
            $queryParams['idTipoTelefone'] = $this->apiClient->getSerializer()->toQueryValue($id_tipo_telefone);
        }// query params
        
        if ($ddd !== null) {
            $queryParams['ddd'] = $this->apiClient->getSerializer()->toQueryValue($ddd);
        }// query params
        
        if ($telefone !== null) {
            $queryParams['telefone'] = $this->apiClient->getSerializer()->toQueryValue($telefone);
        }// query params
        
        if ($ramal !== null) {
            $queryParams['ramal'] = $this->apiClient->getSerializer()->toQueryValue($ramal);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\TelefoneResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\TelefoneResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\TelefoneResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * alterarUsingPUT5
     *
     * {{{endereco_resource_alterar}}}
     *
     * @param int $id id (required)
     * @param int $id_pessoa {{{endereco_persist_id_pessoa_value}}} (optional)
     * @param int $id_tipo_endereco {{{endereco_persist_id_tipo_endereco_value}}} (optional)
     * @param string $cep {{{endereco_persist_cep_value}}} (optional)
     * @param string $logradouro {{{endereco_persist_logradouro_value}}} (optional)
     * @param int $numero {{{endereco_persist_numero_value}}} (optional)
     * @param string $complemento {{{endereco_persist_complemento_value}}} (optional)
     * @param string $ponto_referencia {{{endereco_persist_ponto_referencia_value}}} (optional)
     * @param string $bairro {{{endereco_persist_bairro_value}}} (optional)
     * @param string $cidade {{{endereco_persist_cidade_value}}} (optional)
     * @param string $uf {{{endereco_persist_uf_value}}} (optional)
     * @param string $pais {{{endereco_persist_pais_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\EnderecoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUT5($id, $id_pessoa = null, $id_tipo_endereco = null, $cep = null, $logradouro = null, $numero = null, $complemento = null, $ponto_referencia = null, $bairro = null, $cidade = null, $uf = null, $pais = null)
    {
        list($response, $statusCode, $httpHeader) = $this->alterarUsingPUT5WithHttpInfo ($id, $id_pessoa, $id_tipo_endereco, $cep, $logradouro, $numero, $complemento, $ponto_referencia, $bairro, $cidade, $uf, $pais);
        return $response; 
    }


    /**
     * alterarUsingPUT5WithHttpInfo
     *
     * {{{endereco_resource_alterar}}}
     *
     * @param int $id id (required)
     * @param int $id_pessoa {{{endereco_persist_id_pessoa_value}}} (optional)
     * @param int $id_tipo_endereco {{{endereco_persist_id_tipo_endereco_value}}} (optional)
     * @param string $cep {{{endereco_persist_cep_value}}} (optional)
     * @param string $logradouro {{{endereco_persist_logradouro_value}}} (optional)
     * @param int $numero {{{endereco_persist_numero_value}}} (optional)
     * @param string $complemento {{{endereco_persist_complemento_value}}} (optional)
     * @param string $ponto_referencia {{{endereco_persist_ponto_referencia_value}}} (optional)
     * @param string $bairro {{{endereco_persist_bairro_value}}} (optional)
     * @param string $cidade {{{endereco_persist_cidade_value}}} (optional)
     * @param string $uf {{{endereco_persist_uf_value}}} (optional)
     * @param string $pais {{{endereco_persist_pais_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\EnderecoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUT5WithHttpInfo($id, $id_pessoa = null, $id_tipo_endereco = null, $cep = null, $logradouro = null, $numero = null, $complemento = null, $ponto_referencia = null, $bairro = null, $cidade = null, $uf = null, $pais = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling alterarUsingPUT5');
        }
  
        // parse inputs
        $resourcePath = "/api/enderecos";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }// query params
        
        if ($id_pessoa !== null) {
            $queryParams['idPessoa'] = $this->apiClient->getSerializer()->toQueryValue($id_pessoa);
        }// query params
        
        if ($id_tipo_endereco !== null) {
            $queryParams['idTipoEndereco'] = $this->apiClient->getSerializer()->toQueryValue($id_tipo_endereco);
        }// query params
        
        if ($cep !== null) {
            $queryParams['cep'] = $this->apiClient->getSerializer()->toQueryValue($cep);
        }// query params
        
        if ($logradouro !== null) {
            $queryParams['logradouro'] = $this->apiClient->getSerializer()->toQueryValue($logradouro);
        }// query params
        
        if ($numero !== null) {
            $queryParams['numero'] = $this->apiClient->getSerializer()->toQueryValue($numero);
        }// query params
        
        if ($complemento !== null) {
            $queryParams['complemento'] = $this->apiClient->getSerializer()->toQueryValue($complemento);
        }// query params
        
        if ($ponto_referencia !== null) {
            $queryParams['pontoReferencia'] = $this->apiClient->getSerializer()->toQueryValue($ponto_referencia);
        }// query params
        
        if ($bairro !== null) {
            $queryParams['bairro'] = $this->apiClient->getSerializer()->toQueryValue($bairro);
        }// query params
        
        if ($cidade !== null) {
            $queryParams['cidade'] = $this->apiClient->getSerializer()->toQueryValue($cidade);
        }// query params
        
        if ($uf !== null) {
            $queryParams['uf'] = $this->apiClient->getSerializer()->toQueryValue($uf);
        }// query params
        
        if ($pais !== null) {
            $queryParams['pais'] = $this->apiClient->getSerializer()->toQueryValue($pais);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\EnderecoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\EnderecoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\EnderecoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * atribuirAssinaturaClienteUsingPOST
     *
     * {{{conta_pessoa_resource_atribuir_assinatura_cliente}}}
     *
     * @param int $id {{{conta_pessoa_resource_atribuir_assinatura_cliente_param_id}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\AtribuirAssinaturaClientePersist $body {{{conta_pessoa_resource_atribuir_assinatura_cliente_param_body}}} (required)
     * @return object
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function atribuirAssinaturaClienteUsingPOST($id, $body)
    {
        list($response, $statusCode, $httpHeader) = $this->atribuirAssinaturaClienteUsingPOSTWithHttpInfo ($id, $body);
        return $response; 
    }


    /**
     * atribuirAssinaturaClienteUsingPOSTWithHttpInfo
     *
     * {{{conta_pessoa_resource_atribuir_assinatura_cliente}}}
     *
     * @param int $id {{{conta_pessoa_resource_atribuir_assinatura_cliente_param_id}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\AtribuirAssinaturaClientePersist $body {{{conta_pessoa_resource_atribuir_assinatura_cliente_param_body}}} (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function atribuirAssinaturaClienteUsingPOSTWithHttpInfo($id, $body)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling atribuirAssinaturaClienteUsingPOST');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling atribuirAssinaturaClienteUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/atribuir-assinatura-cliente";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'object'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 201:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * atualizarEnderecoDeCorrespondenciaUsingPUT
     *
     * {{{endereco_resource_atualizar_correspondencia}}}
     *
     * @param int $id {{{endereco_resource_atualizar_correspondencia_param_id}}} (required)
     * @param int $id_conta {{{endereco_resource_atualizar_correspondencia_param_idConta}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\EnderecoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function atualizarEnderecoDeCorrespondenciaUsingPUT($id, $id_conta)
    {
        list($response, $statusCode, $httpHeader) = $this->atualizarEnderecoDeCorrespondenciaUsingPUTWithHttpInfo ($id, $id_conta);
        return $response; 
    }


    /**
     * atualizarEnderecoDeCorrespondenciaUsingPUTWithHttpInfo
     *
     * {{{endereco_resource_atualizar_correspondencia}}}
     *
     * @param int $id {{{endereco_resource_atualizar_correspondencia_param_id}}} (required)
     * @param int $id_conta {{{endereco_resource_atualizar_correspondencia_param_idConta}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\EnderecoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function atualizarEnderecoDeCorrespondenciaUsingPUTWithHttpInfo($id, $id_conta)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling atualizarEnderecoDeCorrespondenciaUsingPUT');
        }
        // verify the required parameter 'id_conta' is set
        if ($id_conta === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_conta when calling atualizarEnderecoDeCorrespondenciaUsingPUT');
        }
  
        // parse inputs
        $resourcePath = "/api/enderecos/{id}/alterar-endereco-correspondencia";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($id_conta !== null) {
            $queryParams['idConta'] = $this->apiClient->getSerializer()->toQueryValue($id_conta);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\EnderecoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\EnderecoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\EnderecoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * atualizarUsingPOST
     *
     * {{{integracao_emissor_resource_atualizar}}}
     *
     * @param int $id {{{integracao_emissor_resource_atualizar_param_id_conta}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\IntegracaoEmissorPersist $body {{{integracao_emissor_resource_atualizar_param_body}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\IntegracaoEmissorResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function atualizarUsingPOST($id, $body = null)
    {
        list($response, $statusCode, $httpHeader) = $this->atualizarUsingPOSTWithHttpInfo ($id, $body);
        return $response; 
    }


    /**
     * atualizarUsingPOSTWithHttpInfo
     *
     * {{{integracao_emissor_resource_atualizar}}}
     *
     * @param int $id {{{integracao_emissor_resource_atualizar_param_id_conta}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\IntegracaoEmissorPersist $body {{{integracao_emissor_resource_atualizar_param_body}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\IntegracaoEmissorResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function atualizarUsingPOSTWithHttpInfo($id, $body = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling atualizarUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/atualizar-registro-integracao";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\IntegracaoEmissorResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\IntegracaoEmissorResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\IntegracaoEmissorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 201:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\IntegracaoEmissorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * cadastrarUsingPOST
     *
     * {{{adicional_resource_cadastrar}}}
     *
     * @param int $id {{{adicional_resource_cadastrar_param_id_conta}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\AdicionalPersist $persist persist (required)
     * @return \br.com.conductor.pier.api.v2.model\AdicionalDetalheResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function cadastrarUsingPOST($id, $persist)
    {
        list($response, $statusCode, $httpHeader) = $this->cadastrarUsingPOSTWithHttpInfo ($id, $persist);
        return $response; 
    }


    /**
     * cadastrarUsingPOSTWithHttpInfo
     *
     * {{{adicional_resource_cadastrar}}}
     *
     * @param int $id {{{adicional_resource_cadastrar_param_id_conta}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\AdicionalPersist $persist persist (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\AdicionalDetalheResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function cadastrarUsingPOSTWithHttpInfo($id, $persist)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling cadastrarUsingPOST');
        }
        // verify the required parameter 'persist' is set
        if ($persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $persist when calling cadastrarUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/cadastrar-adicional";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($persist)) {
            $_tempBody = $persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\AdicionalDetalheResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\AdicionalDetalheResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\AdicionalDetalheResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarUsingGET1
     *
     * {{{adicional_resource_consultar}}}
     *
     * @param int $id {{{adicional_resource_consultar_param_id_conta}}} (required)
     * @param int $id_pessoa {{{adicional_resource_consultar_param_id_pessoa}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\AdicionalDetalheResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET1($id, $id_pessoa)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarUsingGET1WithHttpInfo ($id, $id_pessoa);
        return $response; 
    }


    /**
     * consultarUsingGET1WithHttpInfo
     *
     * {{{adicional_resource_consultar}}}
     *
     * @param int $id {{{adicional_resource_consultar_param_id_conta}}} (required)
     * @param int $id_pessoa {{{adicional_resource_consultar_param_id_pessoa}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\AdicionalDetalheResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET1WithHttpInfo($id, $id_pessoa)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarUsingGET1');
        }
        // verify the required parameter 'id_pessoa' is set
        if ($id_pessoa === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_pessoa when calling consultarUsingGET1');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/adicionais/{idPessoa}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }// path params
        
        if ($id_pessoa !== null) {
            $resourcePath = str_replace(
                "{" . "idPessoa" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_pessoa),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\AdicionalDetalheResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\AdicionalDetalheResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\AdicionalDetalheResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarUsingGET18
     *
     * {{{endereco_resource_consultar}}}
     *
     * @param int $id {{{endereco_resource_consultar_param_id}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\EnderecoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET18($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarUsingGET18WithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarUsingGET18WithHttpInfo
     *
     * {{{endereco_resource_consultar}}}
     *
     * @param int $id {{{endereco_resource_consultar_param_id}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\EnderecoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET18WithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarUsingGET18');
        }
  
        // parse inputs
        $resourcePath = "/api/enderecos/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\EnderecoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\EnderecoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\EnderecoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarUsingGET29
     *
     * {{{pessoa_detalhe_resource_consultar}}}
     *
     * @param int $id {{{pessoa_detalhe_resource_consultar_param_id}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\PessoaDetalheResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET29($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarUsingGET29WithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarUsingGET29WithHttpInfo
     *
     * {{{pessoa_detalhe_resource_consultar}}}
     *
     * @param int $id {{{pessoa_detalhe_resource_consultar_param_id}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\PessoaDetalheResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET29WithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarUsingGET29');
        }
  
        // parse inputs
        $resourcePath = "/api/pessoas-detalhes/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PessoaDetalheResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PessoaDetalheResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PessoaDetalheResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarUsingGET30
     *
     * {{{pessoa_resource_consultar}}}
     *
     * @param int $id {{{pessoa_resource_consultar_param_id}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\PessoaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET30($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarUsingGET30WithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarUsingGET30WithHttpInfo
     *
     * {{{pessoa_resource_consultar}}}
     *
     * @param int $id {{{pessoa_resource_consultar_param_id}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\PessoaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET30WithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarUsingGET30');
        }
  
        // parse inputs
        $resourcePath = "/api/pessoas/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PessoaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PessoaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PessoaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarUsingGET38
     *
     * {{{telefone_resource_consultar}}}
     *
     * @param int $id {{{telefone_resource_consultar_param_id}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\TelefoneResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET38($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarUsingGET38WithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarUsingGET38WithHttpInfo
     *
     * {{{telefone_resource_consultar}}}
     *
     * @param int $id {{{telefone_resource_consultar_param_id}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\TelefoneResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET38WithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarUsingGET38');
        }
  
        // parse inputs
        $resourcePath = "/api/telefones/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\TelefoneResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\TelefoneResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\TelefoneResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * inativarUsingPOST
     *
     * {{{adicional_resource_inativar}}}
     *
     * @param int $id {{{adicional_resource_inativar_param_id_conta}}} (required)
     * @param int $id_pessoa {{{adicional_resource_inativar_param_id_pessoa}}} (required)
     * @return string
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function inativarUsingPOST($id, $id_pessoa)
    {
        list($response, $statusCode, $httpHeader) = $this->inativarUsingPOSTWithHttpInfo ($id, $id_pessoa);
        return $response; 
    }


    /**
     * inativarUsingPOSTWithHttpInfo
     *
     * {{{adicional_resource_inativar}}}
     *
     * @param int $id {{{adicional_resource_inativar_param_id_conta}}} (required)
     * @param int $id_pessoa {{{adicional_resource_inativar_param_id_pessoa}}} (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function inativarUsingPOSTWithHttpInfo($id, $id_pessoa)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling inativarUsingPOST');
        }
        // verify the required parameter 'id_pessoa' is set
        if ($id_pessoa === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_pessoa when calling inativarUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/adicionais/{idPessoa}/inativar";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }// path params
        
        if ($id_pessoa !== null) {
            $resourcePath = str_replace(
                "{" . "idPessoa" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_pessoa),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'string'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarSociosUsingGET
     *
     * {{{conta_pessoa_resource_listar_socios}}}
     *
     * @param int $id {{{conta_pessoa_resource_listar_socios_param_id}}} (required)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PagePessoaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarSociosUsingGET($id, $sort = null, $page = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarSociosUsingGETWithHttpInfo ($id, $sort, $page, $limit);
        return $response; 
    }


    /**
     * listarSociosUsingGETWithHttpInfo
     *
     * {{{conta_pessoa_resource_listar_socios}}}
     *
     * @param int $id {{{conta_pessoa_resource_listar_socios_param_id}}} (required)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PagePessoaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarSociosUsingGETWithHttpInfo($id, $sort = null, $page = null, $limit = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling listarSociosUsingGET');
        }
  
        // parse inputs
        $resourcePath = "/api/clientes-pessoas-juridicas/{id}/socios";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PagePessoaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PagePessoaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PagePessoaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET1
     *
     * {{{adicional_resource_listar}}}
     *
     * @param int $id {{{adicional_resource_listar_param_id_conta}}} (required)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\AdicionalResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET1($id, $sort = null, $page = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGET1WithHttpInfo ($id, $sort, $page, $limit);
        return $response; 
    }


    /**
     * listarUsingGET1WithHttpInfo
     *
     * {{{adicional_resource_listar}}}
     *
     * @param int $id {{{adicional_resource_listar_param_id_conta}}} (required)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\AdicionalResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET1WithHttpInfo($id, $sort = null, $page = null, $limit = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling listarUsingGET1');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/adicionais";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\AdicionalResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\AdicionalResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\AdicionalResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET24
     *
     * {{{endereco_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id {{{endereco_request_id_value}}} (optional)
     * @param int $id_pessoa {{{endereco_request_id_pessoa_value}}} (optional)
     * @param int $id_tipo_endereco {{{endereco_request_id_tipo_endereco_value}}} (optional)
     * @param string $cep {{{endereco_request_cep_value}}} (optional)
     * @param string $logradouro {{{endereco_request_logradouro_value}}} (optional)
     * @param int $numero {{{endereco_request_numero_value}}} (optional)
     * @param string $complemento {{{endereco_request_complemento_value}}} (optional)
     * @param string $ponto_referencia {{{endereco_request_ponto_referencia_value}}} (optional)
     * @param string $bairro {{{endereco_request_bairro_value}}} (optional)
     * @param string $cidade {{{endereco_request_cidade_value}}} (optional)
     * @param string $uf {{{endereco_request_uf_value}}} (optional)
     * @param string $pais {{{endereco_request_pais_value}}} (optional)
     * @param string $data_inclusao {{{endereco_request_data_inclusao_value}}} (optional)
     * @param string $data_ultima_atualizacao {{{endereco_request_data_ultima_atualizacao_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageEnderecoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET24($sort = null, $page = null, $limit = null, $id = null, $id_pessoa = null, $id_tipo_endereco = null, $cep = null, $logradouro = null, $numero = null, $complemento = null, $ponto_referencia = null, $bairro = null, $cidade = null, $uf = null, $pais = null, $data_inclusao = null, $data_ultima_atualizacao = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGET24WithHttpInfo ($sort, $page, $limit, $id, $id_pessoa, $id_tipo_endereco, $cep, $logradouro, $numero, $complemento, $ponto_referencia, $bairro, $cidade, $uf, $pais, $data_inclusao, $data_ultima_atualizacao);
        return $response; 
    }


    /**
     * listarUsingGET24WithHttpInfo
     *
     * {{{endereco_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id {{{endereco_request_id_value}}} (optional)
     * @param int $id_pessoa {{{endereco_request_id_pessoa_value}}} (optional)
     * @param int $id_tipo_endereco {{{endereco_request_id_tipo_endereco_value}}} (optional)
     * @param string $cep {{{endereco_request_cep_value}}} (optional)
     * @param string $logradouro {{{endereco_request_logradouro_value}}} (optional)
     * @param int $numero {{{endereco_request_numero_value}}} (optional)
     * @param string $complemento {{{endereco_request_complemento_value}}} (optional)
     * @param string $ponto_referencia {{{endereco_request_ponto_referencia_value}}} (optional)
     * @param string $bairro {{{endereco_request_bairro_value}}} (optional)
     * @param string $cidade {{{endereco_request_cidade_value}}} (optional)
     * @param string $uf {{{endereco_request_uf_value}}} (optional)
     * @param string $pais {{{endereco_request_pais_value}}} (optional)
     * @param string $data_inclusao {{{endereco_request_data_inclusao_value}}} (optional)
     * @param string $data_ultima_atualizacao {{{endereco_request_data_ultima_atualizacao_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageEnderecoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET24WithHttpInfo($sort = null, $page = null, $limit = null, $id = null, $id_pessoa = null, $id_tipo_endereco = null, $cep = null, $logradouro = null, $numero = null, $complemento = null, $ponto_referencia = null, $bairro = null, $cidade = null, $uf = null, $pais = null, $data_inclusao = null, $data_ultima_atualizacao = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/enderecos";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }// query params
        
        if ($id_pessoa !== null) {
            $queryParams['idPessoa'] = $this->apiClient->getSerializer()->toQueryValue($id_pessoa);
        }// query params
        
        if ($id_tipo_endereco !== null) {
            $queryParams['idTipoEndereco'] = $this->apiClient->getSerializer()->toQueryValue($id_tipo_endereco);
        }// query params
        
        if ($cep !== null) {
            $queryParams['cep'] = $this->apiClient->getSerializer()->toQueryValue($cep);
        }// query params
        
        if ($logradouro !== null) {
            $queryParams['logradouro'] = $this->apiClient->getSerializer()->toQueryValue($logradouro);
        }// query params
        
        if ($numero !== null) {
            $queryParams['numero'] = $this->apiClient->getSerializer()->toQueryValue($numero);
        }// query params
        
        if ($complemento !== null) {
            $queryParams['complemento'] = $this->apiClient->getSerializer()->toQueryValue($complemento);
        }// query params
        
        if ($ponto_referencia !== null) {
            $queryParams['pontoReferencia'] = $this->apiClient->getSerializer()->toQueryValue($ponto_referencia);
        }// query params
        
        if ($bairro !== null) {
            $queryParams['bairro'] = $this->apiClient->getSerializer()->toQueryValue($bairro);
        }// query params
        
        if ($cidade !== null) {
            $queryParams['cidade'] = $this->apiClient->getSerializer()->toQueryValue($cidade);
        }// query params
        
        if ($uf !== null) {
            $queryParams['uf'] = $this->apiClient->getSerializer()->toQueryValue($uf);
        }// query params
        
        if ($pais !== null) {
            $queryParams['pais'] = $this->apiClient->getSerializer()->toQueryValue($pais);
        }// query params
        
        if ($data_inclusao !== null) {
            $queryParams['dataInclusao'] = $this->apiClient->getSerializer()->toQueryValue($data_inclusao);
        }// query params
        
        if ($data_ultima_atualizacao !== null) {
            $queryParams['dataUltimaAtualizacao'] = $this->apiClient->getSerializer()->toQueryValue($data_ultima_atualizacao);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageEnderecoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageEnderecoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageEnderecoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET38
     *
     * {{{pessoa_detalhe_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_pessoa {{{pessoa_detalhe_request_id_pessoa_value}}} (optional)
     * @param string $nome_mae {{{pessoa_detalhe_request_nome_mae_value}}} (optional)
     * @param int $id_estado_civil {{{pessoa_detalhe_request_id_estado_civil_value}}} (optional)
     * @param string $id_profissao {{{pessoa_detalhe_request_id_profissao_value}}} (optional)
     * @param int $id_natureza_ocupacao {{{pessoa_detalhe_request_id_natureza_ocupacao_value}}} (optional)
     * @param int $id_nacionalidade {{{pessoa_detalhe_request_id_nacionalidade_value}}} (optional)
     * @param int $numero_banco {{{pessoa_detalhe_request_numero_banco_value}}} (optional)
     * @param int $numero_agencia {{{pessoa_detalhe_request_numero_agencia_value}}} (optional)
     * @param string $numero_conta_corrente {{{pessoa_detalhe_request_numero_conta_corrente_value}}} (optional)
     * @param string $email {{{pessoa_detalhe_request_email_value}}} (optional)
     * @param string $nome_empresa {{{pessoa_detalhe_request_nome_empresa_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PagePessoaDetalheResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET38($sort = null, $page = null, $limit = null, $id_pessoa = null, $nome_mae = null, $id_estado_civil = null, $id_profissao = null, $id_natureza_ocupacao = null, $id_nacionalidade = null, $numero_banco = null, $numero_agencia = null, $numero_conta_corrente = null, $email = null, $nome_empresa = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGET38WithHttpInfo ($sort, $page, $limit, $id_pessoa, $nome_mae, $id_estado_civil, $id_profissao, $id_natureza_ocupacao, $id_nacionalidade, $numero_banco, $numero_agencia, $numero_conta_corrente, $email, $nome_empresa);
        return $response; 
    }


    /**
     * listarUsingGET38WithHttpInfo
     *
     * {{{pessoa_detalhe_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_pessoa {{{pessoa_detalhe_request_id_pessoa_value}}} (optional)
     * @param string $nome_mae {{{pessoa_detalhe_request_nome_mae_value}}} (optional)
     * @param int $id_estado_civil {{{pessoa_detalhe_request_id_estado_civil_value}}} (optional)
     * @param string $id_profissao {{{pessoa_detalhe_request_id_profissao_value}}} (optional)
     * @param int $id_natureza_ocupacao {{{pessoa_detalhe_request_id_natureza_ocupacao_value}}} (optional)
     * @param int $id_nacionalidade {{{pessoa_detalhe_request_id_nacionalidade_value}}} (optional)
     * @param int $numero_banco {{{pessoa_detalhe_request_numero_banco_value}}} (optional)
     * @param int $numero_agencia {{{pessoa_detalhe_request_numero_agencia_value}}} (optional)
     * @param string $numero_conta_corrente {{{pessoa_detalhe_request_numero_conta_corrente_value}}} (optional)
     * @param string $email {{{pessoa_detalhe_request_email_value}}} (optional)
     * @param string $nome_empresa {{{pessoa_detalhe_request_nome_empresa_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PagePessoaDetalheResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET38WithHttpInfo($sort = null, $page = null, $limit = null, $id_pessoa = null, $nome_mae = null, $id_estado_civil = null, $id_profissao = null, $id_natureza_ocupacao = null, $id_nacionalidade = null, $numero_banco = null, $numero_agencia = null, $numero_conta_corrente = null, $email = null, $nome_empresa = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/pessoas-detalhes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id_pessoa !== null) {
            $queryParams['idPessoa'] = $this->apiClient->getSerializer()->toQueryValue($id_pessoa);
        }// query params
        
        if ($nome_mae !== null) {
            $queryParams['nomeMae'] = $this->apiClient->getSerializer()->toQueryValue($nome_mae);
        }// query params
        
        if ($id_estado_civil !== null) {
            $queryParams['idEstadoCivil'] = $this->apiClient->getSerializer()->toQueryValue($id_estado_civil);
        }// query params
        
        if ($id_profissao !== null) {
            $queryParams['idProfissao'] = $this->apiClient->getSerializer()->toQueryValue($id_profissao);
        }// query params
        
        if ($id_natureza_ocupacao !== null) {
            $queryParams['idNaturezaOcupacao'] = $this->apiClient->getSerializer()->toQueryValue($id_natureza_ocupacao);
        }// query params
        
        if ($id_nacionalidade !== null) {
            $queryParams['idNacionalidade'] = $this->apiClient->getSerializer()->toQueryValue($id_nacionalidade);
        }// query params
        
        if ($numero_banco !== null) {
            $queryParams['numeroBanco'] = $this->apiClient->getSerializer()->toQueryValue($numero_banco);
        }// query params
        
        if ($numero_agencia !== null) {
            $queryParams['numeroAgencia'] = $this->apiClient->getSerializer()->toQueryValue($numero_agencia);
        }// query params
        
        if ($numero_conta_corrente !== null) {
            $queryParams['numeroContaCorrente'] = $this->apiClient->getSerializer()->toQueryValue($numero_conta_corrente);
        }// query params
        
        if ($email !== null) {
            $queryParams['email'] = $this->apiClient->getSerializer()->toQueryValue($email);
        }// query params
        
        if ($nome_empresa !== null) {
            $queryParams['nomeEmpresa'] = $this->apiClient->getSerializer()->toQueryValue($nome_empresa);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PagePessoaDetalheResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PagePessoaDetalheResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PagePessoaDetalheResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET39
     *
     * {{{pessoa_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id {{{pessoa_request_id_value}}} (optional)
     * @param string $nome {{{pessoa_request_nome_value}}} (optional)
     * @param string $tipo {{{pessoa_request_tipo_value}}} (optional)
     * @param string $cpf {{{pessoa_request_cpf_value}}} (optional)
     * @param string $cnpj {{{pessoa_request_cnpj_value}}} (optional)
     * @param string $data_nascimento {{{pessoa_request_data_nascimento_value}}} (optional)
     * @param string $sexo {{{pessoa_request_sexo_value}}} (optional)
     * @param string $numero_identidade {{{pessoa_request_numero_identidade_value}}} (optional)
     * @param string $orgao_expedidor_identidade {{{pessoa_request_orgao_expedidor_identidade_value}}} (optional)
     * @param string $unidade_federativa_identidade {{{pessoa_request_unidade_federativa_identidade_value}}} (optional)
     * @param string $data_emissao_identidade {{{pessoa_request_data_emissao_identidade_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PagePessoaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET39($sort = null, $page = null, $limit = null, $id = null, $nome = null, $tipo = null, $cpf = null, $cnpj = null, $data_nascimento = null, $sexo = null, $numero_identidade = null, $orgao_expedidor_identidade = null, $unidade_federativa_identidade = null, $data_emissao_identidade = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGET39WithHttpInfo ($sort, $page, $limit, $id, $nome, $tipo, $cpf, $cnpj, $data_nascimento, $sexo, $numero_identidade, $orgao_expedidor_identidade, $unidade_federativa_identidade, $data_emissao_identidade);
        return $response; 
    }


    /**
     * listarUsingGET39WithHttpInfo
     *
     * {{{pessoa_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id {{{pessoa_request_id_value}}} (optional)
     * @param string $nome {{{pessoa_request_nome_value}}} (optional)
     * @param string $tipo {{{pessoa_request_tipo_value}}} (optional)
     * @param string $cpf {{{pessoa_request_cpf_value}}} (optional)
     * @param string $cnpj {{{pessoa_request_cnpj_value}}} (optional)
     * @param string $data_nascimento {{{pessoa_request_data_nascimento_value}}} (optional)
     * @param string $sexo {{{pessoa_request_sexo_value}}} (optional)
     * @param string $numero_identidade {{{pessoa_request_numero_identidade_value}}} (optional)
     * @param string $orgao_expedidor_identidade {{{pessoa_request_orgao_expedidor_identidade_value}}} (optional)
     * @param string $unidade_federativa_identidade {{{pessoa_request_unidade_federativa_identidade_value}}} (optional)
     * @param string $data_emissao_identidade {{{pessoa_request_data_emissao_identidade_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PagePessoaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET39WithHttpInfo($sort = null, $page = null, $limit = null, $id = null, $nome = null, $tipo = null, $cpf = null, $cnpj = null, $data_nascimento = null, $sexo = null, $numero_identidade = null, $orgao_expedidor_identidade = null, $unidade_federativa_identidade = null, $data_emissao_identidade = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/pessoas";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }// query params
        
        if ($nome !== null) {
            $queryParams['nome'] = $this->apiClient->getSerializer()->toQueryValue($nome);
        }// query params
        
        if ($tipo !== null) {
            $queryParams['tipo'] = $this->apiClient->getSerializer()->toQueryValue($tipo);
        }// query params
        
        if ($cpf !== null) {
            $queryParams['cpf'] = $this->apiClient->getSerializer()->toQueryValue($cpf);
        }// query params
        
        if ($cnpj !== null) {
            $queryParams['cnpj'] = $this->apiClient->getSerializer()->toQueryValue($cnpj);
        }// query params
        
        if ($data_nascimento !== null) {
            $queryParams['dataNascimento'] = $this->apiClient->getSerializer()->toQueryValue($data_nascimento);
        }// query params
        
        if ($sexo !== null) {
            $queryParams['sexo'] = $this->apiClient->getSerializer()->toQueryValue($sexo);
        }// query params
        
        if ($numero_identidade !== null) {
            $queryParams['numeroIdentidade'] = $this->apiClient->getSerializer()->toQueryValue($numero_identidade);
        }// query params
        
        if ($orgao_expedidor_identidade !== null) {
            $queryParams['orgaoExpedidorIdentidade'] = $this->apiClient->getSerializer()->toQueryValue($orgao_expedidor_identidade);
        }// query params
        
        if ($unidade_federativa_identidade !== null) {
            $queryParams['unidadeFederativaIdentidade'] = $this->apiClient->getSerializer()->toQueryValue($unidade_federativa_identidade);
        }// query params
        
        if ($data_emissao_identidade !== null) {
            $queryParams['dataEmissaoIdentidade'] = $this->apiClient->getSerializer()->toQueryValue($data_emissao_identidade);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PagePessoaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PagePessoaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PagePessoaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET50
     *
     * {{{telefone_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id {{{telefone_request_id_value}}} (optional)
     * @param int $id_tipo_telefone {{{telefone_request_id_tipo_telefone_value}}} (optional)
     * @param int $id_pessoa {{{telefone_request_id_pessoa_value}}} (optional)
     * @param string $ddd {{{telefone_request_ddd_value}}} (optional)
     * @param string $telefone {{{telefone_request_telefone_value}}} (optional)
     * @param string $ramal {{{telefone_request_ramal_value}}} (optional)
     * @param int $status {{{telefone_request_status_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageTelefoneResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET50($sort = null, $page = null, $limit = null, $id = null, $id_tipo_telefone = null, $id_pessoa = null, $ddd = null, $telefone = null, $ramal = null, $status = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGET50WithHttpInfo ($sort, $page, $limit, $id, $id_tipo_telefone, $id_pessoa, $ddd, $telefone, $ramal, $status);
        return $response; 
    }


    /**
     * listarUsingGET50WithHttpInfo
     *
     * {{{telefone_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id {{{telefone_request_id_value}}} (optional)
     * @param int $id_tipo_telefone {{{telefone_request_id_tipo_telefone_value}}} (optional)
     * @param int $id_pessoa {{{telefone_request_id_pessoa_value}}} (optional)
     * @param string $ddd {{{telefone_request_ddd_value}}} (optional)
     * @param string $telefone {{{telefone_request_telefone_value}}} (optional)
     * @param string $ramal {{{telefone_request_ramal_value}}} (optional)
     * @param int $status {{{telefone_request_status_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageTelefoneResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET50WithHttpInfo($sort = null, $page = null, $limit = null, $id = null, $id_tipo_telefone = null, $id_pessoa = null, $ddd = null, $telefone = null, $ramal = null, $status = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/telefones";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }// query params
        
        if ($id_tipo_telefone !== null) {
            $queryParams['idTipoTelefone'] = $this->apiClient->getSerializer()->toQueryValue($id_tipo_telefone);
        }// query params
        
        if ($id_pessoa !== null) {
            $queryParams['idPessoa'] = $this->apiClient->getSerializer()->toQueryValue($id_pessoa);
        }// query params
        
        if ($ddd !== null) {
            $queryParams['ddd'] = $this->apiClient->getSerializer()->toQueryValue($ddd);
        }// query params
        
        if ($telefone !== null) {
            $queryParams['telefone'] = $this->apiClient->getSerializer()->toQueryValue($telefone);
        }// query params
        
        if ($ramal !== null) {
            $queryParams['ramal'] = $this->apiClient->getSerializer()->toQueryValue($ramal);
        }// query params
        
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageTelefoneResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageTelefoneResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageTelefoneResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * salvarPessoaFisicaAprovadaUsingPOST
     *
     * {{{conta_pessoa_resource_salvar_pessoa_fisica_aprovada}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\PessoaFisicaAprovadaPersistValue_ $pessoa_persist pessoaPersist (required)
     * @return \br.com.conductor.pier.api.v2.model\PessoaFisicaAprovadaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarPessoaFisicaAprovadaUsingPOST($pessoa_persist)
    {
        list($response, $statusCode, $httpHeader) = $this->salvarPessoaFisicaAprovadaUsingPOSTWithHttpInfo ($pessoa_persist);
        return $response; 
    }


    /**
     * salvarPessoaFisicaAprovadaUsingPOSTWithHttpInfo
     *
     * {{{conta_pessoa_resource_salvar_pessoa_fisica_aprovada}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\PessoaFisicaAprovadaPersistValue_ $pessoa_persist pessoaPersist (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\PessoaFisicaAprovadaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarPessoaFisicaAprovadaUsingPOSTWithHttpInfo($pessoa_persist)
    {
        
        // verify the required parameter 'pessoa_persist' is set
        if ($pessoa_persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pessoa_persist when calling salvarPessoaFisicaAprovadaUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/clientes-pessoas-fisicas";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($pessoa_persist)) {
            $_tempBody = $pessoa_persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PessoaFisicaAprovadaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PessoaFisicaAprovadaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PessoaFisicaAprovadaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * salvarPessoaJuridicaAprovadaUsingPOST
     *
     * {{{conta_pessoa_resource_salvar_pessoa_juridica_aprovada}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\PessoaJuridicaAprovadaPersist $pessoa_persist pessoaPersist (required)
     * @return \br.com.conductor.pier.api.v2.model\PessoaJuridicaAprovadaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarPessoaJuridicaAprovadaUsingPOST($pessoa_persist)
    {
        list($response, $statusCode, $httpHeader) = $this->salvarPessoaJuridicaAprovadaUsingPOSTWithHttpInfo ($pessoa_persist);
        return $response; 
    }


    /**
     * salvarPessoaJuridicaAprovadaUsingPOSTWithHttpInfo
     *
     * {{{conta_pessoa_resource_salvar_pessoa_juridica_aprovada}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\PessoaJuridicaAprovadaPersist $pessoa_persist pessoaPersist (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\PessoaJuridicaAprovadaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarPessoaJuridicaAprovadaUsingPOSTWithHttpInfo($pessoa_persist)
    {
        
        // verify the required parameter 'pessoa_persist' is set
        if ($pessoa_persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pessoa_persist when calling salvarPessoaJuridicaAprovadaUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/clientes-pessoas-juridicas";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($pessoa_persist)) {
            $_tempBody = $pessoa_persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PessoaJuridicaAprovadaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PessoaJuridicaAprovadaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PessoaJuridicaAprovadaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * salvarUsingPOST13
     *
     * {{{endereco_resource_salvar}}}
     *
     * @param int $id_pessoa {{{endereco_persist_id_pessoa_value}}} (optional)
     * @param int $id_tipo_endereco {{{endereco_persist_id_tipo_endereco_value}}} (optional)
     * @param string $cep {{{endereco_persist_cep_value}}} (optional)
     * @param string $logradouro {{{endereco_persist_logradouro_value}}} (optional)
     * @param int $numero {{{endereco_persist_numero_value}}} (optional)
     * @param string $complemento {{{endereco_persist_complemento_value}}} (optional)
     * @param string $ponto_referencia {{{endereco_persist_ponto_referencia_value}}} (optional)
     * @param string $bairro {{{endereco_persist_bairro_value}}} (optional)
     * @param string $cidade {{{endereco_persist_cidade_value}}} (optional)
     * @param string $uf {{{endereco_persist_uf_value}}} (optional)
     * @param string $pais {{{endereco_persist_pais_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\EnderecoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST13($id_pessoa = null, $id_tipo_endereco = null, $cep = null, $logradouro = null, $numero = null, $complemento = null, $ponto_referencia = null, $bairro = null, $cidade = null, $uf = null, $pais = null)
    {
        list($response, $statusCode, $httpHeader) = $this->salvarUsingPOST13WithHttpInfo ($id_pessoa, $id_tipo_endereco, $cep, $logradouro, $numero, $complemento, $ponto_referencia, $bairro, $cidade, $uf, $pais);
        return $response; 
    }


    /**
     * salvarUsingPOST13WithHttpInfo
     *
     * {{{endereco_resource_salvar}}}
     *
     * @param int $id_pessoa {{{endereco_persist_id_pessoa_value}}} (optional)
     * @param int $id_tipo_endereco {{{endereco_persist_id_tipo_endereco_value}}} (optional)
     * @param string $cep {{{endereco_persist_cep_value}}} (optional)
     * @param string $logradouro {{{endereco_persist_logradouro_value}}} (optional)
     * @param int $numero {{{endereco_persist_numero_value}}} (optional)
     * @param string $complemento {{{endereco_persist_complemento_value}}} (optional)
     * @param string $ponto_referencia {{{endereco_persist_ponto_referencia_value}}} (optional)
     * @param string $bairro {{{endereco_persist_bairro_value}}} (optional)
     * @param string $cidade {{{endereco_persist_cidade_value}}} (optional)
     * @param string $uf {{{endereco_persist_uf_value}}} (optional)
     * @param string $pais {{{endereco_persist_pais_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\EnderecoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST13WithHttpInfo($id_pessoa = null, $id_tipo_endereco = null, $cep = null, $logradouro = null, $numero = null, $complemento = null, $ponto_referencia = null, $bairro = null, $cidade = null, $uf = null, $pais = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/enderecos";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($id_pessoa !== null) {
            $queryParams['idPessoa'] = $this->apiClient->getSerializer()->toQueryValue($id_pessoa);
        }// query params
        
        if ($id_tipo_endereco !== null) {
            $queryParams['idTipoEndereco'] = $this->apiClient->getSerializer()->toQueryValue($id_tipo_endereco);
        }// query params
        
        if ($cep !== null) {
            $queryParams['cep'] = $this->apiClient->getSerializer()->toQueryValue($cep);
        }// query params
        
        if ($logradouro !== null) {
            $queryParams['logradouro'] = $this->apiClient->getSerializer()->toQueryValue($logradouro);
        }// query params
        
        if ($numero !== null) {
            $queryParams['numero'] = $this->apiClient->getSerializer()->toQueryValue($numero);
        }// query params
        
        if ($complemento !== null) {
            $queryParams['complemento'] = $this->apiClient->getSerializer()->toQueryValue($complemento);
        }// query params
        
        if ($ponto_referencia !== null) {
            $queryParams['pontoReferencia'] = $this->apiClient->getSerializer()->toQueryValue($ponto_referencia);
        }// query params
        
        if ($bairro !== null) {
            $queryParams['bairro'] = $this->apiClient->getSerializer()->toQueryValue($bairro);
        }// query params
        
        if ($cidade !== null) {
            $queryParams['cidade'] = $this->apiClient->getSerializer()->toQueryValue($cidade);
        }// query params
        
        if ($uf !== null) {
            $queryParams['uf'] = $this->apiClient->getSerializer()->toQueryValue($uf);
        }// query params
        
        if ($pais !== null) {
            $queryParams['pais'] = $this->apiClient->getSerializer()->toQueryValue($pais);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\EnderecoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\EnderecoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\EnderecoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * salvarUsingPOST16
     *
     * {{{integracao_emissor_resource_salvar}}}
     *
     * @param int $id {{{integracao_emissor_resource_salvar_param_id_conta}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\IntegracaoEmissorPersist $body {{{integracao_emissor_resource_salvar_param_body}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\IntegracaoEmissorResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST16($id, $body = null)
    {
        list($response, $statusCode, $httpHeader) = $this->salvarUsingPOST16WithHttpInfo ($id, $body);
        return $response; 
    }


    /**
     * salvarUsingPOST16WithHttpInfo
     *
     * {{{integracao_emissor_resource_salvar}}}
     *
     * @param int $id {{{integracao_emissor_resource_salvar_param_id_conta}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\IntegracaoEmissorPersist $body {{{integracao_emissor_resource_salvar_param_body}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\IntegracaoEmissorResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST16WithHttpInfo($id, $body = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling salvarUsingPOST16');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/incluir-registro-integracao";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\IntegracaoEmissorResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\IntegracaoEmissorResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\IntegracaoEmissorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 201:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\IntegracaoEmissorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * salvarUsingPOST24
     *
     * {{{pessoa_detalhe_resource_salvar}}}
     *
     * @param int $id_pessoa {{{pessoa_detalhe_persist_id_pessoa_value}}} (required)
     * @param string $nome_mae {{{pessoa_detalhe_persist_nome_mae_value}}} (optional)
     * @param int $id_estado_civil {{{pessoa_detalhe_persist_id_estado_civil_value}}} (optional)
     * @param string $id_profissao {{{pessoa_detalhe_persist_id_profissao_value}}} (optional)
     * @param int $id_natureza_ocupacao {{{pessoa_detalhe_persist_id_natureza_ocupacao_value}}} (optional)
     * @param int $id_nacionalidade {{{pessoa_detalhe_persist_id_nacionalidade_value}}} (optional)
     * @param int $numero_banco {{{pessoa_detalhe_persist_numero_banco_value}}} (optional)
     * @param int $numero_agencia {{{pessoa_detalhe_persist_numero_agencia_value}}} (optional)
     * @param string $numero_conta_corrente {{{pessoa_detalhe_persist_numero_conta_corrente_value}}} (optional)
     * @param string $email {{{pessoa_detalhe_persist_email_value}}} (optional)
     * @param string $nome_empresa {{{pessoa_detalhe_persist_nome_empresa_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PessoaDetalheResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST24($id_pessoa, $nome_mae = null, $id_estado_civil = null, $id_profissao = null, $id_natureza_ocupacao = null, $id_nacionalidade = null, $numero_banco = null, $numero_agencia = null, $numero_conta_corrente = null, $email = null, $nome_empresa = null)
    {
        list($response, $statusCode, $httpHeader) = $this->salvarUsingPOST24WithHttpInfo ($id_pessoa, $nome_mae, $id_estado_civil, $id_profissao, $id_natureza_ocupacao, $id_nacionalidade, $numero_banco, $numero_agencia, $numero_conta_corrente, $email, $nome_empresa);
        return $response; 
    }


    /**
     * salvarUsingPOST24WithHttpInfo
     *
     * {{{pessoa_detalhe_resource_salvar}}}
     *
     * @param int $id_pessoa {{{pessoa_detalhe_persist_id_pessoa_value}}} (required)
     * @param string $nome_mae {{{pessoa_detalhe_persist_nome_mae_value}}} (optional)
     * @param int $id_estado_civil {{{pessoa_detalhe_persist_id_estado_civil_value}}} (optional)
     * @param string $id_profissao {{{pessoa_detalhe_persist_id_profissao_value}}} (optional)
     * @param int $id_natureza_ocupacao {{{pessoa_detalhe_persist_id_natureza_ocupacao_value}}} (optional)
     * @param int $id_nacionalidade {{{pessoa_detalhe_persist_id_nacionalidade_value}}} (optional)
     * @param int $numero_banco {{{pessoa_detalhe_persist_numero_banco_value}}} (optional)
     * @param int $numero_agencia {{{pessoa_detalhe_persist_numero_agencia_value}}} (optional)
     * @param string $numero_conta_corrente {{{pessoa_detalhe_persist_numero_conta_corrente_value}}} (optional)
     * @param string $email {{{pessoa_detalhe_persist_email_value}}} (optional)
     * @param string $nome_empresa {{{pessoa_detalhe_persist_nome_empresa_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PessoaDetalheResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST24WithHttpInfo($id_pessoa, $nome_mae = null, $id_estado_civil = null, $id_profissao = null, $id_natureza_ocupacao = null, $id_nacionalidade = null, $numero_banco = null, $numero_agencia = null, $numero_conta_corrente = null, $email = null, $nome_empresa = null)
    {
        
        // verify the required parameter 'id_pessoa' is set
        if ($id_pessoa === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_pessoa when calling salvarUsingPOST24');
        }
  
        // parse inputs
        $resourcePath = "/api/pessoas-detalhes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($id_pessoa !== null) {
            $queryParams['idPessoa'] = $this->apiClient->getSerializer()->toQueryValue($id_pessoa);
        }// query params
        
        if ($nome_mae !== null) {
            $queryParams['nomeMae'] = $this->apiClient->getSerializer()->toQueryValue($nome_mae);
        }// query params
        
        if ($id_estado_civil !== null) {
            $queryParams['idEstadoCivil'] = $this->apiClient->getSerializer()->toQueryValue($id_estado_civil);
        }// query params
        
        if ($id_profissao !== null) {
            $queryParams['idProfissao'] = $this->apiClient->getSerializer()->toQueryValue($id_profissao);
        }// query params
        
        if ($id_natureza_ocupacao !== null) {
            $queryParams['idNaturezaOcupacao'] = $this->apiClient->getSerializer()->toQueryValue($id_natureza_ocupacao);
        }// query params
        
        if ($id_nacionalidade !== null) {
            $queryParams['idNacionalidade'] = $this->apiClient->getSerializer()->toQueryValue($id_nacionalidade);
        }// query params
        
        if ($numero_banco !== null) {
            $queryParams['numeroBanco'] = $this->apiClient->getSerializer()->toQueryValue($numero_banco);
        }// query params
        
        if ($numero_agencia !== null) {
            $queryParams['numeroAgencia'] = $this->apiClient->getSerializer()->toQueryValue($numero_agencia);
        }// query params
        
        if ($numero_conta_corrente !== null) {
            $queryParams['numeroContaCorrente'] = $this->apiClient->getSerializer()->toQueryValue($numero_conta_corrente);
        }// query params
        
        if ($email !== null) {
            $queryParams['email'] = $this->apiClient->getSerializer()->toQueryValue($email);
        }// query params
        
        if ($nome_empresa !== null) {
            $queryParams['nomeEmpresa'] = $this->apiClient->getSerializer()->toQueryValue($nome_empresa);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PessoaDetalheResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PessoaDetalheResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PessoaDetalheResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * salvarUsingPOST25
     *
     * {{{pessoa_resource_salvar}}}
     *
     * @param string $nome {{{pessoa_persist_nome_value}}} (required)
     * @param string $tipo {{{pessoa_persist_tipo_value}}} (required)
     * @param string $data_nascimento {{{pessoa_persist_data_nascimento_value}}} (required)
     * @param string $cpf {{{pessoa_persist_cpf_value}}} (optional)
     * @param string $cnpj {{{pessoa_persist_cnpj_value}}} (optional)
     * @param string $sexo {{{pessoa_persist_sexo_value}}} (optional)
     * @param string $numero_identidade {{{pessoa_persist_numero_identidade_value}}} (optional)
     * @param string $orgao_expedidor_identidade {{{pessoa_persist_orgao_expedidor_identidade_value}}} (optional)
     * @param string $unidade_federativa_identidade {{{pessoa_persist_unidade_federativa_identidade_value}}} (optional)
     * @param string $data_emissao_identidade {{{pessoa_persist_data_emissao_identidade_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PessoaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST25($nome, $tipo, $data_nascimento, $cpf = null, $cnpj = null, $sexo = null, $numero_identidade = null, $orgao_expedidor_identidade = null, $unidade_federativa_identidade = null, $data_emissao_identidade = null)
    {
        list($response, $statusCode, $httpHeader) = $this->salvarUsingPOST25WithHttpInfo ($nome, $tipo, $data_nascimento, $cpf, $cnpj, $sexo, $numero_identidade, $orgao_expedidor_identidade, $unidade_federativa_identidade, $data_emissao_identidade);
        return $response; 
    }


    /**
     * salvarUsingPOST25WithHttpInfo
     *
     * {{{pessoa_resource_salvar}}}
     *
     * @param string $nome {{{pessoa_persist_nome_value}}} (required)
     * @param string $tipo {{{pessoa_persist_tipo_value}}} (required)
     * @param string $data_nascimento {{{pessoa_persist_data_nascimento_value}}} (required)
     * @param string $cpf {{{pessoa_persist_cpf_value}}} (optional)
     * @param string $cnpj {{{pessoa_persist_cnpj_value}}} (optional)
     * @param string $sexo {{{pessoa_persist_sexo_value}}} (optional)
     * @param string $numero_identidade {{{pessoa_persist_numero_identidade_value}}} (optional)
     * @param string $orgao_expedidor_identidade {{{pessoa_persist_orgao_expedidor_identidade_value}}} (optional)
     * @param string $unidade_federativa_identidade {{{pessoa_persist_unidade_federativa_identidade_value}}} (optional)
     * @param string $data_emissao_identidade {{{pessoa_persist_data_emissao_identidade_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PessoaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST25WithHttpInfo($nome, $tipo, $data_nascimento, $cpf = null, $cnpj = null, $sexo = null, $numero_identidade = null, $orgao_expedidor_identidade = null, $unidade_federativa_identidade = null, $data_emissao_identidade = null)
    {
        
        // verify the required parameter 'nome' is set
        if ($nome === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nome when calling salvarUsingPOST25');
        }
        // verify the required parameter 'tipo' is set
        if ($tipo === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tipo when calling salvarUsingPOST25');
        }
        // verify the required parameter 'data_nascimento' is set
        if ($data_nascimento === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data_nascimento when calling salvarUsingPOST25');
        }
  
        // parse inputs
        $resourcePath = "/api/pessoas";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($nome !== null) {
            $queryParams['nome'] = $this->apiClient->getSerializer()->toQueryValue($nome);
        }// query params
        
        if ($tipo !== null) {
            $queryParams['tipo'] = $this->apiClient->getSerializer()->toQueryValue($tipo);
        }// query params
        
        if ($cpf !== null) {
            $queryParams['cpf'] = $this->apiClient->getSerializer()->toQueryValue($cpf);
        }// query params
        
        if ($cnpj !== null) {
            $queryParams['cnpj'] = $this->apiClient->getSerializer()->toQueryValue($cnpj);
        }// query params
        
        if ($data_nascimento !== null) {
            $queryParams['dataNascimento'] = $this->apiClient->getSerializer()->toQueryValue($data_nascimento);
        }// query params
        
        if ($sexo !== null) {
            $queryParams['sexo'] = $this->apiClient->getSerializer()->toQueryValue($sexo);
        }// query params
        
        if ($numero_identidade !== null) {
            $queryParams['numeroIdentidade'] = $this->apiClient->getSerializer()->toQueryValue($numero_identidade);
        }// query params
        
        if ($orgao_expedidor_identidade !== null) {
            $queryParams['orgaoExpedidorIdentidade'] = $this->apiClient->getSerializer()->toQueryValue($orgao_expedidor_identidade);
        }// query params
        
        if ($unidade_federativa_identidade !== null) {
            $queryParams['unidadeFederativaIdentidade'] = $this->apiClient->getSerializer()->toQueryValue($unidade_federativa_identidade);
        }// query params
        
        if ($data_emissao_identidade !== null) {
            $queryParams['dataEmissaoIdentidade'] = $this->apiClient->getSerializer()->toQueryValue($data_emissao_identidade);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PessoaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PessoaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PessoaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * salvarUsingPOST28
     *
     * {{{telefone_resource_salvar}}}
     *
     * @param int $id_tipo_telefone {{{telefone_persist_id_tipo_telefone_value}}} (optional)
     * @param int $id_pessoa {{{telefone_persist_id_pessoa_value}}} (optional)
     * @param string $ddd {{{telefone_persist_ddd_value}}} (optional)
     * @param string $telefone {{{telefone_persist_telefone_value}}} (optional)
     * @param string $ramal {{{telefone_persist_ramal_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\TelefoneResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST28($id_tipo_telefone = null, $id_pessoa = null, $ddd = null, $telefone = null, $ramal = null)
    {
        list($response, $statusCode, $httpHeader) = $this->salvarUsingPOST28WithHttpInfo ($id_tipo_telefone, $id_pessoa, $ddd, $telefone, $ramal);
        return $response; 
    }


    /**
     * salvarUsingPOST28WithHttpInfo
     *
     * {{{telefone_resource_salvar}}}
     *
     * @param int $id_tipo_telefone {{{telefone_persist_id_tipo_telefone_value}}} (optional)
     * @param int $id_pessoa {{{telefone_persist_id_pessoa_value}}} (optional)
     * @param string $ddd {{{telefone_persist_ddd_value}}} (optional)
     * @param string $telefone {{{telefone_persist_telefone_value}}} (optional)
     * @param string $ramal {{{telefone_persist_ramal_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\TelefoneResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST28WithHttpInfo($id_tipo_telefone = null, $id_pessoa = null, $ddd = null, $telefone = null, $ramal = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/telefones";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($id_tipo_telefone !== null) {
            $queryParams['idTipoTelefone'] = $this->apiClient->getSerializer()->toQueryValue($id_tipo_telefone);
        }// query params
        
        if ($id_pessoa !== null) {
            $queryParams['idPessoa'] = $this->apiClient->getSerializer()->toQueryValue($id_pessoa);
        }// query params
        
        if ($ddd !== null) {
            $queryParams['ddd'] = $this->apiClient->getSerializer()->toQueryValue($ddd);
        }// query params
        
        if ($telefone !== null) {
            $queryParams['telefone'] = $this->apiClient->getSerializer()->toQueryValue($telefone);
        }// query params
        
        if ($ramal !== null) {
            $queryParams['ramal'] = $this->apiClient->getSerializer()->toQueryValue($ramal);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\TelefoneResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\TelefoneResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\TelefoneResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
