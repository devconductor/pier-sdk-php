<?php
/**
 * PaisResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2.model;

use \ArrayAccess;
/**
 * PaisResponse Class Doc Comment
 *
 * @category    Class
 * @description {{{pais_response_description}}}
 * @package     br.com.conductor.pier.api.v2.invoker
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PaisResponse implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'codigo' => 'string',
        'sigla' => 'string',
        'descricao' => 'string',
        'continente' => 'string',
        'flag_ativo' => 'bool'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'codigo' => 'codigo',
        'sigla' => 'sigla',
        'descricao' => 'descricao',
        'continente' => 'continente',
        'flag_ativo' => 'flagAtivo'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'codigo' => 'setCodigo',
        'sigla' => 'setSigla',
        'descricao' => 'setDescricao',
        'continente' => 'setContinente',
        'flag_ativo' => 'setFlagAtivo'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'codigo' => 'getCodigo',
        'sigla' => 'getSigla',
        'descricao' => 'getDescricao',
        'continente' => 'getContinente',
        'flag_ativo' => 'getFlagAtivo'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id {{{pais_response_id_value}}}
      * @var int
      */
    protected $id;
    
    /**
      * $codigo {{{pais_response_codigo_value}}}
      * @var string
      */
    protected $codigo;
    
    /**
      * $sigla {{{pais_response_sigla_value}}}
      * @var string
      */
    protected $sigla;
    
    /**
      * $descricao {{{pais_response_descricao_value}}}
      * @var string
      */
    protected $descricao;
    
    /**
      * $continente {{{pais_response_continente_value}}}
      * @var string
      */
    protected $continente;
    
    /**
      * $flag_ativo {{{pais_response_flag_ativo_value}}}
      * @var bool
      */
    protected $flag_ativo;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->codigo = $data["codigo"];
            $this->sigla = $data["sigla"];
            $this->descricao = $data["descricao"];
            $this->continente = $data["continente"];
            $this->flag_ativo = $data["flag_ativo"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id {{{pais_response_id_value}}}
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets codigo
     * @return string
     */
    public function getCodigo()
    {
        return $this->codigo;
    }
  
    /**
     * Sets codigo
     * @param string $codigo {{{pais_response_codigo_value}}}
     * @return $this
     */
    public function setCodigo($codigo)
    {
        
        $this->codigo = $codigo;
        return $this;
    }
    
    /**
     * Gets sigla
     * @return string
     */
    public function getSigla()
    {
        return $this->sigla;
    }
  
    /**
     * Sets sigla
     * @param string $sigla {{{pais_response_sigla_value}}}
     * @return $this
     */
    public function setSigla($sigla)
    {
        
        $this->sigla = $sigla;
        return $this;
    }
    
    /**
     * Gets descricao
     * @return string
     */
    public function getDescricao()
    {
        return $this->descricao;
    }
  
    /**
     * Sets descricao
     * @param string $descricao {{{pais_response_descricao_value}}}
     * @return $this
     */
    public function setDescricao($descricao)
    {
        
        $this->descricao = $descricao;
        return $this;
    }
    
    /**
     * Gets continente
     * @return string
     */
    public function getContinente()
    {
        return $this->continente;
    }
  
    /**
     * Sets continente
     * @param string $continente {{{pais_response_continente_value}}}
     * @return $this
     */
    public function setContinente($continente)
    {
        $allowed_values = array("AFRICA", "AMERICA_LATINA", "AMERICA_NORTE", "ASIA", "ANTARTIDA", "EUROPA", "OCEANIA");
        if (!in_array($continente, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'continente', must be one of 'AFRICA', 'AMERICA_LATINA', 'AMERICA_NORTE', 'ASIA', 'ANTARTIDA', 'EUROPA', 'OCEANIA'");
        }
        $this->continente = $continente;
        return $this;
    }
    
    /**
     * Gets flag_ativo
     * @return bool
     */
    public function getFlagAtivo()
    {
        return $this->flag_ativo;
    }
  
    /**
     * Sets flag_ativo
     * @param bool $flag_ativo {{{pais_response_flag_ativo_value}}}
     * @return $this
     */
    public function setFlagAtivo($flag_ativo)
    {
        
        $this->flag_ativo = $flag_ativo;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
