<?php
/**
 * GlobaltagoportunidadeApi
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2;

use \br.com.conductor.pier.api.v2.invoker\Configuration;
use \br.com.conductor.pier.api.v2.invoker\ApiClient;
use \br.com.conductor.pier.api.v2.invoker\ApiException;
use \br.com.conductor.pier.api.v2.invoker\ObjectSerializer;

/**
 * GlobaltagoportunidadeApi Class Doc Comment
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GlobaltagoportunidadeApi
{

    /**
     * API Client
     * @var \br.com.conductor.pier.api.v2.invoker\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://localhost/');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \br.com.conductor.pier.api.v2.invoker\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient $apiClient set the API client
     * @return GlobaltagoportunidadeApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * alterarStatusUsingPUT
     *
     * {{{tipo_oportunidade_resource_alterar_status}}}
     *
     * @param int $id {{{tipo_oportunidade_resource_alterar_status_param_id}}} (required)
     * @param int $id_status {{{tipo_oportunidade_resource_alterar_status_param_id_status}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\StatusOportunidadePersistValue_ $persist persist (required)
     * @return \br.com.conductor.pier.api.v2.model\StatusOportunidadeResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarStatusUsingPUT($id, $id_status, $persist)
    {
        list($response, $statusCode, $httpHeader) = $this->alterarStatusUsingPUTWithHttpInfo ($id, $id_status, $persist);
        return $response; 
    }


    /**
     * alterarStatusUsingPUTWithHttpInfo
     *
     * {{{tipo_oportunidade_resource_alterar_status}}}
     *
     * @param int $id {{{tipo_oportunidade_resource_alterar_status_param_id}}} (required)
     * @param int $id_status {{{tipo_oportunidade_resource_alterar_status_param_id_status}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\StatusOportunidadePersistValue_ $persist persist (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\StatusOportunidadeResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarStatusUsingPUTWithHttpInfo($id, $id_status, $persist)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling alterarStatusUsingPUT');
        }
        // verify the required parameter 'id_status' is set
        if ($id_status === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_status when calling alterarStatusUsingPUT');
        }
        // verify the required parameter 'persist' is set
        if ($persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $persist when calling alterarStatusUsingPUT');
        }
  
        // parse inputs
        $resourcePath = "/api/tipos-oportunidades/{id}/status/{idStatus}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }// path params
        
        if ($id_status !== null) {
            $resourcePath = str_replace(
                "{" . "idStatus" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_status),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($persist)) {
            $_tempBody = $persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\StatusOportunidadeResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\StatusOportunidadeResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\StatusOportunidadeResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * alterarUsingPUT12
     *
     * {{{oportunidade_resource_alterar}}}
     *
     * @param int $id {{{oportunidade_resource_alterar_param_id}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\OportunidadeUpdateValue_ $update update (required)
     * @return \br.com.conductor.pier.api.v2.model\OportunidadeResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUT12($id, $update)
    {
        list($response, $statusCode, $httpHeader) = $this->alterarUsingPUT12WithHttpInfo ($id, $update);
        return $response; 
    }


    /**
     * alterarUsingPUT12WithHttpInfo
     *
     * {{{oportunidade_resource_alterar}}}
     *
     * @param int $id {{{oportunidade_resource_alterar_param_id}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\OportunidadeUpdateValue_ $update update (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\OportunidadeResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUT12WithHttpInfo($id, $update)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling alterarUsingPUT12');
        }
        // verify the required parameter 'update' is set
        if ($update === null) {
            throw new \InvalidArgumentException('Missing the required parameter $update when calling alterarUsingPUT12');
        }
  
        // parse inputs
        $resourcePath = "/api/oportunidades/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($update)) {
            $_tempBody = $update;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\OportunidadeResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\OportunidadeResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\OportunidadeResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * alterarUsingPUT20
     *
     * {{{tipo_oportunidade_resource_alterar}}}
     *
     * @param int $id {{{tipo_oportunidade_resource_alterar_param_id}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\TipoOportunidadePersistValue_ $persist persist (required)
     * @return \br.com.conductor.pier.api.v2.model\TipoOportunidadeResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUT20($id, $persist)
    {
        list($response, $statusCode, $httpHeader) = $this->alterarUsingPUT20WithHttpInfo ($id, $persist);
        return $response; 
    }


    /**
     * alterarUsingPUT20WithHttpInfo
     *
     * {{{tipo_oportunidade_resource_alterar}}}
     *
     * @param int $id {{{tipo_oportunidade_resource_alterar_param_id}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\TipoOportunidadePersistValue_ $persist persist (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\TipoOportunidadeResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUT20WithHttpInfo($id, $persist)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling alterarUsingPUT20');
        }
        // verify the required parameter 'persist' is set
        if ($persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $persist when calling alterarUsingPUT20');
        }
  
        // parse inputs
        $resourcePath = "/api/tipos-oportunidades/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($persist)) {
            $_tempBody = $persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\TipoOportunidadeResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\TipoOportunidadeResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\TipoOportunidadeResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarStatusUsingGET
     *
     * {{{tipo_oportunidade_resource_consultar_status}}}
     *
     * @param int $id {{{tipo_oportunidade_resource_consultar_status_param_id}}} (required)
     * @param int $id_status {{{tipo_oportunidade_resource_consultar_status_param_id_status}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\StatusOportunidadeResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarStatusUsingGET($id, $id_status)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarStatusUsingGETWithHttpInfo ($id, $id_status);
        return $response; 
    }


    /**
     * consultarStatusUsingGETWithHttpInfo
     *
     * {{{tipo_oportunidade_resource_consultar_status}}}
     *
     * @param int $id {{{tipo_oportunidade_resource_consultar_status_param_id}}} (required)
     * @param int $id_status {{{tipo_oportunidade_resource_consultar_status_param_id_status}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\StatusOportunidadeResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarStatusUsingGETWithHttpInfo($id, $id_status)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarStatusUsingGET');
        }
        // verify the required parameter 'id_status' is set
        if ($id_status === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_status when calling consultarStatusUsingGET');
        }
  
        // parse inputs
        $resourcePath = "/api/tipos-oportunidades/{id}/status/{idStatus}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }// path params
        
        if ($id_status !== null) {
            $resourcePath = str_replace(
                "{" . "idStatus" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_status),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\StatusOportunidadeResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\StatusOportunidadeResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\StatusOportunidadeResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarUsingGET25
     *
     * {{{oportunidade_resource_consultar}}}
     *
     * @param int $id {{{oportunidade_resource_consultar_param_id}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\OportunidadeResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET25($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarUsingGET25WithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarUsingGET25WithHttpInfo
     *
     * {{{oportunidade_resource_consultar}}}
     *
     * @param int $id {{{oportunidade_resource_consultar_param_id}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\OportunidadeResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET25WithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarUsingGET25');
        }
  
        // parse inputs
        $resourcePath = "/api/oportunidades/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\OportunidadeResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\OportunidadeResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\OportunidadeResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarUsingGET44
     *
     * {{{tipo_oportunidade_resource_consultar}}}
     *
     * @param int $id {{{tipo_oportunidade_resource_consultar_param_id}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\TipoOportunidadeResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET44($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarUsingGET44WithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarUsingGET44WithHttpInfo
     *
     * {{{tipo_oportunidade_resource_consultar}}}
     *
     * @param int $id {{{tipo_oportunidade_resource_consultar_param_id}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\TipoOportunidadeResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET44WithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarUsingGET44');
        }
  
        // parse inputs
        $resourcePath = "/api/tipos-oportunidades/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\TipoOportunidadeResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\TipoOportunidadeResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\TipoOportunidadeResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarAuditoriasStatusUsingGET
     *
     * {{{tipo_oportunidade_resource_listar_auditorias_status}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $rev_type {{{status_oportunidade_a_u_d_request_rev_type_value}}} (optional)
     * @param string $rev_date {{{status_oportunidade_a_u_d_request_rev_date_value}}} (optional)
     * @param int $id {{{status_oportunidade_a_u_d_request_id_value}}} (optional)
     * @param int $id_tipo_oportunidade {{{status_oportunidade_a_u_d_request_id_tipo_oportunidade_value}}} (optional)
     * @param string $nome {{{status_oportunidade_a_u_d_request_nome_value}}} (optional)
     * @param string $descricao {{{status_oportunidade_a_u_d_request_descricao_value}}} (optional)
     * @param bool $flag_ativo {{{status_oportunidade_a_u_d_request_flag_ativo_value}}} (optional)
     * @param string $rev_user {{{status_oportunidade_a_u_d_request_rev_user_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageStatusOportunidadeAUDResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarAuditoriasStatusUsingGET($sort = null, $page = null, $limit = null, $rev_type = null, $rev_date = null, $id = null, $id_tipo_oportunidade = null, $nome = null, $descricao = null, $flag_ativo = null, $rev_user = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarAuditoriasStatusUsingGETWithHttpInfo ($sort, $page, $limit, $rev_type, $rev_date, $id, $id_tipo_oportunidade, $nome, $descricao, $flag_ativo, $rev_user);
        return $response; 
    }


    /**
     * listarAuditoriasStatusUsingGETWithHttpInfo
     *
     * {{{tipo_oportunidade_resource_listar_auditorias_status}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $rev_type {{{status_oportunidade_a_u_d_request_rev_type_value}}} (optional)
     * @param string $rev_date {{{status_oportunidade_a_u_d_request_rev_date_value}}} (optional)
     * @param int $id {{{status_oportunidade_a_u_d_request_id_value}}} (optional)
     * @param int $id_tipo_oportunidade {{{status_oportunidade_a_u_d_request_id_tipo_oportunidade_value}}} (optional)
     * @param string $nome {{{status_oportunidade_a_u_d_request_nome_value}}} (optional)
     * @param string $descricao {{{status_oportunidade_a_u_d_request_descricao_value}}} (optional)
     * @param bool $flag_ativo {{{status_oportunidade_a_u_d_request_flag_ativo_value}}} (optional)
     * @param string $rev_user {{{status_oportunidade_a_u_d_request_rev_user_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageStatusOportunidadeAUDResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarAuditoriasStatusUsingGETWithHttpInfo($sort = null, $page = null, $limit = null, $rev_type = null, $rev_date = null, $id = null, $id_tipo_oportunidade = null, $nome = null, $descricao = null, $flag_ativo = null, $rev_user = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/auditorias-status-oportunidades";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($rev_type !== null) {
            $queryParams['revType'] = $this->apiClient->getSerializer()->toQueryValue($rev_type);
        }// query params
        
        if ($rev_date !== null) {
            $queryParams['revDate'] = $this->apiClient->getSerializer()->toQueryValue($rev_date);
        }// query params
        
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }// query params
        
        if ($id_tipo_oportunidade !== null) {
            $queryParams['idTipoOportunidade'] = $this->apiClient->getSerializer()->toQueryValue($id_tipo_oportunidade);
        }// query params
        
        if ($nome !== null) {
            $queryParams['nome'] = $this->apiClient->getSerializer()->toQueryValue($nome);
        }// query params
        
        if ($descricao !== null) {
            $queryParams['descricao'] = $this->apiClient->getSerializer()->toQueryValue($descricao);
        }// query params
        
        if ($flag_ativo !== null) {
            $queryParams['flagAtivo'] = $this->apiClient->getSerializer()->toQueryValue($flag_ativo);
        }// query params
        
        if ($rev_user !== null) {
            $queryParams['revUser'] = $this->apiClient->getSerializer()->toQueryValue($rev_user);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageStatusOportunidadeAUDResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageStatusOportunidadeAUDResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageStatusOportunidadeAUDResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarAuditoriasUsingGET
     *
     * {{{oportunidade_resource_listar_auditorias}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_status_oportunidade {{{oportunidade_a_u_d_request_id_status_oportunidade_value}}} (optional)
     * @param string $data_cadastro {{{oportunidade_a_u_d_request_data_cadastro_value}}} (optional)
     * @param string $data_atualizacao {{{oportunidade_a_u_d_request_data_atualizacao_value}}} (optional)
     * @param string $numero_receita_federal {{{oportunidade_a_u_d_request_numero_receita_federal_value}}} (optional)
     * @param string $data_inicio_vigencia {{{oportunidade_a_u_d_request_data_inicio_vigencia_value}}} (optional)
     * @param string $datat_fim_vigencia {{{oportunidade_a_u_d_request_datat_fim_vigencia_value}}} (optional)
     * @param bool $flag_ativo {{{oportunidade_a_u_d_request_flag_ativo_value}}} (optional)
     * @param string $rev_date {{{oportunidade_a_u_d_request_rev_date_value}}} (optional)
     * @param string $rev_type {{{oportunidade_a_u_d_request_rev_type_value}}} (optional)
     * @param string $rev_user {{{oportunidade_a_u_d_request_rev_user_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageOportunidadeAUDResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarAuditoriasUsingGET($sort = null, $page = null, $limit = null, $id_status_oportunidade = null, $data_cadastro = null, $data_atualizacao = null, $numero_receita_federal = null, $data_inicio_vigencia = null, $datat_fim_vigencia = null, $flag_ativo = null, $rev_date = null, $rev_type = null, $rev_user = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarAuditoriasUsingGETWithHttpInfo ($sort, $page, $limit, $id_status_oportunidade, $data_cadastro, $data_atualizacao, $numero_receita_federal, $data_inicio_vigencia, $datat_fim_vigencia, $flag_ativo, $rev_date, $rev_type, $rev_user);
        return $response; 
    }


    /**
     * listarAuditoriasUsingGETWithHttpInfo
     *
     * {{{oportunidade_resource_listar_auditorias}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_status_oportunidade {{{oportunidade_a_u_d_request_id_status_oportunidade_value}}} (optional)
     * @param string $data_cadastro {{{oportunidade_a_u_d_request_data_cadastro_value}}} (optional)
     * @param string $data_atualizacao {{{oportunidade_a_u_d_request_data_atualizacao_value}}} (optional)
     * @param string $numero_receita_federal {{{oportunidade_a_u_d_request_numero_receita_federal_value}}} (optional)
     * @param string $data_inicio_vigencia {{{oportunidade_a_u_d_request_data_inicio_vigencia_value}}} (optional)
     * @param string $datat_fim_vigencia {{{oportunidade_a_u_d_request_datat_fim_vigencia_value}}} (optional)
     * @param bool $flag_ativo {{{oportunidade_a_u_d_request_flag_ativo_value}}} (optional)
     * @param string $rev_date {{{oportunidade_a_u_d_request_rev_date_value}}} (optional)
     * @param string $rev_type {{{oportunidade_a_u_d_request_rev_type_value}}} (optional)
     * @param string $rev_user {{{oportunidade_a_u_d_request_rev_user_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageOportunidadeAUDResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarAuditoriasUsingGETWithHttpInfo($sort = null, $page = null, $limit = null, $id_status_oportunidade = null, $data_cadastro = null, $data_atualizacao = null, $numero_receita_federal = null, $data_inicio_vigencia = null, $datat_fim_vigencia = null, $flag_ativo = null, $rev_date = null, $rev_type = null, $rev_user = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/auditorias-oportunidades";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id_status_oportunidade !== null) {
            $queryParams['idStatusOportunidade'] = $this->apiClient->getSerializer()->toQueryValue($id_status_oportunidade);
        }// query params
        
        if ($data_cadastro !== null) {
            $queryParams['dataCadastro'] = $this->apiClient->getSerializer()->toQueryValue($data_cadastro);
        }// query params
        
        if ($data_atualizacao !== null) {
            $queryParams['dataAtualizacao'] = $this->apiClient->getSerializer()->toQueryValue($data_atualizacao);
        }// query params
        
        if ($numero_receita_federal !== null) {
            $queryParams['numeroReceitaFederal'] = $this->apiClient->getSerializer()->toQueryValue($numero_receita_federal);
        }// query params
        
        if ($data_inicio_vigencia !== null) {
            $queryParams['dataInicioVigencia'] = $this->apiClient->getSerializer()->toQueryValue($data_inicio_vigencia);
        }// query params
        
        if ($datat_fim_vigencia !== null) {
            $queryParams['datatFimVigencia'] = $this->apiClient->getSerializer()->toQueryValue($datat_fim_vigencia);
        }// query params
        
        if ($flag_ativo !== null) {
            $queryParams['flagAtivo'] = $this->apiClient->getSerializer()->toQueryValue($flag_ativo);
        }// query params
        
        if ($rev_date !== null) {
            $queryParams['revDate'] = $this->apiClient->getSerializer()->toQueryValue($rev_date);
        }// query params
        
        if ($rev_type !== null) {
            $queryParams['revType'] = $this->apiClient->getSerializer()->toQueryValue($rev_type);
        }// query params
        
        if ($rev_user !== null) {
            $queryParams['revUser'] = $this->apiClient->getSerializer()->toQueryValue($rev_user);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageOportunidadeAUDResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageOportunidadeAUDResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageOportunidadeAUDResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarAuditoriasUsingGET1
     *
     * {{{tipo_oportunidade_resource_listar_auditorias}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $rev_type {{{tipo_oportunidade_a_u_d_request_rev_type_value}}} (optional)
     * @param string $rev_date {{{tipo_oportunidade_a_u_d_request_rev_date_value}}} (optional)
     * @param int $id {{{tipo_oportunidade_a_u_d_request_id_value}}} (optional)
     * @param string $descricao {{{tipo_oportunidade_a_u_d_request_descricao_value}}} (optional)
     * @param bool $flag_ativo {{{tipo_oportunidade_a_u_d_request_flag_ativo_value}}} (optional)
     * @param string $rev_user {{{tipo_oportunidade_a_u_d_request_rev_user_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageTipoOportunidadeAUDResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarAuditoriasUsingGET1($sort = null, $page = null, $limit = null, $rev_type = null, $rev_date = null, $id = null, $descricao = null, $flag_ativo = null, $rev_user = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarAuditoriasUsingGET1WithHttpInfo ($sort, $page, $limit, $rev_type, $rev_date, $id, $descricao, $flag_ativo, $rev_user);
        return $response; 
    }


    /**
     * listarAuditoriasUsingGET1WithHttpInfo
     *
     * {{{tipo_oportunidade_resource_listar_auditorias}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $rev_type {{{tipo_oportunidade_a_u_d_request_rev_type_value}}} (optional)
     * @param string $rev_date {{{tipo_oportunidade_a_u_d_request_rev_date_value}}} (optional)
     * @param int $id {{{tipo_oportunidade_a_u_d_request_id_value}}} (optional)
     * @param string $descricao {{{tipo_oportunidade_a_u_d_request_descricao_value}}} (optional)
     * @param bool $flag_ativo {{{tipo_oportunidade_a_u_d_request_flag_ativo_value}}} (optional)
     * @param string $rev_user {{{tipo_oportunidade_a_u_d_request_rev_user_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageTipoOportunidadeAUDResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarAuditoriasUsingGET1WithHttpInfo($sort = null, $page = null, $limit = null, $rev_type = null, $rev_date = null, $id = null, $descricao = null, $flag_ativo = null, $rev_user = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/auditorias-tipos-oportunidades";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($rev_type !== null) {
            $queryParams['revType'] = $this->apiClient->getSerializer()->toQueryValue($rev_type);
        }// query params
        
        if ($rev_date !== null) {
            $queryParams['revDate'] = $this->apiClient->getSerializer()->toQueryValue($rev_date);
        }// query params
        
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }// query params
        
        if ($descricao !== null) {
            $queryParams['descricao'] = $this->apiClient->getSerializer()->toQueryValue($descricao);
        }// query params
        
        if ($flag_ativo !== null) {
            $queryParams['flagAtivo'] = $this->apiClient->getSerializer()->toQueryValue($flag_ativo);
        }// query params
        
        if ($rev_user !== null) {
            $queryParams['revUser'] = $this->apiClient->getSerializer()->toQueryValue($rev_user);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageTipoOportunidadeAUDResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageTipoOportunidadeAUDResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageTipoOportunidadeAUDResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarStatusUsingGET
     *
     * {{{tipo_oportunidade_resource_listar_status}}}
     *
     * @param int $id {{{tipo_oportunidade_resource_listar_status_param_id}}} (required)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param string $nome {{{status_oportunidade_request_nome_value}}} (optional)
     * @param string $descricao {{{status_oportunidade_request_descricao_value}}} (optional)
     * @param bool $flag_ativo {{{status_oportunidade_request_flag_ativo_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageStatusOportunidadeResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarStatusUsingGET($id, $sort = null, $page = null, $limit = null, $nome = null, $descricao = null, $flag_ativo = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarStatusUsingGETWithHttpInfo ($id, $sort, $page, $limit, $nome, $descricao, $flag_ativo);
        return $response; 
    }


    /**
     * listarStatusUsingGETWithHttpInfo
     *
     * {{{tipo_oportunidade_resource_listar_status}}}
     *
     * @param int $id {{{tipo_oportunidade_resource_listar_status_param_id}}} (required)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param string $nome {{{status_oportunidade_request_nome_value}}} (optional)
     * @param string $descricao {{{status_oportunidade_request_descricao_value}}} (optional)
     * @param bool $flag_ativo {{{status_oportunidade_request_flag_ativo_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageStatusOportunidadeResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarStatusUsingGETWithHttpInfo($id, $sort = null, $page = null, $limit = null, $nome = null, $descricao = null, $flag_ativo = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling listarStatusUsingGET');
        }
  
        // parse inputs
        $resourcePath = "/api/tipos-oportunidades/{id}/status";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($nome !== null) {
            $queryParams['nome'] = $this->apiClient->getSerializer()->toQueryValue($nome);
        }// query params
        
        if ($descricao !== null) {
            $queryParams['descricao'] = $this->apiClient->getSerializer()->toQueryValue($descricao);
        }// query params
        
        if ($flag_ativo !== null) {
            $queryParams['flagAtivo'] = $this->apiClient->getSerializer()->toQueryValue($flag_ativo);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageStatusOportunidadeResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageStatusOportunidadeResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageStatusOportunidadeResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET35
     *
     * {{{oportunidade_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_status_oportunidade {{{oportunidade_request_id_status_oportunidade_value}}} (optional)
     * @param string $data_cadastro {{{oportunidade_request_data_cadastro_value}}} (optional)
     * @param string $data_atualizacao {{{oportunidade_request_data_atualizacao_value}}} (optional)
     * @param string $numero_receita_federal {{{oportunidade_request_numero_receita_federal_value}}} (optional)
     * @param string $data_inicio_vigencia {{{oportunidade_request_data_inicio_vigencia_value}}} (optional)
     * @param string $data_fim_vigencia {{{oportunidade_request_data_fim_vigencia_value}}} (optional)
     * @param bool $flag_ativo {{{oportunidade_request_flag_ativo_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageOportunidadeResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET35($sort = null, $page = null, $limit = null, $id_status_oportunidade = null, $data_cadastro = null, $data_atualizacao = null, $numero_receita_federal = null, $data_inicio_vigencia = null, $data_fim_vigencia = null, $flag_ativo = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGET35WithHttpInfo ($sort, $page, $limit, $id_status_oportunidade, $data_cadastro, $data_atualizacao, $numero_receita_federal, $data_inicio_vigencia, $data_fim_vigencia, $flag_ativo);
        return $response; 
    }


    /**
     * listarUsingGET35WithHttpInfo
     *
     * {{{oportunidade_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_status_oportunidade {{{oportunidade_request_id_status_oportunidade_value}}} (optional)
     * @param string $data_cadastro {{{oportunidade_request_data_cadastro_value}}} (optional)
     * @param string $data_atualizacao {{{oportunidade_request_data_atualizacao_value}}} (optional)
     * @param string $numero_receita_federal {{{oportunidade_request_numero_receita_federal_value}}} (optional)
     * @param string $data_inicio_vigencia {{{oportunidade_request_data_inicio_vigencia_value}}} (optional)
     * @param string $data_fim_vigencia {{{oportunidade_request_data_fim_vigencia_value}}} (optional)
     * @param bool $flag_ativo {{{oportunidade_request_flag_ativo_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageOportunidadeResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET35WithHttpInfo($sort = null, $page = null, $limit = null, $id_status_oportunidade = null, $data_cadastro = null, $data_atualizacao = null, $numero_receita_federal = null, $data_inicio_vigencia = null, $data_fim_vigencia = null, $flag_ativo = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/oportunidades";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id_status_oportunidade !== null) {
            $queryParams['idStatusOportunidade'] = $this->apiClient->getSerializer()->toQueryValue($id_status_oportunidade);
        }// query params
        
        if ($data_cadastro !== null) {
            $queryParams['dataCadastro'] = $this->apiClient->getSerializer()->toQueryValue($data_cadastro);
        }// query params
        
        if ($data_atualizacao !== null) {
            $queryParams['dataAtualizacao'] = $this->apiClient->getSerializer()->toQueryValue($data_atualizacao);
        }// query params
        
        if ($numero_receita_federal !== null) {
            $queryParams['numeroReceitaFederal'] = $this->apiClient->getSerializer()->toQueryValue($numero_receita_federal);
        }// query params
        
        if ($data_inicio_vigencia !== null) {
            $queryParams['dataInicioVigencia'] = $this->apiClient->getSerializer()->toQueryValue($data_inicio_vigencia);
        }// query params
        
        if ($data_fim_vigencia !== null) {
            $queryParams['dataFimVigencia'] = $this->apiClient->getSerializer()->toQueryValue($data_fim_vigencia);
        }// query params
        
        if ($flag_ativo !== null) {
            $queryParams['flagAtivo'] = $this->apiClient->getSerializer()->toQueryValue($flag_ativo);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageOportunidadeResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageOportunidadeResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageOportunidadeResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET55
     *
     * {{{tipo_oportunidade_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param string $descricao {{{tipo_oportunidade_request_descricao_value}}} (optional)
     * @param bool $flag_ativo {{{tipo_oportunidade_request_flag_ativo_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageTipoOportunidadeResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET55($sort = null, $page = null, $limit = null, $descricao = null, $flag_ativo = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGET55WithHttpInfo ($sort, $page, $limit, $descricao, $flag_ativo);
        return $response; 
    }


    /**
     * listarUsingGET55WithHttpInfo
     *
     * {{{tipo_oportunidade_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param string $descricao {{{tipo_oportunidade_request_descricao_value}}} (optional)
     * @param bool $flag_ativo {{{tipo_oportunidade_request_flag_ativo_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageTipoOportunidadeResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET55WithHttpInfo($sort = null, $page = null, $limit = null, $descricao = null, $flag_ativo = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/tipos-oportunidades";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($descricao !== null) {
            $queryParams['descricao'] = $this->apiClient->getSerializer()->toQueryValue($descricao);
        }// query params
        
        if ($flag_ativo !== null) {
            $queryParams['flagAtivo'] = $this->apiClient->getSerializer()->toQueryValue($flag_ativo);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageTipoOportunidadeResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageTipoOportunidadeResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageTipoOportunidadeResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * salvarStatusUsingPOST
     *
     * {{{tipo_oportunidade_resource_salvar_status}}}
     *
     * @param int $id {{{tipo_oportunidade_resource_salvar_status_param_id}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\StatusOportunidadePersistValue_ $persist persist (required)
     * @return \br.com.conductor.pier.api.v2.model\StatusOportunidadeResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarStatusUsingPOST($id, $persist)
    {
        list($response, $statusCode, $httpHeader) = $this->salvarStatusUsingPOSTWithHttpInfo ($id, $persist);
        return $response; 
    }


    /**
     * salvarStatusUsingPOSTWithHttpInfo
     *
     * {{{tipo_oportunidade_resource_salvar_status}}}
     *
     * @param int $id {{{tipo_oportunidade_resource_salvar_status_param_id}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\StatusOportunidadePersistValue_ $persist persist (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\StatusOportunidadeResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarStatusUsingPOSTWithHttpInfo($id, $persist)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling salvarStatusUsingPOST');
        }
        // verify the required parameter 'persist' is set
        if ($persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $persist when calling salvarStatusUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/tipos-oportunidades/{id}/status";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($persist)) {
            $_tempBody = $persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\StatusOportunidadeResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\StatusOportunidadeResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\StatusOportunidadeResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * salvarUsingPOST21
     *
     * {{{oportunidade_resource_salvar}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\OportunidadePersistValue_ $persist persist (required)
     * @return \br.com.conductor.pier.api.v2.model\OportunidadeResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST21($persist)
    {
        list($response, $statusCode, $httpHeader) = $this->salvarUsingPOST21WithHttpInfo ($persist);
        return $response; 
    }


    /**
     * salvarUsingPOST21WithHttpInfo
     *
     * {{{oportunidade_resource_salvar}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\OportunidadePersistValue_ $persist persist (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\OportunidadeResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST21WithHttpInfo($persist)
    {
        
        // verify the required parameter 'persist' is set
        if ($persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $persist when calling salvarUsingPOST21');
        }
  
        // parse inputs
        $resourcePath = "/api/oportunidades";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($persist)) {
            $_tempBody = $persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\OportunidadeResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\OportunidadeResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\OportunidadeResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * salvarUsingPOST30
     *
     * {{{tipo_oportunidade_resource_salvar}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\TipoOportunidadePersistValue_ $persist persist (required)
     * @return \br.com.conductor.pier.api.v2.model\TipoOportunidadeResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST30($persist)
    {
        list($response, $statusCode, $httpHeader) = $this->salvarUsingPOST30WithHttpInfo ($persist);
        return $response; 
    }


    /**
     * salvarUsingPOST30WithHttpInfo
     *
     * {{{tipo_oportunidade_resource_salvar}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\TipoOportunidadePersistValue_ $persist persist (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\TipoOportunidadeResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST30WithHttpInfo($persist)
    {
        
        // verify the required parameter 'persist' is set
        if ($persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $persist when calling salvarUsingPOST30');
        }
  
        // parse inputs
        $resourcePath = "/api/tipos-oportunidades";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($persist)) {
            $_tempBody = $persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\TipoOportunidadeResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\TipoOportunidadeResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\TipoOportunidadeResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
