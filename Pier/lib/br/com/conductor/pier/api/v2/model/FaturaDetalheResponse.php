<?php
/**
 * FaturaDetalheResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2.model;

use \ArrayAccess;
/**
 * FaturaDetalheResponse Class Doc Comment
 *
 * @category    Class
 * @description Detalhes da fatura
 * @package     br.com.conductor.pier.api.v2.invoker
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class FaturaDetalheResponse implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'lancamentos_fatura_response' => '\br.com.conductor.pier.api.v2.model\LancamentoFaturaResponse[]',
        'id_conta' => 'int',
        'situacao_processamento' => 'string',
        'pagamento_efetuado' => 'bool',
        'data_vencimento_fatura' => 'string',
        'data_vencimento_real' => 'string',
        'data_fechamento' => 'string',
        'valor_total' => 'Number',
        'valor_pagamento_minimo' => 'Number',
        'saldo_anterior' => 'Number'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'lancamentos_fatura_response' => 'lancamentosFaturaResponse',
        'id_conta' => 'idConta',
        'situacao_processamento' => 'situacaoProcessamento',
        'pagamento_efetuado' => 'pagamentoEfetuado',
        'data_vencimento_fatura' => 'dataVencimentoFatura',
        'data_vencimento_real' => 'dataVencimentoReal',
        'data_fechamento' => 'dataFechamento',
        'valor_total' => 'valorTotal',
        'valor_pagamento_minimo' => 'valorPagamentoMinimo',
        'saldo_anterior' => 'saldoAnterior'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'lancamentos_fatura_response' => 'setLancamentosFaturaResponse',
        'id_conta' => 'setIdConta',
        'situacao_processamento' => 'setSituacaoProcessamento',
        'pagamento_efetuado' => 'setPagamentoEfetuado',
        'data_vencimento_fatura' => 'setDataVencimentoFatura',
        'data_vencimento_real' => 'setDataVencimentoReal',
        'data_fechamento' => 'setDataFechamento',
        'valor_total' => 'setValorTotal',
        'valor_pagamento_minimo' => 'setValorPagamentoMinimo',
        'saldo_anterior' => 'setSaldoAnterior'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'lancamentos_fatura_response' => 'getLancamentosFaturaResponse',
        'id_conta' => 'getIdConta',
        'situacao_processamento' => 'getSituacaoProcessamento',
        'pagamento_efetuado' => 'getPagamentoEfetuado',
        'data_vencimento_fatura' => 'getDataVencimentoFatura',
        'data_vencimento_real' => 'getDataVencimentoReal',
        'data_fechamento' => 'getDataFechamento',
        'valor_total' => 'getValorTotal',
        'valor_pagamento_minimo' => 'getValorPagamentoMinimo',
        'saldo_anterior' => 'getSaldoAnterior'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $lancamentos_fatura_response 
      * @var \br.com.conductor.pier.api.v2.model\LancamentoFaturaResponse[]
      */
    protected $lancamentos_fatura_response;
    
    /**
      * $id_conta C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta.
      * @var int
      */
    protected $id_conta;
    
    /**
      * $situacao_processamento Situa\u00C3\u00A7\u00C3\u00A3o de Processamento da fatura.
      * @var string
      */
    protected $situacao_processamento;
    
    /**
      * $pagamento_efetuado Status de pagamento efetuado.
      * @var bool
      */
    protected $pagamento_efetuado;
    
    /**
      * $data_vencimento_fatura Data de vencimento da fatura.
      * @var string
      */
    protected $data_vencimento_fatura;
    
    /**
      * $data_vencimento_real Data de vencimento real da fatura.
      * @var string
      */
    protected $data_vencimento_real;
    
    /**
      * $data_fechamento Data de fechamento da fatura.
      * @var string
      */
    protected $data_fechamento;
    
    /**
      * $valor_total Valor total da fatura.
      * @var Number
      */
    protected $valor_total;
    
    /**
      * $valor_pagamento_minimo Valor do pagamento m\u00C3\u00ADnimo.
      * @var Number
      */
    protected $valor_pagamento_minimo;
    
    /**
      * $saldo_anterior Valor do saldo anterior.
      * @var Number
      */
    protected $saldo_anterior;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->lancamentos_fatura_response = $data["lancamentos_fatura_response"];
            $this->id_conta = $data["id_conta"];
            $this->situacao_processamento = $data["situacao_processamento"];
            $this->pagamento_efetuado = $data["pagamento_efetuado"];
            $this->data_vencimento_fatura = $data["data_vencimento_fatura"];
            $this->data_vencimento_real = $data["data_vencimento_real"];
            $this->data_fechamento = $data["data_fechamento"];
            $this->valor_total = $data["valor_total"];
            $this->valor_pagamento_minimo = $data["valor_pagamento_minimo"];
            $this->saldo_anterior = $data["saldo_anterior"];
        }
    }
    
    /**
     * Gets lancamentos_fatura_response
     * @return \br.com.conductor.pier.api.v2.model\LancamentoFaturaResponse[]
     */
    public function getLancamentosFaturaResponse()
    {
        return $this->lancamentos_fatura_response;
    }
  
    /**
     * Sets lancamentos_fatura_response
     * @param \br.com.conductor.pier.api.v2.model\LancamentoFaturaResponse[] $lancamentos_fatura_response 
     * @return $this
     */
    public function setLancamentosFaturaResponse($lancamentos_fatura_response)
    {
        
        $this->lancamentos_fatura_response = $lancamentos_fatura_response;
        return $this;
    }
    
    /**
     * Gets id_conta
     * @return int
     */
    public function getIdConta()
    {
        return $this->id_conta;
    }
  
    /**
     * Sets id_conta
     * @param int $id_conta C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta.
     * @return $this
     */
    public function setIdConta($id_conta)
    {
        
        $this->id_conta = $id_conta;
        return $this;
    }
    
    /**
     * Gets situacao_processamento
     * @return string
     */
    public function getSituacaoProcessamento()
    {
        return $this->situacao_processamento;
    }
  
    /**
     * Sets situacao_processamento
     * @param string $situacao_processamento Situa\u00C3\u00A7\u00C3\u00A3o de Processamento da fatura.
     * @return $this
     */
    public function setSituacaoProcessamento($situacao_processamento)
    {
        $allowed_values = array("ABERTA", "FECHADA", "TODAS");
        if (!in_array($situacao_processamento, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'situacao_processamento', must be one of 'ABERTA', 'FECHADA', 'TODAS'");
        }
        $this->situacao_processamento = $situacao_processamento;
        return $this;
    }
    
    /**
     * Gets pagamento_efetuado
     * @return bool
     */
    public function getPagamentoEfetuado()
    {
        return $this->pagamento_efetuado;
    }
  
    /**
     * Sets pagamento_efetuado
     * @param bool $pagamento_efetuado Status de pagamento efetuado.
     * @return $this
     */
    public function setPagamentoEfetuado($pagamento_efetuado)
    {
        
        $this->pagamento_efetuado = $pagamento_efetuado;
        return $this;
    }
    
    /**
     * Gets data_vencimento_fatura
     * @return string
     */
    public function getDataVencimentoFatura()
    {
        return $this->data_vencimento_fatura;
    }
  
    /**
     * Sets data_vencimento_fatura
     * @param string $data_vencimento_fatura Data de vencimento da fatura.
     * @return $this
     */
    public function setDataVencimentoFatura($data_vencimento_fatura)
    {
        
        $this->data_vencimento_fatura = $data_vencimento_fatura;
        return $this;
    }
    
    /**
     * Gets data_vencimento_real
     * @return string
     */
    public function getDataVencimentoReal()
    {
        return $this->data_vencimento_real;
    }
  
    /**
     * Sets data_vencimento_real
     * @param string $data_vencimento_real Data de vencimento real da fatura.
     * @return $this
     */
    public function setDataVencimentoReal($data_vencimento_real)
    {
        
        $this->data_vencimento_real = $data_vencimento_real;
        return $this;
    }
    
    /**
     * Gets data_fechamento
     * @return string
     */
    public function getDataFechamento()
    {
        return $this->data_fechamento;
    }
  
    /**
     * Sets data_fechamento
     * @param string $data_fechamento Data de fechamento da fatura.
     * @return $this
     */
    public function setDataFechamento($data_fechamento)
    {
        
        $this->data_fechamento = $data_fechamento;
        return $this;
    }
    
    /**
     * Gets valor_total
     * @return Number
     */
    public function getValorTotal()
    {
        return $this->valor_total;
    }
  
    /**
     * Sets valor_total
     * @param Number $valor_total Valor total da fatura.
     * @return $this
     */
    public function setValorTotal($valor_total)
    {
        
        $this->valor_total = $valor_total;
        return $this;
    }
    
    /**
     * Gets valor_pagamento_minimo
     * @return Number
     */
    public function getValorPagamentoMinimo()
    {
        return $this->valor_pagamento_minimo;
    }
  
    /**
     * Sets valor_pagamento_minimo
     * @param Number $valor_pagamento_minimo Valor do pagamento m\u00C3\u00ADnimo.
     * @return $this
     */
    public function setValorPagamentoMinimo($valor_pagamento_minimo)
    {
        
        $this->valor_pagamento_minimo = $valor_pagamento_minimo;
        return $this;
    }
    
    /**
     * Gets saldo_anterior
     * @return Number
     */
    public function getSaldoAnterior()
    {
        return $this->saldo_anterior;
    }
  
    /**
     * Sets saldo_anterior
     * @param Number $saldo_anterior Valor do saldo anterior.
     * @return $this
     */
    public function setSaldoAnterior($saldo_anterior)
    {
        
        $this->saldo_anterior = $saldo_anterior;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
