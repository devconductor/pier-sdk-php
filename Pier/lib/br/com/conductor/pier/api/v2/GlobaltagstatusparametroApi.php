<?php
/**
 * GlobaltagstatusparametroApi
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2;

use \br.com.conductor.pier.api.v2.invoker\Configuration;
use \br.com.conductor.pier.api.v2.invoker\ApiClient;
use \br.com.conductor.pier.api.v2.invoker\ApiException;
use \br.com.conductor.pier.api.v2.invoker\ObjectSerializer;

/**
 * GlobaltagstatusparametroApi Class Doc Comment
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GlobaltagstatusparametroApi
{

    /**
     * API Client
     * @var \br.com.conductor.pier.api.v2.invoker\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://localhost/');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \br.com.conductor.pier.api.v2.invoker\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient $apiClient set the API client
     * @return GlobaltagstatusparametroApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * consultarEstagioCartaoUsingGET
     *
     * {{{estagio_cartao_resource_consultar_estagio_cartao}}}
     *
     * @param int $id {{{estagio_cartao_resource_consultar_estagio_cartao_param_id}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\EstagioCartaoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarEstagioCartaoUsingGET($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarEstagioCartaoUsingGETWithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarEstagioCartaoUsingGETWithHttpInfo
     *
     * {{{estagio_cartao_resource_consultar_estagio_cartao}}}
     *
     * @param int $id {{{estagio_cartao_resource_consultar_estagio_cartao_param_id}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\EstagioCartaoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarEstagioCartaoUsingGETWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarEstagioCartaoUsingGET');
        }
  
        // parse inputs
        $resourcePath = "/api/estagios-cartoes/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\EstagioCartaoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\EstagioCartaoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\EstagioCartaoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarStatusCartaoUsingGET
     *
     * {{{status_cartao_resource_consultar_status_cartao}}}
     *
     * @param int $id {{{status_cartao_resource_consultar_status_cartao_param_id}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\StatusCartaoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarStatusCartaoUsingGET($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarStatusCartaoUsingGETWithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarStatusCartaoUsingGETWithHttpInfo
     *
     * {{{status_cartao_resource_consultar_status_cartao}}}
     *
     * @param int $id {{{status_cartao_resource_consultar_status_cartao_param_id}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\StatusCartaoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarStatusCartaoUsingGETWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarStatusCartaoUsingGET');
        }
  
        // parse inputs
        $resourcePath = "/api/status-cartoes/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\StatusCartaoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\StatusCartaoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\StatusCartaoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarUsingGET38
     *
     * {{{status_conta_resource_consultar}}}
     *
     * @param int $id {{{status_conta_resource_consultar_param_id}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\StatusContaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET38($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarUsingGET38WithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarUsingGET38WithHttpInfo
     *
     * {{{status_conta_resource_consultar}}}
     *
     * @param int $id {{{status_conta_resource_consultar_param_id}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\StatusContaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET38WithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarUsingGET38');
        }
  
        // parse inputs
        $resourcePath = "/api/status-contas/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\StatusContaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\StatusContaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\StatusContaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarUsingGET39
     *
     * {{{status_impressao_resource_consultar}}}
     *
     * @param int $id {{{status_impressao_resource_consultar_param_id}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\StatusImpressaoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET39($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarUsingGET39WithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarUsingGET39WithHttpInfo
     *
     * {{{status_impressao_resource_consultar}}}
     *
     * @param int $id {{{status_impressao_resource_consultar_param_id}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\StatusImpressaoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET39WithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarUsingGET39');
        }
  
        // parse inputs
        $resourcePath = "/api/status-impressoes/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\StatusImpressaoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\StatusImpressaoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\StatusImpressaoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarEstagiosCartoesUsingGET
     *
     * {{{estagio_cartao_resource_listar_estagios_cartoes}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id {{{estagio_cartao_request_id_value}}} (optional)
     * @param string $nome {{{estagio_cartao_request_nome_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageEstagioCartaoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarEstagiosCartoesUsingGET($sort = null, $page = null, $limit = null, $id = null, $nome = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarEstagiosCartoesUsingGETWithHttpInfo ($sort, $page, $limit, $id, $nome);
        return $response; 
    }


    /**
     * listarEstagiosCartoesUsingGETWithHttpInfo
     *
     * {{{estagio_cartao_resource_listar_estagios_cartoes}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id {{{estagio_cartao_request_id_value}}} (optional)
     * @param string $nome {{{estagio_cartao_request_nome_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageEstagioCartaoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarEstagiosCartoesUsingGETWithHttpInfo($sort = null, $page = null, $limit = null, $id = null, $nome = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/estagios-cartoes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }// query params
        
        if ($nome !== null) {
            $queryParams['nome'] = $this->apiClient->getSerializer()->toQueryValue($nome);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageEstagioCartaoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageEstagioCartaoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageEstagioCartaoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarStatusCartoesUsingGET
     *
     * {{{status_cartao_resource_listar_status_cartoes}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id {{{status_cartao_request_id_value}}} (optional)
     * @param string $nome {{{status_cartao_request_nome_value}}} (optional)
     * @param int $permite_desbloquear {{{status_cartao_request_permite_desbloquear_value}}} (optional)
     * @param int $permite_atribuir_como_bloqueio {{{status_cartao_request_permite_atribuir_como_bloqueio_value}}} (optional)
     * @param int $permite_atribuir_como_cancelamento {{{status_cartao_request_permite_atribuir_como_cancelamento_value}}} (optional)
     * @param int $cobrar_tarifa_ao_emitir_nova_via {{{status_cartao_request_cobrar_tarifa_ao_emitir_nova_via_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageStatusCartaoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarStatusCartoesUsingGET($sort = null, $page = null, $limit = null, $id = null, $nome = null, $permite_desbloquear = null, $permite_atribuir_como_bloqueio = null, $permite_atribuir_como_cancelamento = null, $cobrar_tarifa_ao_emitir_nova_via = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarStatusCartoesUsingGETWithHttpInfo ($sort, $page, $limit, $id, $nome, $permite_desbloquear, $permite_atribuir_como_bloqueio, $permite_atribuir_como_cancelamento, $cobrar_tarifa_ao_emitir_nova_via);
        return $response; 
    }


    /**
     * listarStatusCartoesUsingGETWithHttpInfo
     *
     * {{{status_cartao_resource_listar_status_cartoes}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id {{{status_cartao_request_id_value}}} (optional)
     * @param string $nome {{{status_cartao_request_nome_value}}} (optional)
     * @param int $permite_desbloquear {{{status_cartao_request_permite_desbloquear_value}}} (optional)
     * @param int $permite_atribuir_como_bloqueio {{{status_cartao_request_permite_atribuir_como_bloqueio_value}}} (optional)
     * @param int $permite_atribuir_como_cancelamento {{{status_cartao_request_permite_atribuir_como_cancelamento_value}}} (optional)
     * @param int $cobrar_tarifa_ao_emitir_nova_via {{{status_cartao_request_cobrar_tarifa_ao_emitir_nova_via_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageStatusCartaoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarStatusCartoesUsingGETWithHttpInfo($sort = null, $page = null, $limit = null, $id = null, $nome = null, $permite_desbloquear = null, $permite_atribuir_como_bloqueio = null, $permite_atribuir_como_cancelamento = null, $cobrar_tarifa_ao_emitir_nova_via = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/status-cartoes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }// query params
        
        if ($nome !== null) {
            $queryParams['nome'] = $this->apiClient->getSerializer()->toQueryValue($nome);
        }// query params
        
        if ($permite_desbloquear !== null) {
            $queryParams['permiteDesbloquear'] = $this->apiClient->getSerializer()->toQueryValue($permite_desbloquear);
        }// query params
        
        if ($permite_atribuir_como_bloqueio !== null) {
            $queryParams['permiteAtribuirComoBloqueio'] = $this->apiClient->getSerializer()->toQueryValue($permite_atribuir_como_bloqueio);
        }// query params
        
        if ($permite_atribuir_como_cancelamento !== null) {
            $queryParams['permiteAtribuirComoCancelamento'] = $this->apiClient->getSerializer()->toQueryValue($permite_atribuir_como_cancelamento);
        }// query params
        
        if ($cobrar_tarifa_ao_emitir_nova_via !== null) {
            $queryParams['cobrarTarifaAoEmitirNovaVia'] = $this->apiClient->getSerializer()->toQueryValue($cobrar_tarifa_ao_emitir_nova_via);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageStatusCartaoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageStatusCartaoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageStatusCartaoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarTiposEventosTransacoesUsingGET
     *
     * {{{enum_resource_listar_tipos_eventos_transacoes}}}
     *
     * @return object[]
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarTiposEventosTransacoesUsingGET()
    {
        list($response, $statusCode, $httpHeader) = $this->listarTiposEventosTransacoesUsingGETWithHttpInfo ();
        return $response; 
    }


    /**
     * listarTiposEventosTransacoesUsingGETWithHttpInfo
     *
     * {{{enum_resource_listar_tipos_eventos_transacoes}}}
     *
     * @return Array of object[], HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarTiposEventosTransacoesUsingGETWithHttpInfo()
    {
        
  
        // parse inputs
        $resourcePath = "/api/tipos-eventos-transacoes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, 'object[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, 'object[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), 'object[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET49
     *
     * {{{status_conta_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id {{{status_conta_request_id_value}}} (optional)
     * @param string $nome {{{status_conta_request_nome_value}}} (optional)
     * @param int $permite_alterar_vencimento {{{status_conta_request_permite_alterar_vencimento_value}}} (optional)
     * @param int $permite_alterar_limite {{{status_conta_request_permite_alterar_limite_value}}} (optional)
     * @param int $permite_emitir_nova_via_cartao {{{status_conta_request_permite_emitir_nova_via_cartao_value}}} (optional)
     * @param int $permite_fazer_transferencia {{{status_conta_request_permite_fazer_transferencia_value}}} (optional)
     * @param int $permite_receber_transferencia {{{status_conta_request_permite_receber_transferencia_value}}} (optional)
     * @param int $permite_criar_acordo_cobranca {{{status_conta_request_permite_criar_acordo_cobranca_value}}} (optional)
     * @param int $permite_atribuir_como_bloqueio {{{status_conta_request_permite_atribuir_como_bloqueio_value}}} (optional)
     * @param int $permite_desbloquear {{{status_conta_request_permite_desbloquear_value}}} (optional)
     * @param int $permite_atribuir_como_cancelamento {{{status_conta_request_permite_atribuir_como_cancelamento_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageStatusContaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET49($sort = null, $page = null, $limit = null, $id = null, $nome = null, $permite_alterar_vencimento = null, $permite_alterar_limite = null, $permite_emitir_nova_via_cartao = null, $permite_fazer_transferencia = null, $permite_receber_transferencia = null, $permite_criar_acordo_cobranca = null, $permite_atribuir_como_bloqueio = null, $permite_desbloquear = null, $permite_atribuir_como_cancelamento = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGET49WithHttpInfo ($sort, $page, $limit, $id, $nome, $permite_alterar_vencimento, $permite_alterar_limite, $permite_emitir_nova_via_cartao, $permite_fazer_transferencia, $permite_receber_transferencia, $permite_criar_acordo_cobranca, $permite_atribuir_como_bloqueio, $permite_desbloquear, $permite_atribuir_como_cancelamento);
        return $response; 
    }


    /**
     * listarUsingGET49WithHttpInfo
     *
     * {{{status_conta_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id {{{status_conta_request_id_value}}} (optional)
     * @param string $nome {{{status_conta_request_nome_value}}} (optional)
     * @param int $permite_alterar_vencimento {{{status_conta_request_permite_alterar_vencimento_value}}} (optional)
     * @param int $permite_alterar_limite {{{status_conta_request_permite_alterar_limite_value}}} (optional)
     * @param int $permite_emitir_nova_via_cartao {{{status_conta_request_permite_emitir_nova_via_cartao_value}}} (optional)
     * @param int $permite_fazer_transferencia {{{status_conta_request_permite_fazer_transferencia_value}}} (optional)
     * @param int $permite_receber_transferencia {{{status_conta_request_permite_receber_transferencia_value}}} (optional)
     * @param int $permite_criar_acordo_cobranca {{{status_conta_request_permite_criar_acordo_cobranca_value}}} (optional)
     * @param int $permite_atribuir_como_bloqueio {{{status_conta_request_permite_atribuir_como_bloqueio_value}}} (optional)
     * @param int $permite_desbloquear {{{status_conta_request_permite_desbloquear_value}}} (optional)
     * @param int $permite_atribuir_como_cancelamento {{{status_conta_request_permite_atribuir_como_cancelamento_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageStatusContaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET49WithHttpInfo($sort = null, $page = null, $limit = null, $id = null, $nome = null, $permite_alterar_vencimento = null, $permite_alterar_limite = null, $permite_emitir_nova_via_cartao = null, $permite_fazer_transferencia = null, $permite_receber_transferencia = null, $permite_criar_acordo_cobranca = null, $permite_atribuir_como_bloqueio = null, $permite_desbloquear = null, $permite_atribuir_como_cancelamento = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/status-contas";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }// query params
        
        if ($nome !== null) {
            $queryParams['nome'] = $this->apiClient->getSerializer()->toQueryValue($nome);
        }// query params
        
        if ($permite_alterar_vencimento !== null) {
            $queryParams['permiteAlterarVencimento'] = $this->apiClient->getSerializer()->toQueryValue($permite_alterar_vencimento);
        }// query params
        
        if ($permite_alterar_limite !== null) {
            $queryParams['permiteAlterarLimite'] = $this->apiClient->getSerializer()->toQueryValue($permite_alterar_limite);
        }// query params
        
        if ($permite_emitir_nova_via_cartao !== null) {
            $queryParams['permiteEmitirNovaViaCartao'] = $this->apiClient->getSerializer()->toQueryValue($permite_emitir_nova_via_cartao);
        }// query params
        
        if ($permite_fazer_transferencia !== null) {
            $queryParams['permiteFazerTransferencia'] = $this->apiClient->getSerializer()->toQueryValue($permite_fazer_transferencia);
        }// query params
        
        if ($permite_receber_transferencia !== null) {
            $queryParams['permiteReceberTransferencia'] = $this->apiClient->getSerializer()->toQueryValue($permite_receber_transferencia);
        }// query params
        
        if ($permite_criar_acordo_cobranca !== null) {
            $queryParams['permiteCriarAcordoCobranca'] = $this->apiClient->getSerializer()->toQueryValue($permite_criar_acordo_cobranca);
        }// query params
        
        if ($permite_atribuir_como_bloqueio !== null) {
            $queryParams['permiteAtribuirComoBloqueio'] = $this->apiClient->getSerializer()->toQueryValue($permite_atribuir_como_bloqueio);
        }// query params
        
        if ($permite_desbloquear !== null) {
            $queryParams['permiteDesbloquear'] = $this->apiClient->getSerializer()->toQueryValue($permite_desbloquear);
        }// query params
        
        if ($permite_atribuir_como_cancelamento !== null) {
            $queryParams['permiteAtribuirComoCancelamento'] = $this->apiClient->getSerializer()->toQueryValue($permite_atribuir_como_cancelamento);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageStatusContaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageStatusContaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageStatusContaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET50
     *
     * {{{status_impressao_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id {{{status_impressao_request_id_value}}} (optional)
     * @param string $nome {{{status_impressao_request_nome_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageStatusImpressaoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET50($sort = null, $page = null, $limit = null, $id = null, $nome = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGET50WithHttpInfo ($sort, $page, $limit, $id, $nome);
        return $response; 
    }


    /**
     * listarUsingGET50WithHttpInfo
     *
     * {{{status_impressao_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id {{{status_impressao_request_id_value}}} (optional)
     * @param string $nome {{{status_impressao_request_nome_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageStatusImpressaoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET50WithHttpInfo($sort = null, $page = null, $limit = null, $id = null, $nome = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/status-impressoes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }// query params
        
        if ($nome !== null) {
            $queryParams['nome'] = $this->apiClient->getSerializer()->toQueryValue($nome);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageStatusImpressaoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageStatusImpressaoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageStatusImpressaoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
