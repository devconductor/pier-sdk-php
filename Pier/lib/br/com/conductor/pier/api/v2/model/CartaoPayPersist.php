<?php
/**
 * CartaoPayPersist
 *
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2.model;

use \ArrayAccess;
/**
 * CartaoPayPersist Class Doc Comment
 *
 * @category    Class
 * @description Representa\u00C3\u00A7\u00C3\u00A3o do recurso atualizar cart\u00C3\u00A3o
 * @package     br.com.conductor.pier.api.v2.invoker
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CartaoPayPersist implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'numero_cartao' => 'string',
        'data_validade' => 'string',
        'cvv' => 'string',
        'numero_receita_federal' => 'string',
        'nome_impresso' => 'string',
        'chave_publica_device' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'numero_cartao' => 'numeroCartao',
        'data_validade' => 'dataValidade',
        'cvv' => 'cvv',
        'numero_receita_federal' => 'numeroReceitaFederal',
        'nome_impresso' => 'nomeImpresso',
        'chave_publica_device' => 'chavePublicaDevice'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'numero_cartao' => 'setNumeroCartao',
        'data_validade' => 'setDataValidade',
        'cvv' => 'setCvv',
        'numero_receita_federal' => 'setNumeroReceitaFederal',
        'nome_impresso' => 'setNomeImpresso',
        'chave_publica_device' => 'setChavePublicaDevice'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'numero_cartao' => 'getNumeroCartao',
        'data_validade' => 'getDataValidade',
        'cvv' => 'getCvv',
        'numero_receita_federal' => 'getNumeroReceitaFederal',
        'nome_impresso' => 'getNomeImpresso',
        'chave_publica_device' => 'getChavePublicaDevice'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $numero_cartao N\u00C3\u00BAmero do cart\u00C3\u00A3o criptografado
      * @var string
      */
    protected $numero_cartao;
    
    /**
      * $data_validade Data de validade do cart\u00C3\u00A3o
      * @var string
      */
    protected $data_validade;
    
    /**
      * $cvv CVV do cart\u00C3\u00A3o criptografado
      * @var string
      */
    protected $cvv;
    
    /**
      * $numero_receita_federal CPF do portador do cart\u00C3\u00A3o criptografado
      * @var string
      */
    protected $numero_receita_federal;
    
    /**
      * $nome_impresso Nome impresso no cart\u00C3\u00A3o criptografado
      * @var string
      */
    protected $nome_impresso;
    
    /**
      * $chave_publica_device Chave p\u00C3\u00BAblica do dispositivo criptografada
      * @var string
      */
    protected $chave_publica_device;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->numero_cartao = $data["numero_cartao"];
            $this->data_validade = $data["data_validade"];
            $this->cvv = $data["cvv"];
            $this->numero_receita_federal = $data["numero_receita_federal"];
            $this->nome_impresso = $data["nome_impresso"];
            $this->chave_publica_device = $data["chave_publica_device"];
        }
    }
    
    /**
     * Gets numero_cartao
     * @return string
     */
    public function getNumeroCartao()
    {
        return $this->numero_cartao;
    }
  
    /**
     * Sets numero_cartao
     * @param string $numero_cartao N\u00C3\u00BAmero do cart\u00C3\u00A3o criptografado
     * @return $this
     */
    public function setNumeroCartao($numero_cartao)
    {
        
        $this->numero_cartao = $numero_cartao;
        return $this;
    }
    
    /**
     * Gets data_validade
     * @return string
     */
    public function getDataValidade()
    {
        return $this->data_validade;
    }
  
    /**
     * Sets data_validade
     * @param string $data_validade Data de validade do cart\u00C3\u00A3o
     * @return $this
     */
    public function setDataValidade($data_validade)
    {
        
        $this->data_validade = $data_validade;
        return $this;
    }
    
    /**
     * Gets cvv
     * @return string
     */
    public function getCvv()
    {
        return $this->cvv;
    }
  
    /**
     * Sets cvv
     * @param string $cvv CVV do cart\u00C3\u00A3o criptografado
     * @return $this
     */
    public function setCvv($cvv)
    {
        
        $this->cvv = $cvv;
        return $this;
    }
    
    /**
     * Gets numero_receita_federal
     * @return string
     */
    public function getNumeroReceitaFederal()
    {
        return $this->numero_receita_federal;
    }
  
    /**
     * Sets numero_receita_federal
     * @param string $numero_receita_federal CPF do portador do cart\u00C3\u00A3o criptografado
     * @return $this
     */
    public function setNumeroReceitaFederal($numero_receita_federal)
    {
        
        $this->numero_receita_federal = $numero_receita_federal;
        return $this;
    }
    
    /**
     * Gets nome_impresso
     * @return string
     */
    public function getNomeImpresso()
    {
        return $this->nome_impresso;
    }
  
    /**
     * Sets nome_impresso
     * @param string $nome_impresso Nome impresso no cart\u00C3\u00A3o criptografado
     * @return $this
     */
    public function setNomeImpresso($nome_impresso)
    {
        
        $this->nome_impresso = $nome_impresso;
        return $this;
    }
    
    /**
     * Gets chave_publica_device
     * @return string
     */
    public function getChavePublicaDevice()
    {
        return $this->chave_publica_device;
    }
  
    /**
     * Sets chave_publica_device
     * @param string $chave_publica_device Chave p\u00C3\u00BAblica do dispositivo criptografada
     * @return $this
     */
    public function setChavePublicaDevice($chave_publica_device)
    {
        
        $this->chave_publica_device = $chave_publica_device;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
