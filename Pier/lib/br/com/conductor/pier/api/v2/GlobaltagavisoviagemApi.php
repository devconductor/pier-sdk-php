<?php
/**
 * GlobaltagavisoviagemApi
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2;

use \br.com.conductor.pier.api.v2.invoker\Configuration;
use \br.com.conductor.pier.api.v2.invoker\ApiClient;
use \br.com.conductor.pier.api.v2.invoker\ApiException;
use \br.com.conductor.pier.api.v2.invoker\ObjectSerializer;

/**
 * GlobaltagavisoviagemApi Class Doc Comment
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GlobaltagavisoviagemApi
{

    /**
     * API Client
     * @var \br.com.conductor.pier.api.v2.invoker\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://localhost/');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \br.com.conductor.pier.api.v2.invoker\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient $apiClient set the API client
     * @return GlobaltagavisoviagemApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * consultarUsingGET8
     *
     * {{{aviso_viagem_resource_consultar}}}
     *
     * @param int $id {{{aviso_viagem_resource_consultar_param_id}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\AvisoViagemResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET8($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarUsingGET8WithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarUsingGET8WithHttpInfo
     *
     * {{{aviso_viagem_resource_consultar}}}
     *
     * @param int $id {{{aviso_viagem_resource_consultar_param_id}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\AvisoViagemResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET8WithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarUsingGET8');
        }
  
        // parse inputs
        $resourcePath = "/api/avisos-viagens/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\AvisoViagemResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\AvisoViagemResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\AvisoViagemResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * desabilitarUsingPOST
     *
     * {{{aviso_viagem_resource_desabilitar}}}
     *
     * @param int $id {{{aviso_viagem_resource_desabilitar_param_id}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\AvisoViagemResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function desabilitarUsingPOST($id)
    {
        list($response, $statusCode, $httpHeader) = $this->desabilitarUsingPOSTWithHttpInfo ($id);
        return $response; 
    }


    /**
     * desabilitarUsingPOSTWithHttpInfo
     *
     * {{{aviso_viagem_resource_desabilitar}}}
     *
     * @param int $id {{{aviso_viagem_resource_desabilitar_param_id}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\AvisoViagemResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function desabilitarUsingPOSTWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling desabilitarUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/avisos-viagens/{id}/desabilitar";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\AvisoViagemResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\AvisoViagemResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\AvisoViagemResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * habilitarUsingPOST
     *
     * {{{aviso_viagem_resource_habilitar}}}
     *
     * @param int $id {{{aviso_viagem_resource_habilitar_param_id}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\AvisoViagemResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function habilitarUsingPOST($id)
    {
        list($response, $statusCode, $httpHeader) = $this->habilitarUsingPOSTWithHttpInfo ($id);
        return $response; 
    }


    /**
     * habilitarUsingPOSTWithHttpInfo
     *
     * {{{aviso_viagem_resource_habilitar}}}
     *
     * @param int $id {{{aviso_viagem_resource_habilitar_param_id}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\AvisoViagemResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function habilitarUsingPOSTWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling habilitarUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/avisos-viagens/{id}/habilitar";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\AvisoViagemResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\AvisoViagemResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\AvisoViagemResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET9
     *
     * {{{aviso_viagem_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_cartao {{{aviso_viagem_request_id_cartao_value}}} (optional)
     * @param string $codigo_pais {{{aviso_viagem_request_codigo_pais_value}}} (optional)
     * @param string $data_inicio {{{aviso_viagem_request_data_inicio_value}}} (optional)
     * @param string $data_fim {{{aviso_viagem_request_data_fim_value}}} (optional)
     * @param int $flag_ativo {{{aviso_viagem_request_flag_ativo_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageAvisoViagemResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET9($sort = null, $page = null, $limit = null, $id_cartao = null, $codigo_pais = null, $data_inicio = null, $data_fim = null, $flag_ativo = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGET9WithHttpInfo ($sort, $page, $limit, $id_cartao, $codigo_pais, $data_inicio, $data_fim, $flag_ativo);
        return $response; 
    }


    /**
     * listarUsingGET9WithHttpInfo
     *
     * {{{aviso_viagem_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_cartao {{{aviso_viagem_request_id_cartao_value}}} (optional)
     * @param string $codigo_pais {{{aviso_viagem_request_codigo_pais_value}}} (optional)
     * @param string $data_inicio {{{aviso_viagem_request_data_inicio_value}}} (optional)
     * @param string $data_fim {{{aviso_viagem_request_data_fim_value}}} (optional)
     * @param int $flag_ativo {{{aviso_viagem_request_flag_ativo_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageAvisoViagemResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET9WithHttpInfo($sort = null, $page = null, $limit = null, $id_cartao = null, $codigo_pais = null, $data_inicio = null, $data_fim = null, $flag_ativo = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/avisos-viagens";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id_cartao !== null) {
            $queryParams['idCartao'] = $this->apiClient->getSerializer()->toQueryValue($id_cartao);
        }// query params
        
        if ($codigo_pais !== null) {
            $queryParams['codigoPais'] = $this->apiClient->getSerializer()->toQueryValue($codigo_pais);
        }// query params
        
        if ($data_inicio !== null) {
            $queryParams['dataInicio'] = $this->apiClient->getSerializer()->toQueryValue($data_inicio);
        }// query params
        
        if ($data_fim !== null) {
            $queryParams['dataFim'] = $this->apiClient->getSerializer()->toQueryValue($data_fim);
        }// query params
        
        if ($flag_ativo !== null) {
            $queryParams['flagAtivo'] = $this->apiClient->getSerializer()->toQueryValue($flag_ativo);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageAvisoViagemResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageAvisoViagemResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageAvisoViagemResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * salvarUsingPOST3
     *
     * {{{aviso_viagem_resource_salvar}}}
     *
     * @param int $id_cartao {{{aviso_viagem_persist_id_cartao_value}}} (required)
     * @param string $codigo_pais {{{aviso_viagem_persist_codigo_pais_value}}} (required)
     * @param string $data_inicio {{{aviso_viagem_persist_data_inicio_value}}} (required)
     * @param string $data_fim {{{aviso_viagem_persist_data_fim_value}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\AvisoViagemResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST3($id_cartao, $codigo_pais, $data_inicio, $data_fim)
    {
        list($response, $statusCode, $httpHeader) = $this->salvarUsingPOST3WithHttpInfo ($id_cartao, $codigo_pais, $data_inicio, $data_fim);
        return $response; 
    }


    /**
     * salvarUsingPOST3WithHttpInfo
     *
     * {{{aviso_viagem_resource_salvar}}}
     *
     * @param int $id_cartao {{{aviso_viagem_persist_id_cartao_value}}} (required)
     * @param string $codigo_pais {{{aviso_viagem_persist_codigo_pais_value}}} (required)
     * @param string $data_inicio {{{aviso_viagem_persist_data_inicio_value}}} (required)
     * @param string $data_fim {{{aviso_viagem_persist_data_fim_value}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\AvisoViagemResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST3WithHttpInfo($id_cartao, $codigo_pais, $data_inicio, $data_fim)
    {
        
        // verify the required parameter 'id_cartao' is set
        if ($id_cartao === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_cartao when calling salvarUsingPOST3');
        }
        // verify the required parameter 'codigo_pais' is set
        if ($codigo_pais === null) {
            throw new \InvalidArgumentException('Missing the required parameter $codigo_pais when calling salvarUsingPOST3');
        }
        // verify the required parameter 'data_inicio' is set
        if ($data_inicio === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data_inicio when calling salvarUsingPOST3');
        }
        // verify the required parameter 'data_fim' is set
        if ($data_fim === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data_fim when calling salvarUsingPOST3');
        }
  
        // parse inputs
        $resourcePath = "/api/avisos-viagens";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($id_cartao !== null) {
            $queryParams['idCartao'] = $this->apiClient->getSerializer()->toQueryValue($id_cartao);
        }// query params
        
        if ($codigo_pais !== null) {
            $queryParams['codigoPais'] = $this->apiClient->getSerializer()->toQueryValue($codigo_pais);
        }// query params
        
        if ($data_inicio !== null) {
            $queryParams['dataInicio'] = $this->apiClient->getSerializer()->toQueryValue($data_inicio);
        }// query params
        
        if ($data_fim !== null) {
            $queryParams['dataFim'] = $this->apiClient->getSerializer()->toQueryValue($data_fim);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\AvisoViagemResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\AvisoViagemResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\AvisoViagemResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
