<?php
/**
 * BaseResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2.model;

use \ArrayAccess;
/**
 * BaseResponse Class Doc Comment
 *
 * @category    Class
 * @description {{{base_response_description}}}
 * @package     br.com.conductor.pier.api.v2.invoker
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BaseResponse implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'servidor' => 'string',
        'usuario' => 'string',
        'nome_base' => 'string',
        'domain' => 'string',
        'senha_criptografada' => 'bool',
        'nome_base_controle_acesso' => 'string',
        'id_emissor' => 'int',
        'servidor_controle_acesso' => 'string',
        'nome_base_usuarios' => 'string',
        'servidor_usuarios' => 'string',
        'flag_cluster' => 'bool'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'servidor' => 'servidor',
        'usuario' => 'usuario',
        'nome_base' => 'nomeBase',
        'domain' => 'domain',
        'senha_criptografada' => 'senhaCriptografada',
        'nome_base_controle_acesso' => 'nomeBaseControleAcesso',
        'id_emissor' => 'idEmissor',
        'servidor_controle_acesso' => 'servidorControleAcesso',
        'nome_base_usuarios' => 'nomeBaseUsuarios',
        'servidor_usuarios' => 'servidorUsuarios',
        'flag_cluster' => 'flagCluster'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'servidor' => 'setServidor',
        'usuario' => 'setUsuario',
        'nome_base' => 'setNomeBase',
        'domain' => 'setDomain',
        'senha_criptografada' => 'setSenhaCriptografada',
        'nome_base_controle_acesso' => 'setNomeBaseControleAcesso',
        'id_emissor' => 'setIdEmissor',
        'servidor_controle_acesso' => 'setServidorControleAcesso',
        'nome_base_usuarios' => 'setNomeBaseUsuarios',
        'servidor_usuarios' => 'setServidorUsuarios',
        'flag_cluster' => 'setFlagCluster'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'servidor' => 'getServidor',
        'usuario' => 'getUsuario',
        'nome_base' => 'getNomeBase',
        'domain' => 'getDomain',
        'senha_criptografada' => 'getSenhaCriptografada',
        'nome_base_controle_acesso' => 'getNomeBaseControleAcesso',
        'id_emissor' => 'getIdEmissor',
        'servidor_controle_acesso' => 'getServidorControleAcesso',
        'nome_base_usuarios' => 'getNomeBaseUsuarios',
        'servidor_usuarios' => 'getServidorUsuarios',
        'flag_cluster' => 'getFlagCluster'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id {{{base_dto_id_value}}}
      * @var int
      */
    protected $id;
    
    /**
      * $servidor {{{base_dto_servidor_value}}}
      * @var string
      */
    protected $servidor;
    
    /**
      * $usuario {{{base_dto_usuario_value}}}
      * @var string
      */
    protected $usuario;
    
    /**
      * $nome_base {{{base_dto_nome_base_value}}}
      * @var string
      */
    protected $nome_base;
    
    /**
      * $domain {{{base_dto_domain_value}}}
      * @var string
      */
    protected $domain;
    
    /**
      * $senha_criptografada {{{base_dto_senha_criptografada_value}}}
      * @var bool
      */
    protected $senha_criptografada;
    
    /**
      * $nome_base_controle_acesso {{{base_dto_nome_base_controle_acesso_value}}}
      * @var string
      */
    protected $nome_base_controle_acesso;
    
    /**
      * $id_emissor {{{base_dto_id_emissor_value}}}
      * @var int
      */
    protected $id_emissor;
    
    /**
      * $servidor_controle_acesso {{{base_dto_servidor_controle_acesso_value}}}
      * @var string
      */
    protected $servidor_controle_acesso;
    
    /**
      * $nome_base_usuarios {{{base_dto_nome_base_usuarios_value}}}
      * @var string
      */
    protected $nome_base_usuarios;
    
    /**
      * $servidor_usuarios {{{base_dto_servidor_usuarios_value}}}
      * @var string
      */
    protected $servidor_usuarios;
    
    /**
      * $flag_cluster {{{base_dto_flag_cluster_value}}}
      * @var bool
      */
    protected $flag_cluster;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->servidor = $data["servidor"];
            $this->usuario = $data["usuario"];
            $this->nome_base = $data["nome_base"];
            $this->domain = $data["domain"];
            $this->senha_criptografada = $data["senha_criptografada"];
            $this->nome_base_controle_acesso = $data["nome_base_controle_acesso"];
            $this->id_emissor = $data["id_emissor"];
            $this->servidor_controle_acesso = $data["servidor_controle_acesso"];
            $this->nome_base_usuarios = $data["nome_base_usuarios"];
            $this->servidor_usuarios = $data["servidor_usuarios"];
            $this->flag_cluster = $data["flag_cluster"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id {{{base_dto_id_value}}}
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets servidor
     * @return string
     */
    public function getServidor()
    {
        return $this->servidor;
    }
  
    /**
     * Sets servidor
     * @param string $servidor {{{base_dto_servidor_value}}}
     * @return $this
     */
    public function setServidor($servidor)
    {
        
        $this->servidor = $servidor;
        return $this;
    }
    
    /**
     * Gets usuario
     * @return string
     */
    public function getUsuario()
    {
        return $this->usuario;
    }
  
    /**
     * Sets usuario
     * @param string $usuario {{{base_dto_usuario_value}}}
     * @return $this
     */
    public function setUsuario($usuario)
    {
        
        $this->usuario = $usuario;
        return $this;
    }
    
    /**
     * Gets nome_base
     * @return string
     */
    public function getNomeBase()
    {
        return $this->nome_base;
    }
  
    /**
     * Sets nome_base
     * @param string $nome_base {{{base_dto_nome_base_value}}}
     * @return $this
     */
    public function setNomeBase($nome_base)
    {
        
        $this->nome_base = $nome_base;
        return $this;
    }
    
    /**
     * Gets domain
     * @return string
     */
    public function getDomain()
    {
        return $this->domain;
    }
  
    /**
     * Sets domain
     * @param string $domain {{{base_dto_domain_value}}}
     * @return $this
     */
    public function setDomain($domain)
    {
        
        $this->domain = $domain;
        return $this;
    }
    
    /**
     * Gets senha_criptografada
     * @return bool
     */
    public function getSenhaCriptografada()
    {
        return $this->senha_criptografada;
    }
  
    /**
     * Sets senha_criptografada
     * @param bool $senha_criptografada {{{base_dto_senha_criptografada_value}}}
     * @return $this
     */
    public function setSenhaCriptografada($senha_criptografada)
    {
        
        $this->senha_criptografada = $senha_criptografada;
        return $this;
    }
    
    /**
     * Gets nome_base_controle_acesso
     * @return string
     */
    public function getNomeBaseControleAcesso()
    {
        return $this->nome_base_controle_acesso;
    }
  
    /**
     * Sets nome_base_controle_acesso
     * @param string $nome_base_controle_acesso {{{base_dto_nome_base_controle_acesso_value}}}
     * @return $this
     */
    public function setNomeBaseControleAcesso($nome_base_controle_acesso)
    {
        
        $this->nome_base_controle_acesso = $nome_base_controle_acesso;
        return $this;
    }
    
    /**
     * Gets id_emissor
     * @return int
     */
    public function getIdEmissor()
    {
        return $this->id_emissor;
    }
  
    /**
     * Sets id_emissor
     * @param int $id_emissor {{{base_dto_id_emissor_value}}}
     * @return $this
     */
    public function setIdEmissor($id_emissor)
    {
        
        $this->id_emissor = $id_emissor;
        return $this;
    }
    
    /**
     * Gets servidor_controle_acesso
     * @return string
     */
    public function getServidorControleAcesso()
    {
        return $this->servidor_controle_acesso;
    }
  
    /**
     * Sets servidor_controle_acesso
     * @param string $servidor_controle_acesso {{{base_dto_servidor_controle_acesso_value}}}
     * @return $this
     */
    public function setServidorControleAcesso($servidor_controle_acesso)
    {
        
        $this->servidor_controle_acesso = $servidor_controle_acesso;
        return $this;
    }
    
    /**
     * Gets nome_base_usuarios
     * @return string
     */
    public function getNomeBaseUsuarios()
    {
        return $this->nome_base_usuarios;
    }
  
    /**
     * Sets nome_base_usuarios
     * @param string $nome_base_usuarios {{{base_dto_nome_base_usuarios_value}}}
     * @return $this
     */
    public function setNomeBaseUsuarios($nome_base_usuarios)
    {
        
        $this->nome_base_usuarios = $nome_base_usuarios;
        return $this;
    }
    
    /**
     * Gets servidor_usuarios
     * @return string
     */
    public function getServidorUsuarios()
    {
        return $this->servidor_usuarios;
    }
  
    /**
     * Sets servidor_usuarios
     * @param string $servidor_usuarios {{{base_dto_servidor_usuarios_value}}}
     * @return $this
     */
    public function setServidorUsuarios($servidor_usuarios)
    {
        
        $this->servidor_usuarios = $servidor_usuarios;
        return $this;
    }
    
    /**
     * Gets flag_cluster
     * @return bool
     */
    public function getFlagCluster()
    {
        return $this->flag_cluster;
    }
  
    /**
     * Sets flag_cluster
     * @param bool $flag_cluster {{{base_dto_flag_cluster_value}}}
     * @return $this
     */
    public function setFlagCluster($flag_cluster)
    {
        
        $this->flag_cluster = $flag_cluster;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
