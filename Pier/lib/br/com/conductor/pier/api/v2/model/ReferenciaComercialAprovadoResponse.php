<?php
/**
 * ReferenciaComercialAprovadoResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2.model;

use \ArrayAccess;
/**
 * ReferenciaComercialAprovadoResponse Class Doc Comment
 *
 * @category    Class
 * @description ReferenciaComercialAprovadoResponse
 * @package     br.com.conductor.pier.api.v2.invoker
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ReferenciaComercialAprovadoResponse implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'razao_social' => 'string',
        'nome_contrato' => 'string',
        'ddd' => 'string',
        'telefone' => 'string',
        'email' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'razao_social' => 'razaoSocial',
        'nome_contrato' => 'nomeContrato',
        'ddd' => 'ddd',
        'telefone' => 'telefone',
        'email' => 'email'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'razao_social' => 'setRazaoSocial',
        'nome_contrato' => 'setNomeContrato',
        'ddd' => 'setDdd',
        'telefone' => 'setTelefone',
        'email' => 'setEmail'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'razao_social' => 'getRazaoSocial',
        'nome_contrato' => 'getNomeContrato',
        'ddd' => 'getDdd',
        'telefone' => 'getTelefone',
        'email' => 'getEmail'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $razao_social Apresenta o nome completo da raz\u00C3\u00A3o social da refer\u00C3\u00AAncia comercial (nome empresarial)
      * @var string
      */
    protected $razao_social;
    
    /**
      * $nome_contrato Apresenta o nome do respons\u00C3\u00A1vel pela refer\u00C3\u00AAncia comercial
      * @var string
      */
    protected $nome_contrato;
    
    /**
      * $ddd Apresenta o DDD do n\u00C3\u00BAmero de contato da refer\u00C3\u00AAncia comercial
      * @var string
      */
    protected $ddd;
    
    /**
      * $telefone Apresenta o n\u00C3\u00BAmero de contato da refer\u00C3\u00AAncia comercial
      * @var string
      */
    protected $telefone;
    
    /**
      * $email Apresenta o e-mail de contato da refer\u00C3\u00AAncia comercial
      * @var string
      */
    protected $email;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->razao_social = $data["razao_social"];
            $this->nome_contrato = $data["nome_contrato"];
            $this->ddd = $data["ddd"];
            $this->telefone = $data["telefone"];
            $this->email = $data["email"];
        }
    }
    
    /**
     * Gets razao_social
     * @return string
     */
    public function getRazaoSocial()
    {
        return $this->razao_social;
    }
  
    /**
     * Sets razao_social
     * @param string $razao_social Apresenta o nome completo da raz\u00C3\u00A3o social da refer\u00C3\u00AAncia comercial (nome empresarial)
     * @return $this
     */
    public function setRazaoSocial($razao_social)
    {
        
        $this->razao_social = $razao_social;
        return $this;
    }
    
    /**
     * Gets nome_contrato
     * @return string
     */
    public function getNomeContrato()
    {
        return $this->nome_contrato;
    }
  
    /**
     * Sets nome_contrato
     * @param string $nome_contrato Apresenta o nome do respons\u00C3\u00A1vel pela refer\u00C3\u00AAncia comercial
     * @return $this
     */
    public function setNomeContrato($nome_contrato)
    {
        
        $this->nome_contrato = $nome_contrato;
        return $this;
    }
    
    /**
     * Gets ddd
     * @return string
     */
    public function getDdd()
    {
        return $this->ddd;
    }
  
    /**
     * Sets ddd
     * @param string $ddd Apresenta o DDD do n\u00C3\u00BAmero de contato da refer\u00C3\u00AAncia comercial
     * @return $this
     */
    public function setDdd($ddd)
    {
        
        $this->ddd = $ddd;
        return $this;
    }
    
    /**
     * Gets telefone
     * @return string
     */
    public function getTelefone()
    {
        return $this->telefone;
    }
  
    /**
     * Sets telefone
     * @param string $telefone Apresenta o n\u00C3\u00BAmero de contato da refer\u00C3\u00AAncia comercial
     * @return $this
     */
    public function setTelefone($telefone)
    {
        
        $this->telefone = $telefone;
        return $this;
    }
    
    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }
  
    /**
     * Sets email
     * @param string $email Apresenta o e-mail de contato da refer\u00C3\u00AAncia comercial
     * @return $this
     */
    public function setEmail($email)
    {
        
        $this->email = $email;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
