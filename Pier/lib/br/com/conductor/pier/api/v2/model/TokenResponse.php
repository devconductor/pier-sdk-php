<?php
/**
 * TokenResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2.model;

use \ArrayAccess;
/**
 * TokenResponse Class Doc Comment
 *
 * @category    Class
 * @description {{{token_response_description}}}
 * @package     br.com.conductor.pier.api.v2.invoker
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TokenResponse implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'base' => 'int',
        'owner' => 'string',
        'status' => 'string',
        'criado_por' => 'string',
        'data_criacao' => 'string',
        'alterado_por' => 'string',
        'data_modificacao' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'base' => 'base',
        'owner' => 'owner',
        'status' => 'status',
        'criado_por' => 'criadoPor',
        'data_criacao' => 'dataCriacao',
        'alterado_por' => 'alteradoPor',
        'data_modificacao' => 'dataModificacao'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'base' => 'setBase',
        'owner' => 'setOwner',
        'status' => 'setStatus',
        'criado_por' => 'setCriadoPor',
        'data_criacao' => 'setDataCriacao',
        'alterado_por' => 'setAlteradoPor',
        'data_modificacao' => 'setDataModificacao'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'base' => 'getBase',
        'owner' => 'getOwner',
        'status' => 'getStatus',
        'criado_por' => 'getCriadoPor',
        'data_criacao' => 'getDataCriacao',
        'alterado_por' => 'getAlteradoPor',
        'data_modificacao' => 'getDataModificacao'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id {{{token_dto_id_value}}}
      * @var int
      */
    protected $id;
    
    /**
      * $base {{{token_dto_base_value}}}
      * @var int
      */
    protected $base;
    
    /**
      * $owner {{{token_dto_owner_value}}}
      * @var string
      */
    protected $owner;
    
    /**
      * $status {{{token_dto_status_value}}}
      * @var string
      */
    protected $status;
    
    /**
      * $criado_por {{{token_dto_criado_por_value}}}
      * @var string
      */
    protected $criado_por;
    
    /**
      * $data_criacao {{{token_dto_data_criacao_value}}}
      * @var string
      */
    protected $data_criacao;
    
    /**
      * $alterado_por {{{token_dto_alterado_por_value}}}
      * @var string
      */
    protected $alterado_por;
    
    /**
      * $data_modificacao {{{token_dto_data_modificacao_value}}}
      * @var string
      */
    protected $data_modificacao;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->base = $data["base"];
            $this->owner = $data["owner"];
            $this->status = $data["status"];
            $this->criado_por = $data["criado_por"];
            $this->data_criacao = $data["data_criacao"];
            $this->alterado_por = $data["alterado_por"];
            $this->data_modificacao = $data["data_modificacao"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id {{{token_dto_id_value}}}
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets base
     * @return int
     */
    public function getBase()
    {
        return $this->base;
    }
  
    /**
     * Sets base
     * @param int $base {{{token_dto_base_value}}}
     * @return $this
     */
    public function setBase($base)
    {
        
        $this->base = $base;
        return $this;
    }
    
    /**
     * Gets owner
     * @return string
     */
    public function getOwner()
    {
        return $this->owner;
    }
  
    /**
     * Sets owner
     * @param string $owner {{{token_dto_owner_value}}}
     * @return $this
     */
    public function setOwner($owner)
    {
        
        $this->owner = $owner;
        return $this;
    }
    
    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }
  
    /**
     * Sets status
     * @param string $status {{{token_dto_status_value}}}
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array("ACTIVE", "REVOKED", "DELETED");
        if (!in_array($status, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'ACTIVE', 'REVOKED', 'DELETED'");
        }
        $this->status = $status;
        return $this;
    }
    
    /**
     * Gets criado_por
     * @return string
     */
    public function getCriadoPor()
    {
        return $this->criado_por;
    }
  
    /**
     * Sets criado_por
     * @param string $criado_por {{{token_dto_criado_por_value}}}
     * @return $this
     */
    public function setCriadoPor($criado_por)
    {
        
        $this->criado_por = $criado_por;
        return $this;
    }
    
    /**
     * Gets data_criacao
     * @return string
     */
    public function getDataCriacao()
    {
        return $this->data_criacao;
    }
  
    /**
     * Sets data_criacao
     * @param string $data_criacao {{{token_dto_data_criacao_value}}}
     * @return $this
     */
    public function setDataCriacao($data_criacao)
    {
        
        $this->data_criacao = $data_criacao;
        return $this;
    }
    
    /**
     * Gets alterado_por
     * @return string
     */
    public function getAlteradoPor()
    {
        return $this->alterado_por;
    }
  
    /**
     * Sets alterado_por
     * @param string $alterado_por {{{token_dto_alterado_por_value}}}
     * @return $this
     */
    public function setAlteradoPor($alterado_por)
    {
        
        $this->alterado_por = $alterado_por;
        return $this;
    }
    
    /**
     * Gets data_modificacao
     * @return string
     */
    public function getDataModificacao()
    {
        return $this->data_modificacao;
    }
  
    /**
     * Sets data_modificacao
     * @param string $data_modificacao {{{token_dto_data_modificacao_value}}}
     * @return $this
     */
    public function setDataModificacao($data_modificacao)
    {
        
        $this->data_modificacao = $data_modificacao;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
