<?php
/**
 * BinchaveresourceApi
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2;

use \br.com.conductor.pier.api.v2.invoker\Configuration;
use \br.com.conductor.pier.api.v2.invoker\ApiClient;
use \br.com.conductor.pier.api.v2.invoker\ApiException;
use \br.com.conductor.pier.api.v2.invoker\ObjectSerializer;

/**
 * BinchaveresourceApi Class Doc Comment
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BinchaveresourceApi
{

    /**
     * API Client
     * @var \br.com.conductor.pier.api.v2.invoker\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://localhost/');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \br.com.conductor.pier.api.v2.invoker\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient $apiClient set the API client
     * @return BinchaveresourceApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * alterarBinChaveUsingPUT
     *
     * alterarBinChave
     *
     * @param int $id id (required)
     * @param \br.com.conductor.pier.api.v2.model\BinChaveUpdate $request request (required)
     * @param string $login login (required)
     * @return object
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarBinChaveUsingPUT($id, $request, $login)
    {
        list($response, $statusCode, $httpHeader) = $this->alterarBinChaveUsingPUTWithHttpInfo ($id, $request, $login);
        return $response; 
    }


    /**
     * alterarBinChaveUsingPUTWithHttpInfo
     *
     * alterarBinChave
     *
     * @param int $id id (required)
     * @param \br.com.conductor.pier.api.v2.model\BinChaveUpdate $request request (required)
     * @param string $login login (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarBinChaveUsingPUTWithHttpInfo($id, $request, $login)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling alterarBinChaveUsingPUT');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling alterarBinChaveUsingPUT');
        }
        // verify the required parameter 'login' is set
        if ($login === null) {
            throw new \InvalidArgumentException('Missing the required parameter $login when calling alterarBinChaveUsingPUT');
        }
  
        // parse inputs
        $resourcePath = "/api/bins-chaves/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        // header params
        
        if ($login !== null) {
            $headerParams['login'] = $this->apiClient->getSerializer()->toHeaderValue($login);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, 'object'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarUsingGET10
     *
     * consultar
     *
     * @param int $id id (required)
     * @return object
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET10($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarUsingGET10WithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarUsingGET10WithHttpInfo
     *
     * consultar
     *
     * @param int $id id (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET10WithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarUsingGET10');
        }
  
        // parse inputs
        $resourcePath = "/api/bins-chaves/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, 'object'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarBinChaveUsingGET
     *
     * listarBinChave
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id  (optional)
     * @param int $id_tipo_chave  (optional)
     * @param int $id_bin  (optional)
     * @param string $chave  (optional)
     * @param string $check_value  (optional)
     * @param string $validade  (optional)
     * @param bool $flag_descriptografado  (optional)
     * @param string $label  (optional)
     * @return object
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarBinChaveUsingGET($sort = null, $page = null, $limit = null, $id = null, $id_tipo_chave = null, $id_bin = null, $chave = null, $check_value = null, $validade = null, $flag_descriptografado = null, $label = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarBinChaveUsingGETWithHttpInfo ($sort, $page, $limit, $id, $id_tipo_chave, $id_bin, $chave, $check_value, $validade, $flag_descriptografado, $label);
        return $response; 
    }


    /**
     * listarBinChaveUsingGETWithHttpInfo
     *
     * listarBinChave
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id  (optional)
     * @param int $id_tipo_chave  (optional)
     * @param int $id_bin  (optional)
     * @param string $chave  (optional)
     * @param string $check_value  (optional)
     * @param string $validade  (optional)
     * @param bool $flag_descriptografado  (optional)
     * @param string $label  (optional)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarBinChaveUsingGETWithHttpInfo($sort = null, $page = null, $limit = null, $id = null, $id_tipo_chave = null, $id_bin = null, $chave = null, $check_value = null, $validade = null, $flag_descriptografado = null, $label = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/bins-chaves";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }// query params
        
        if ($id_tipo_chave !== null) {
            $queryParams['idTipoChave'] = $this->apiClient->getSerializer()->toQueryValue($id_tipo_chave);
        }// query params
        
        if ($id_bin !== null) {
            $queryParams['idBin'] = $this->apiClient->getSerializer()->toQueryValue($id_bin);
        }// query params
        
        if ($chave !== null) {
            $queryParams['chave'] = $this->apiClient->getSerializer()->toQueryValue($chave);
        }// query params
        
        if ($check_value !== null) {
            $queryParams['checkValue'] = $this->apiClient->getSerializer()->toQueryValue($check_value);
        }// query params
        
        if ($validade !== null) {
            $queryParams['validade'] = $this->apiClient->getSerializer()->toQueryValue($validade);
        }// query params
        
        if ($flag_descriptografado !== null) {
            $queryParams['flagDescriptografado'] = $this->apiClient->getSerializer()->toQueryValue($flag_descriptografado);
        }// query params
        
        if ($label !== null) {
            $queryParams['label'] = $this->apiClient->getSerializer()->toQueryValue($label);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, 'object'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * salvarUsingPOST4
     *
     * salvar
     *
     * @param \br.com.conductor.pier.api.v2.model\BinChavePersist $bin_chave_persist binChavePersist (required)
     * @param string $login login (required)
     * @return object
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST4($bin_chave_persist, $login)
    {
        list($response, $statusCode, $httpHeader) = $this->salvarUsingPOST4WithHttpInfo ($bin_chave_persist, $login);
        return $response; 
    }


    /**
     * salvarUsingPOST4WithHttpInfo
     *
     * salvar
     *
     * @param \br.com.conductor.pier.api.v2.model\BinChavePersist $bin_chave_persist binChavePersist (required)
     * @param string $login login (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST4WithHttpInfo($bin_chave_persist, $login)
    {
        
        // verify the required parameter 'bin_chave_persist' is set
        if ($bin_chave_persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bin_chave_persist when calling salvarUsingPOST4');
        }
        // verify the required parameter 'login' is set
        if ($login === null) {
            throw new \InvalidArgumentException('Missing the required parameter $login when calling salvarUsingPOST4');
        }
  
        // parse inputs
        $resourcePath = "/api/bins-chaves";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        // header params
        
        if ($login !== null) {
            $headerParams['login'] = $this->apiClient->getSerializer()->toHeaderValue($login);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($bin_chave_persist)) {
            $_tempBody = $bin_chave_persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'object'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
