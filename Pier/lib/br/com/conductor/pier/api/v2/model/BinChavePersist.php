<?php
/**
 * BinChavePersist
 *
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2.model;

use \ArrayAccess;
/**
 * BinChavePersist Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     br.com.conductor.pier.api.v2.invoker
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BinChavePersist implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'chave' => 'string',
        'check_value' => 'string',
        'flag_descriptografado' => 'bool',
        'id_bin' => 'int',
        'id_tipo_chave' => 'int',
        'label' => 'string',
        'validade' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'chave' => 'chave',
        'check_value' => 'checkValue',
        'flag_descriptografado' => 'flagDescriptografado',
        'id_bin' => 'idBin',
        'id_tipo_chave' => 'idTipoChave',
        'label' => 'label',
        'validade' => 'validade'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'chave' => 'setChave',
        'check_value' => 'setCheckValue',
        'flag_descriptografado' => 'setFlagDescriptografado',
        'id_bin' => 'setIdBin',
        'id_tipo_chave' => 'setIdTipoChave',
        'label' => 'setLabel',
        'validade' => 'setValidade'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'chave' => 'getChave',
        'check_value' => 'getCheckValue',
        'flag_descriptografado' => 'getFlagDescriptografado',
        'id_bin' => 'getIdBin',
        'id_tipo_chave' => 'getIdTipoChave',
        'label' => 'getLabel',
        'validade' => 'getValidade'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $chave 
      * @var string
      */
    protected $chave;
    
    /**
      * $check_value 
      * @var string
      */
    protected $check_value;
    
    /**
      * $flag_descriptografado 
      * @var bool
      */
    protected $flag_descriptografado;
    
    /**
      * $id_bin 
      * @var int
      */
    protected $id_bin;
    
    /**
      * $id_tipo_chave 
      * @var int
      */
    protected $id_tipo_chave;
    
    /**
      * $label 
      * @var string
      */
    protected $label;
    
    /**
      * $validade 
      * @var string
      */
    protected $validade;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->chave = $data["chave"];
            $this->check_value = $data["check_value"];
            $this->flag_descriptografado = $data["flag_descriptografado"];
            $this->id_bin = $data["id_bin"];
            $this->id_tipo_chave = $data["id_tipo_chave"];
            $this->label = $data["label"];
            $this->validade = $data["validade"];
        }
    }
    
    /**
     * Gets chave
     * @return string
     */
    public function getChave()
    {
        return $this->chave;
    }
  
    /**
     * Sets chave
     * @param string $chave 
     * @return $this
     */
    public function setChave($chave)
    {
        
        $this->chave = $chave;
        return $this;
    }
    
    /**
     * Gets check_value
     * @return string
     */
    public function getCheckValue()
    {
        return $this->check_value;
    }
  
    /**
     * Sets check_value
     * @param string $check_value 
     * @return $this
     */
    public function setCheckValue($check_value)
    {
        
        $this->check_value = $check_value;
        return $this;
    }
    
    /**
     * Gets flag_descriptografado
     * @return bool
     */
    public function getFlagDescriptografado()
    {
        return $this->flag_descriptografado;
    }
  
    /**
     * Sets flag_descriptografado
     * @param bool $flag_descriptografado 
     * @return $this
     */
    public function setFlagDescriptografado($flag_descriptografado)
    {
        
        $this->flag_descriptografado = $flag_descriptografado;
        return $this;
    }
    
    /**
     * Gets id_bin
     * @return int
     */
    public function getIdBin()
    {
        return $this->id_bin;
    }
  
    /**
     * Sets id_bin
     * @param int $id_bin 
     * @return $this
     */
    public function setIdBin($id_bin)
    {
        
        $this->id_bin = $id_bin;
        return $this;
    }
    
    /**
     * Gets id_tipo_chave
     * @return int
     */
    public function getIdTipoChave()
    {
        return $this->id_tipo_chave;
    }
  
    /**
     * Sets id_tipo_chave
     * @param int $id_tipo_chave 
     * @return $this
     */
    public function setIdTipoChave($id_tipo_chave)
    {
        
        $this->id_tipo_chave = $id_tipo_chave;
        return $this;
    }
    
    /**
     * Gets label
     * @return string
     */
    public function getLabel()
    {
        return $this->label;
    }
  
    /**
     * Sets label
     * @param string $label 
     * @return $this
     */
    public function setLabel($label)
    {
        
        $this->label = $label;
        return $this;
    }
    
    /**
     * Gets validade
     * @return string
     */
    public function getValidade()
    {
        return $this->validade;
    }
  
    /**
     * Sets validade
     * @param string $validade 
     * @return $this
     */
    public function setValidade($validade)
    {
        
        $this->validade = $validade;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
