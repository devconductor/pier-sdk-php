<?php
/**
 * ArquivoPersist
 *
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2.model;

use \ArrayAccess;
/**
 * ArquivoPersist Class Doc Comment
 *
 * @category    Class
 * @description {{{arquivo_persist_description}}}
 * @package     br.com.conductor.pier.api.v2.invoker
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ArquivoPersist implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id_tipo_arquivo' => 'int',
        'arquivo' => 'string',
        'nome' => 'string',
        'extensao' => 'string',
        'tipo_comunicacao' => 'string',
        'detalhes' => '\br.com.conductor.pier.api.v2.model\ArquivoDetalhesPersist[]'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id_tipo_arquivo' => 'idTipoArquivo',
        'arquivo' => 'arquivo',
        'nome' => 'nome',
        'extensao' => 'extensao',
        'tipo_comunicacao' => 'tipoComunicacao',
        'detalhes' => 'detalhes'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id_tipo_arquivo' => 'setIdTipoArquivo',
        'arquivo' => 'setArquivo',
        'nome' => 'setNome',
        'extensao' => 'setExtensao',
        'tipo_comunicacao' => 'setTipoComunicacao',
        'detalhes' => 'setDetalhes'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id_tipo_arquivo' => 'getIdTipoArquivo',
        'arquivo' => 'getArquivo',
        'nome' => 'getNome',
        'extensao' => 'getExtensao',
        'tipo_comunicacao' => 'getTipoComunicacao',
        'detalhes' => 'getDetalhes'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id_tipo_arquivo {{{arquivo_persist_id_tipo_arquivo_value}}}
      * @var int
      */
    protected $id_tipo_arquivo;
    
    /**
      * $arquivo {{{arquivo_persist_arquivo_value}}}
      * @var string
      */
    protected $arquivo;
    
    /**
      * $nome {{{arquivo_persist_nome_value}}}
      * @var string
      */
    protected $nome;
    
    /**
      * $extensao {{{arquivo_persist_extensao_value}}}
      * @var string
      */
    protected $extensao;
    
    /**
      * $tipo_comunicacao {{{arquivo_persist_tipo_comunicacao_value}}}
      * @var string
      */
    protected $tipo_comunicacao;
    
    /**
      * $detalhes {{{arquivo_persist_detalhes_value}}}
      * @var \br.com.conductor.pier.api.v2.model\ArquivoDetalhesPersist[]
      */
    protected $detalhes;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id_tipo_arquivo = $data["id_tipo_arquivo"];
            $this->arquivo = $data["arquivo"];
            $this->nome = $data["nome"];
            $this->extensao = $data["extensao"];
            $this->tipo_comunicacao = $data["tipo_comunicacao"];
            $this->detalhes = $data["detalhes"];
        }
    }
    
    /**
     * Gets id_tipo_arquivo
     * @return int
     */
    public function getIdTipoArquivo()
    {
        return $this->id_tipo_arquivo;
    }
  
    /**
     * Sets id_tipo_arquivo
     * @param int $id_tipo_arquivo {{{arquivo_persist_id_tipo_arquivo_value}}}
     * @return $this
     */
    public function setIdTipoArquivo($id_tipo_arquivo)
    {
        
        $this->id_tipo_arquivo = $id_tipo_arquivo;
        return $this;
    }
    
    /**
     * Gets arquivo
     * @return string
     */
    public function getArquivo()
    {
        return $this->arquivo;
    }
  
    /**
     * Sets arquivo
     * @param string $arquivo {{{arquivo_persist_arquivo_value}}}
     * @return $this
     */
    public function setArquivo($arquivo)
    {
        
        $this->arquivo = $arquivo;
        return $this;
    }
    
    /**
     * Gets nome
     * @return string
     */
    public function getNome()
    {
        return $this->nome;
    }
  
    /**
     * Sets nome
     * @param string $nome {{{arquivo_persist_nome_value}}}
     * @return $this
     */
    public function setNome($nome)
    {
        
        $this->nome = $nome;
        return $this;
    }
    
    /**
     * Gets extensao
     * @return string
     */
    public function getExtensao()
    {
        return $this->extensao;
    }
  
    /**
     * Sets extensao
     * @param string $extensao {{{arquivo_persist_extensao_value}}}
     * @return $this
     */
    public function setExtensao($extensao)
    {
        
        $this->extensao = $extensao;
        return $this;
    }
    
    /**
     * Gets tipo_comunicacao
     * @return string
     */
    public function getTipoComunicacao()
    {
        return $this->tipo_comunicacao;
    }
  
    /**
     * Sets tipo_comunicacao
     * @param string $tipo_comunicacao {{{arquivo_persist_tipo_comunicacao_value}}}
     * @return $this
     */
    public function setTipoComunicacao($tipo_comunicacao)
    {
        $allowed_values = array("SOAP", "REST");
        if (!in_array($tipo_comunicacao, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'tipo_comunicacao', must be one of 'SOAP', 'REST'");
        }
        $this->tipo_comunicacao = $tipo_comunicacao;
        return $this;
    }
    
    /**
     * Gets detalhes
     * @return \br.com.conductor.pier.api.v2.model\ArquivoDetalhesPersist[]
     */
    public function getDetalhes()
    {
        return $this->detalhes;
    }
  
    /**
     * Sets detalhes
     * @param \br.com.conductor.pier.api.v2.model\ArquivoDetalhesPersist[] $detalhes {{{arquivo_persist_detalhes_value}}}
     * @return $this
     */
    public function setDetalhes($detalhes)
    {
        
        $this->detalhes = $detalhes;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
