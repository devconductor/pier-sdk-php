<?php
/**
 * PessoaJuridicaResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2.model;

use \ArrayAccess;
/**
 * PessoaJuridicaResponse Class Doc Comment
 *
 * @category    Class
 * @description Representa\u00C3\u00A7\u00C3\u00A3o da resposta do recurso de pessoa jur\u00C3\u00ADdica
 * @package     br.com.conductor.pier.api.v2.invoker
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PessoaJuridicaResponse implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'razao_social' => 'string',
        'cnpj' => 'string',
        'inscricao_estadual' => 'string',
        'contato' => 'string',
        'banco' => 'int',
        'agencia' => 'int',
        'digito_verificador_agencia' => 'string',
        'conta_corrente' => 'string',
        'digito_verificador_conta_corrente' => 'string',
        'usuario' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'razao_social' => 'razaoSocial',
        'cnpj' => 'cnpj',
        'inscricao_estadual' => 'inscricaoEstadual',
        'contato' => 'contato',
        'banco' => 'banco',
        'agencia' => 'agencia',
        'digito_verificador_agencia' => 'digitoVerificadorAgencia',
        'conta_corrente' => 'contaCorrente',
        'digito_verificador_conta_corrente' => 'digitoVerificadorContaCorrente',
        'usuario' => 'usuario'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'razao_social' => 'setRazaoSocial',
        'cnpj' => 'setCnpj',
        'inscricao_estadual' => 'setInscricaoEstadual',
        'contato' => 'setContato',
        'banco' => 'setBanco',
        'agencia' => 'setAgencia',
        'digito_verificador_agencia' => 'setDigitoVerificadorAgencia',
        'conta_corrente' => 'setContaCorrente',
        'digito_verificador_conta_corrente' => 'setDigitoVerificadorContaCorrente',
        'usuario' => 'setUsuario'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'razao_social' => 'getRazaoSocial',
        'cnpj' => 'getCnpj',
        'inscricao_estadual' => 'getInscricaoEstadual',
        'contato' => 'getContato',
        'banco' => 'getBanco',
        'agencia' => 'getAgencia',
        'digito_verificador_agencia' => 'getDigitoVerificadorAgencia',
        'conta_corrente' => 'getContaCorrente',
        'digito_verificador_conta_corrente' => 'getDigitoVerificadorContaCorrente',
        'usuario' => 'getUsuario'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id C\u00C3\u00B3digo identificador da pessoa jur\u00C3\u00ADdica
      * @var int
      */
    protected $id;
    
    /**
      * $razao_social Raz\u00C3\u00A3o social da pessoa jur\u00C3\u00ADdica
      * @var string
      */
    protected $razao_social;
    
    /**
      * $cnpj C\u00C3\u00B3digo do Cadastro Nacional de Pessoas Jur\u00C3\u00ADdicas
      * @var string
      */
    protected $cnpj;
    
    /**
      * $inscricao_estadual N\u00C3\u00BAmero da inscri\u00C3\u00A7\u00C3\u00A3o estadual
      * @var string
      */
    protected $inscricao_estadual;
    
    /**
      * $contato Nome da pessoa para entrar em contato
      * @var string
      */
    protected $contato;
    
    /**
      * $banco C\u00C3\u00B3digo do banco
      * @var int
      */
    protected $banco;
    
    /**
      * $agencia C\u00C3\u00B3digo da ag\u00C3\u00AAncia
      * @var int
      */
    protected $agencia;
    
    /**
      * $digito_verificador_agencia D\u00C3\u00ADgito verificador da ag\u00C3\u00AAncia
      * @var string
      */
    protected $digito_verificador_agencia;
    
    /**
      * $conta_corrente C\u00C3\u00B3digo da Conta Corrente
      * @var string
      */
    protected $conta_corrente;
    
    /**
      * $digito_verificador_conta_corrente D\u00C3\u00ADgito Verificador da Conta Corrente
      * @var string
      */
    protected $digito_verificador_conta_corrente;
    
    /**
      * $usuario Login do usu\u00C3\u00A1rio para registro da inser\u00C3\u00A7\u00C3\u00A3o
      * @var string
      */
    protected $usuario;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->razao_social = $data["razao_social"];
            $this->cnpj = $data["cnpj"];
            $this->inscricao_estadual = $data["inscricao_estadual"];
            $this->contato = $data["contato"];
            $this->banco = $data["banco"];
            $this->agencia = $data["agencia"];
            $this->digito_verificador_agencia = $data["digito_verificador_agencia"];
            $this->conta_corrente = $data["conta_corrente"];
            $this->digito_verificador_conta_corrente = $data["digito_verificador_conta_corrente"];
            $this->usuario = $data["usuario"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id C\u00C3\u00B3digo identificador da pessoa jur\u00C3\u00ADdica
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets razao_social
     * @return string
     */
    public function getRazaoSocial()
    {
        return $this->razao_social;
    }
  
    /**
     * Sets razao_social
     * @param string $razao_social Raz\u00C3\u00A3o social da pessoa jur\u00C3\u00ADdica
     * @return $this
     */
    public function setRazaoSocial($razao_social)
    {
        
        $this->razao_social = $razao_social;
        return $this;
    }
    
    /**
     * Gets cnpj
     * @return string
     */
    public function getCnpj()
    {
        return $this->cnpj;
    }
  
    /**
     * Sets cnpj
     * @param string $cnpj C\u00C3\u00B3digo do Cadastro Nacional de Pessoas Jur\u00C3\u00ADdicas
     * @return $this
     */
    public function setCnpj($cnpj)
    {
        
        $this->cnpj = $cnpj;
        return $this;
    }
    
    /**
     * Gets inscricao_estadual
     * @return string
     */
    public function getInscricaoEstadual()
    {
        return $this->inscricao_estadual;
    }
  
    /**
     * Sets inscricao_estadual
     * @param string $inscricao_estadual N\u00C3\u00BAmero da inscri\u00C3\u00A7\u00C3\u00A3o estadual
     * @return $this
     */
    public function setInscricaoEstadual($inscricao_estadual)
    {
        
        $this->inscricao_estadual = $inscricao_estadual;
        return $this;
    }
    
    /**
     * Gets contato
     * @return string
     */
    public function getContato()
    {
        return $this->contato;
    }
  
    /**
     * Sets contato
     * @param string $contato Nome da pessoa para entrar em contato
     * @return $this
     */
    public function setContato($contato)
    {
        
        $this->contato = $contato;
        return $this;
    }
    
    /**
     * Gets banco
     * @return int
     */
    public function getBanco()
    {
        return $this->banco;
    }
  
    /**
     * Sets banco
     * @param int $banco C\u00C3\u00B3digo do banco
     * @return $this
     */
    public function setBanco($banco)
    {
        
        $this->banco = $banco;
        return $this;
    }
    
    /**
     * Gets agencia
     * @return int
     */
    public function getAgencia()
    {
        return $this->agencia;
    }
  
    /**
     * Sets agencia
     * @param int $agencia C\u00C3\u00B3digo da ag\u00C3\u00AAncia
     * @return $this
     */
    public function setAgencia($agencia)
    {
        
        $this->agencia = $agencia;
        return $this;
    }
    
    /**
     * Gets digito_verificador_agencia
     * @return string
     */
    public function getDigitoVerificadorAgencia()
    {
        return $this->digito_verificador_agencia;
    }
  
    /**
     * Sets digito_verificador_agencia
     * @param string $digito_verificador_agencia D\u00C3\u00ADgito verificador da ag\u00C3\u00AAncia
     * @return $this
     */
    public function setDigitoVerificadorAgencia($digito_verificador_agencia)
    {
        
        $this->digito_verificador_agencia = $digito_verificador_agencia;
        return $this;
    }
    
    /**
     * Gets conta_corrente
     * @return string
     */
    public function getContaCorrente()
    {
        return $this->conta_corrente;
    }
  
    /**
     * Sets conta_corrente
     * @param string $conta_corrente C\u00C3\u00B3digo da Conta Corrente
     * @return $this
     */
    public function setContaCorrente($conta_corrente)
    {
        
        $this->conta_corrente = $conta_corrente;
        return $this;
    }
    
    /**
     * Gets digito_verificador_conta_corrente
     * @return string
     */
    public function getDigitoVerificadorContaCorrente()
    {
        return $this->digito_verificador_conta_corrente;
    }
  
    /**
     * Sets digito_verificador_conta_corrente
     * @param string $digito_verificador_conta_corrente D\u00C3\u00ADgito Verificador da Conta Corrente
     * @return $this
     */
    public function setDigitoVerificadorContaCorrente($digito_verificador_conta_corrente)
    {
        
        $this->digito_verificador_conta_corrente = $digito_verificador_conta_corrente;
        return $this;
    }
    
    /**
     * Gets usuario
     * @return string
     */
    public function getUsuario()
    {
        return $this->usuario;
    }
  
    /**
     * Sets usuario
     * @param string $usuario Login do usu\u00C3\u00A1rio para registro da inser\u00C3\u00A7\u00C3\u00A3o
     * @return $this
     */
    public function setUsuario($usuario)
    {
        
        $this->usuario = $usuario;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
