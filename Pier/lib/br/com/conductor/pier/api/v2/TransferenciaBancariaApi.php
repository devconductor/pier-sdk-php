<?php
/**
 * TransferenciaBancariaApi
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2;

use \br.com.conductor.pier.api.v2.invoker\Configuration;
use \br.com.conductor.pier.api.v2.invoker\ApiClient;
use \br.com.conductor.pier.api.v2.invoker\ApiException;
use \br.com.conductor.pier.api.v2.invoker\ObjectSerializer;

/**
 * TransferenciaBancariaApi Class Doc Comment
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransferenciaBancariaApi
{

    /**
     * API Client
     * @var \br.com.conductor.pier.api.v2.invoker\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://localhost/');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \br.com.conductor.pier.api.v2.invoker\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient $apiClient set the API client
     * @return TransferenciaBancariaApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * atualizarUsingPUT1
     *
     * Atualiza conta banc\u00C3\u00A1ria portador
     *
     * @param int $id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta banc\u00C3\u00A1ria do portador (id). (required)
     * @param \br.com.conductor.pier.api.v2.model\ContaBancariaPortadorUpdate $update update (required)
     * @return \br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function atualizarUsingPUT1($id, $update)
    {
        list($response, $statusCode, $httpHeader) = $this->atualizarUsingPUT1WithHttpInfo ($id, $update);
        return $response; 
    }


    /**
     * atualizarUsingPUT1WithHttpInfo
     *
     * Atualiza conta banc\u00C3\u00A1ria portador
     *
     * @param int $id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta banc\u00C3\u00A1ria do portador (id). (required)
     * @param \br.com.conductor.pier.api.v2.model\ContaBancariaPortadorUpdate $update update (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function atualizarUsingPUT1WithHttpInfo($id, $update)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling atualizarUsingPUT1');
        }
        // verify the required parameter 'update' is set
        if ($update === null) {
            throw new \InvalidArgumentException('Missing the required parameter $update when calling atualizarUsingPUT1');
        }
  
        // parse inputs
        $resourcePath = "/api/contas-bancarias-portador/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($update)) {
            $_tempBody = $update;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarUsingGET9
     *
     * Consulta conta banc\u00C3\u00A1ria portador
     *
     * @param int $id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta banc\u00C3\u00A1ria (id). (required)
     * @return \br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET9($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarUsingGET9WithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarUsingGET9WithHttpInfo
     *
     * Consulta conta banc\u00C3\u00A1ria portador
     *
     * @param int $id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta banc\u00C3\u00A1ria (id). (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET9WithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarUsingGET9');
        }
  
        // parse inputs
        $resourcePath = "/api/contas-bancarias-portador/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET11
     *
     * Lista contas banc\u00C3\u00A1rias portador
     *
     * @param int $id_conta C\u00C3\u00B3digo identificador da conta cart\u00C3\u00A3o (optional)
     * @param string $nome_agencia Descri\u00C3\u00A7\u00C3\u00A3o da ag\u00C3\u00AAncia (optional)
     * @param string $numero_agencia N\u00C3\u00BAmero da ag\u00C3\u00AAncia (optional)
     * @param string $numero_conta N\u00C3\u00BAmero da conta (optional)
     * @param int $flag_conta_origem_doc Sinaliza se origem \u00C3\u00A9 DOC (1: DOC, 0: TED) (optional)
     * @param int $id_pessoa_fisica C\u00C3\u00B3digo da pessoa (optional)
     * @param string $favorecido Nome do favorecido (optional)
     * @param string $numero_receira_federal Documento do favorecido (optional)
     * @param string[] $sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     * @param int $page P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     * @param int $limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageContaBancariaPortadorResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET11($id_conta = null, $nome_agencia = null, $numero_agencia = null, $numero_conta = null, $flag_conta_origem_doc = null, $id_pessoa_fisica = null, $favorecido = null, $numero_receira_federal = null, $sort = null, $page = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGET11WithHttpInfo ($id_conta, $nome_agencia, $numero_agencia, $numero_conta, $flag_conta_origem_doc, $id_pessoa_fisica, $favorecido, $numero_receira_federal, $sort, $page, $limit);
        return $response; 
    }


    /**
     * listarUsingGET11WithHttpInfo
     *
     * Lista contas banc\u00C3\u00A1rias portador
     *
     * @param int $id_conta C\u00C3\u00B3digo identificador da conta cart\u00C3\u00A3o (optional)
     * @param string $nome_agencia Descri\u00C3\u00A7\u00C3\u00A3o da ag\u00C3\u00AAncia (optional)
     * @param string $numero_agencia N\u00C3\u00BAmero da ag\u00C3\u00AAncia (optional)
     * @param string $numero_conta N\u00C3\u00BAmero da conta (optional)
     * @param int $flag_conta_origem_doc Sinaliza se origem \u00C3\u00A9 DOC (1: DOC, 0: TED) (optional)
     * @param int $id_pessoa_fisica C\u00C3\u00B3digo da pessoa (optional)
     * @param string $favorecido Nome do favorecido (optional)
     * @param string $numero_receira_federal Documento do favorecido (optional)
     * @param string[] $sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros. (optional)
     * @param int $page P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     * @param int $limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50) (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageContaBancariaPortadorResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET11WithHttpInfo($id_conta = null, $nome_agencia = null, $numero_agencia = null, $numero_conta = null, $flag_conta_origem_doc = null, $id_pessoa_fisica = null, $favorecido = null, $numero_receira_federal = null, $sort = null, $page = null, $limit = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/contas-bancarias-portador";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($id_conta !== null) {
            $queryParams['idConta'] = $this->apiClient->getSerializer()->toQueryValue($id_conta);
        }// query params
        
        if ($nome_agencia !== null) {
            $queryParams['nomeAgencia'] = $this->apiClient->getSerializer()->toQueryValue($nome_agencia);
        }// query params
        
        if ($numero_agencia !== null) {
            $queryParams['numeroAgencia'] = $this->apiClient->getSerializer()->toQueryValue($numero_agencia);
        }// query params
        
        if ($numero_conta !== null) {
            $queryParams['numeroConta'] = $this->apiClient->getSerializer()->toQueryValue($numero_conta);
        }// query params
        
        if ($flag_conta_origem_doc !== null) {
            $queryParams['flagContaOrigemDoc'] = $this->apiClient->getSerializer()->toQueryValue($flag_conta_origem_doc);
        }// query params
        
        if ($id_pessoa_fisica !== null) {
            $queryParams['idPessoaFisica'] = $this->apiClient->getSerializer()->toQueryValue($id_pessoa_fisica);
        }// query params
        
        if ($favorecido !== null) {
            $queryParams['favorecido'] = $this->apiClient->getSerializer()->toQueryValue($favorecido);
        }// query params
        
        if ($numero_receira_federal !== null) {
            $queryParams['numeroReceiraFederal'] = $this->apiClient->getSerializer()->toQueryValue($numero_receira_federal);
        }// query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageContaBancariaPortadorResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageContaBancariaPortadorResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageContaBancariaPortadorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * salvarUsingPOST7
     *
     * Cadastra uma conta banc\u00C3\u00A1ria do portador
     *
     * @param \br.com.conductor.pier.api.v2.model\ContaBancariaPortadorPersist $persist persist (required)
     * @return \br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST7($persist)
    {
        list($response, $statusCode, $httpHeader) = $this->salvarUsingPOST7WithHttpInfo ($persist);
        return $response; 
    }


    /**
     * salvarUsingPOST7WithHttpInfo
     *
     * Cadastra uma conta banc\u00C3\u00A1ria do portador
     *
     * @param \br.com.conductor.pier.api.v2.model\ContaBancariaPortadorPersist $persist persist (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST7WithHttpInfo($persist)
    {
        
        // verify the required parameter 'persist' is set
        if ($persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $persist when calling salvarUsingPOST7');
        }
  
        // parse inputs
        $resourcePath = "/api/contas-bancarias-portador";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($persist)) {
            $_tempBody = $persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
