<?php
/**
 * TransferenciaBancariaApi
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2;

use \br.com.conductor.pier.api.v2.invoker\Configuration;
use \br.com.conductor.pier.api.v2.invoker\ApiClient;
use \br.com.conductor.pier.api.v2.invoker\ApiException;
use \br.com.conductor.pier.api.v2.invoker\ObjectSerializer;

/**
 * TransferenciaBancariaApi Class Doc Comment
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransferenciaBancariaApi
{

    /**
     * API Client
     * @var \br.com.conductor.pier.api.v2.invoker\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://localhost/');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \br.com.conductor.pier.api.v2.invoker\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient $apiClient set the API client
     * @return TransferenciaBancariaApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * atualizarUsingPUT1
     *
     * Atualiza conta banc\u00E1ria portador
     *
     * @param int $id C\u00F3digo de identifica\u00E7\u00E3o da conta banc\u00E1ria do portador (id). (required)
     * @param \br.com.conductor.pier.api.v2.model\ContaBancariaPortadorUpdate $update update (required)
     * @return \br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function atualizarUsingPUT1($id, $update)
    {
        list($response, $statusCode, $httpHeader) = $this->atualizarUsingPUT1WithHttpInfo ($id, $update);
        return $response; 
    }


    /**
     * atualizarUsingPUT1WithHttpInfo
     *
     * Atualiza conta banc\u00E1ria portador
     *
     * @param int $id C\u00F3digo de identifica\u00E7\u00E3o da conta banc\u00E1ria do portador (id). (required)
     * @param \br.com.conductor.pier.api.v2.model\ContaBancariaPortadorUpdate $update update (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function atualizarUsingPUT1WithHttpInfo($id, $update)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling atualizarUsingPUT1');
        }
        // verify the required parameter 'update' is set
        if ($update === null) {
            throw new \InvalidArgumentException('Missing the required parameter $update when calling atualizarUsingPUT1');
        }
  
        // parse inputs
        $resourcePath = "/api/contas-bancarias-portador/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($update)) {
            $_tempBody = $update;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * cancelarTransferenciaCreditoContaBancariaUsingPOST
     *
     * Realizar o cancelamento de uma transfer\u00EAncia banc\u00E1ria do cart\u00E3o para contas banc\u00E1rias que esteja pendente de confirma\u00E7\u00E3o.
     *
     * @param int $id_transferencia Id Transfer\u00EAncia (required)
     * @return string
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function cancelarTransferenciaCreditoContaBancariaUsingPOST($id_transferencia)
    {
        list($response, $statusCode, $httpHeader) = $this->cancelarTransferenciaCreditoContaBancariaUsingPOSTWithHttpInfo ($id_transferencia);
        return $response; 
    }


    /**
     * cancelarTransferenciaCreditoContaBancariaUsingPOSTWithHttpInfo
     *
     * Realizar o cancelamento de uma transfer\u00EAncia banc\u00E1ria do cart\u00E3o para contas banc\u00E1rias que esteja pendente de confirma\u00E7\u00E3o.
     *
     * @param int $id_transferencia Id Transfer\u00EAncia (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function cancelarTransferenciaCreditoContaBancariaUsingPOSTWithHttpInfo($id_transferencia)
    {
        
        // verify the required parameter 'id_transferencia' is set
        if ($id_transferencia === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_transferencia when calling cancelarTransferenciaCreditoContaBancariaUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/transferencias-creditos-contas-bancarias/{idTransferencia}/cancelar";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id_transferencia !== null) {
            $resourcePath = str_replace(
                "{" . "idTransferencia" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_transferencia),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'string'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * confirmarTransferenciaCreditoContaBancariaUsingPOST
     *
     * Realizar a confirma\u00E7\u00E3o de uma transfer\u00EAncia banc\u00E1ria do cart\u00E3o para contas banc\u00E1rias que esteja pendente de confirma\u00E7\u00E3o.
     *
     * @param int $id_transferencia Id Transfer\u00EAncia (required)
     * @return string
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function confirmarTransferenciaCreditoContaBancariaUsingPOST($id_transferencia)
    {
        list($response, $statusCode, $httpHeader) = $this->confirmarTransferenciaCreditoContaBancariaUsingPOSTWithHttpInfo ($id_transferencia);
        return $response; 
    }


    /**
     * confirmarTransferenciaCreditoContaBancariaUsingPOSTWithHttpInfo
     *
     * Realizar a confirma\u00E7\u00E3o de uma transfer\u00EAncia banc\u00E1ria do cart\u00E3o para contas banc\u00E1rias que esteja pendente de confirma\u00E7\u00E3o.
     *
     * @param int $id_transferencia Id Transfer\u00EAncia (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function confirmarTransferenciaCreditoContaBancariaUsingPOSTWithHttpInfo($id_transferencia)
    {
        
        // verify the required parameter 'id_transferencia' is set
        if ($id_transferencia === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_transferencia when calling confirmarTransferenciaCreditoContaBancariaUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/transferencias-creditos-contas-bancarias/{idTransferencia}/confirmar";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id_transferencia !== null) {
            $resourcePath = str_replace(
                "{" . "idTransferencia" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_transferencia),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'string'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarTransferenciaBancariaUsingGET
     *
     * Realiza a consulta de uma transfer\u00EAncia banc\u00E1ria de cr\u00E9dito entre contas banc\u00E1rias de um portador
     *
     * @param int $id_transferencia Id Transfer\u00EAncia (required)
     * @return \br.com.conductor.pier.api.v2.model\TransferenciaCreditoContaBancariaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarTransferenciaBancariaUsingGET($id_transferencia)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarTransferenciaBancariaUsingGETWithHttpInfo ($id_transferencia);
        return $response; 
    }


    /**
     * consultarTransferenciaBancariaUsingGETWithHttpInfo
     *
     * Realiza a consulta de uma transfer\u00EAncia banc\u00E1ria de cr\u00E9dito entre contas banc\u00E1rias de um portador
     *
     * @param int $id_transferencia Id Transfer\u00EAncia (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\TransferenciaCreditoContaBancariaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarTransferenciaBancariaUsingGETWithHttpInfo($id_transferencia)
    {
        
        // verify the required parameter 'id_transferencia' is set
        if ($id_transferencia === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_transferencia when calling consultarTransferenciaBancariaUsingGET');
        }
  
        // parse inputs
        $resourcePath = "/api/transferencias-creditos-contas-bancarias/{idTransferencia}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id_transferencia !== null) {
            $resourcePath = str_replace(
                "{" . "idTransferencia" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_transferencia),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\TransferenciaCreditoContaBancariaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\TransferenciaCreditoContaBancariaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\TransferenciaCreditoContaBancariaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarUsingGET12
     *
     * Consulta conta banc\u00E1ria portador
     *
     * @param int $id C\u00F3digo de identifica\u00E7\u00E3o da conta banc\u00E1ria (id). (required)
     * @return \br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET12($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarUsingGET12WithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarUsingGET12WithHttpInfo
     *
     * Consulta conta banc\u00E1ria portador
     *
     * @param int $id C\u00F3digo de identifica\u00E7\u00E3o da conta banc\u00E1ria (id). (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET12WithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarUsingGET12');
        }
  
        // parse inputs
        $resourcePath = "/api/contas-bancarias-portador/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarUsingGET41
     *
     * Consultar uma transfer\u00EAncia banc\u00E1ria para um banco
     *
     * @param int $id Id Conta (required)
     * @param int $id_transferencia Id Transfer\u00EAncia (required)
     * @param int $id_conta_bancaria_destino C\u00F3digo de identifica\u00E7\u00E3o da conta banc\u00E1ria de destino (id) (optional)
     * @return \br.com.conductor.pier.api.v2.model\TransferenciaBancariaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET41($id, $id_transferencia, $id_conta_bancaria_destino = null)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarUsingGET41WithHttpInfo ($id, $id_transferencia, $id_conta_bancaria_destino);
        return $response; 
    }


    /**
     * consultarUsingGET41WithHttpInfo
     *
     * Consultar uma transfer\u00EAncia banc\u00E1ria para um banco
     *
     * @param int $id Id Conta (required)
     * @param int $id_transferencia Id Transfer\u00EAncia (required)
     * @param int $id_conta_bancaria_destino C\u00F3digo de identifica\u00E7\u00E3o da conta banc\u00E1ria de destino (id) (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\TransferenciaBancariaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET41WithHttpInfo($id, $id_transferencia, $id_conta_bancaria_destino = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarUsingGET41');
        }
        // verify the required parameter 'id_transferencia' is set
        if ($id_transferencia === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_transferencia when calling consultarUsingGET41');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/transferencias-creditos-contas-bancarias/{id_transferencia}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($id_conta_bancaria_destino !== null) {
            $queryParams['id_conta_bancaria_destino'] = $this->apiClient->getSerializer()->toQueryValue($id_conta_bancaria_destino);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }// path params
        
        if ($id_transferencia !== null) {
            $resourcePath = str_replace(
                "{" . "id_transferencia" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_transferencia),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\TransferenciaBancariaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\TransferenciaBancariaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\TransferenciaBancariaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarTransferenciaBancariaUsingGET
     *
     * Realiza a listagem das transfer\u00EAncias banc\u00E1rias de cr\u00E9dito entre contas banc\u00E1rias
     *
     * @param string[] $sort Tipo de ordena\u00E7\u00E3o dos registros. (optional)
     * @param int $page P\u00E1gina solicitada (Default = 0) (optional)
     * @param int $limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50) (optional)
     * @param int $id_conta C\u00F3digo de identifica\u00E7\u00E3o da Conta. (optional)
     * @param string $data_solicitacao_inicial Data inicial da solicita\u00E7\u00E3o de transfer\u00EAncia. (optional)
     * @param string $data_solicitacao_final Data final da solicita\u00E7\u00E3o de transfer\u00EAncia (optional)
     * @param int $status C\u00F3digo do status do processamento (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageTransferenciaCreditoContaBancariaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarTransferenciaBancariaUsingGET($sort = null, $page = null, $limit = null, $id_conta = null, $data_solicitacao_inicial = null, $data_solicitacao_final = null, $status = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarTransferenciaBancariaUsingGETWithHttpInfo ($sort, $page, $limit, $id_conta, $data_solicitacao_inicial, $data_solicitacao_final, $status);
        return $response; 
    }


    /**
     * listarTransferenciaBancariaUsingGETWithHttpInfo
     *
     * Realiza a listagem das transfer\u00EAncias banc\u00E1rias de cr\u00E9dito entre contas banc\u00E1rias
     *
     * @param string[] $sort Tipo de ordena\u00E7\u00E3o dos registros. (optional)
     * @param int $page P\u00E1gina solicitada (Default = 0) (optional)
     * @param int $limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50) (optional)
     * @param int $id_conta C\u00F3digo de identifica\u00E7\u00E3o da Conta. (optional)
     * @param string $data_solicitacao_inicial Data inicial da solicita\u00E7\u00E3o de transfer\u00EAncia. (optional)
     * @param string $data_solicitacao_final Data final da solicita\u00E7\u00E3o de transfer\u00EAncia (optional)
     * @param int $status C\u00F3digo do status do processamento (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageTransferenciaCreditoContaBancariaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarTransferenciaBancariaUsingGETWithHttpInfo($sort = null, $page = null, $limit = null, $id_conta = null, $data_solicitacao_inicial = null, $data_solicitacao_final = null, $status = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/transferencias-creditos-contas-bancarias";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id_conta !== null) {
            $queryParams['idConta'] = $this->apiClient->getSerializer()->toQueryValue($id_conta);
        }// query params
        
        if ($data_solicitacao_inicial !== null) {
            $queryParams['dataSolicitacaoInicial'] = $this->apiClient->getSerializer()->toQueryValue($data_solicitacao_inicial);
        }// query params
        
        if ($data_solicitacao_final !== null) {
            $queryParams['dataSolicitacaoFinal'] = $this->apiClient->getSerializer()->toQueryValue($data_solicitacao_final);
        }// query params
        
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageTransferenciaCreditoContaBancariaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageTransferenciaCreditoContaBancariaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageTransferenciaCreditoContaBancariaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET15
     *
     * Lista contas banc\u00E1rias portador
     *
     * @param int $id_conta C\u00F3digo identificador da conta cart\u00E3o (optional)
     * @param string $nome_agencia Descri\u00E7\u00E3o da ag\u00EAncia (optional)
     * @param string $numero_agencia N\u00FAmero da ag\u00EAncia (optional)
     * @param string $numero_conta N\u00FAmero da conta (optional)
     * @param int $flag_conta_origem_doc Sinaliza se origem \u00E9 DOC (1: DOC, 0: TED) (optional)
     * @param int $id_pessoa_fisica C\u00F3digo da pessoa (optional)
     * @param string $favorecido Nome do favorecido (optional)
     * @param string $numero_receira_federal Documento do favorecido (optional)
     * @param string[] $sort Tipo de ordena\u00E7\u00E3o dos registros. (optional)
     * @param int $page P\u00E1gina solicitada (Default = 0) (optional)
     * @param int $limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50) (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageContaBancariaPortadorResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET15($id_conta = null, $nome_agencia = null, $numero_agencia = null, $numero_conta = null, $flag_conta_origem_doc = null, $id_pessoa_fisica = null, $favorecido = null, $numero_receira_federal = null, $sort = null, $page = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGET15WithHttpInfo ($id_conta, $nome_agencia, $numero_agencia, $numero_conta, $flag_conta_origem_doc, $id_pessoa_fisica, $favorecido, $numero_receira_federal, $sort, $page, $limit);
        return $response; 
    }


    /**
     * listarUsingGET15WithHttpInfo
     *
     * Lista contas banc\u00E1rias portador
     *
     * @param int $id_conta C\u00F3digo identificador da conta cart\u00E3o (optional)
     * @param string $nome_agencia Descri\u00E7\u00E3o da ag\u00EAncia (optional)
     * @param string $numero_agencia N\u00FAmero da ag\u00EAncia (optional)
     * @param string $numero_conta N\u00FAmero da conta (optional)
     * @param int $flag_conta_origem_doc Sinaliza se origem \u00E9 DOC (1: DOC, 0: TED) (optional)
     * @param int $id_pessoa_fisica C\u00F3digo da pessoa (optional)
     * @param string $favorecido Nome do favorecido (optional)
     * @param string $numero_receira_federal Documento do favorecido (optional)
     * @param string[] $sort Tipo de ordena\u00E7\u00E3o dos registros. (optional)
     * @param int $page P\u00E1gina solicitada (Default = 0) (optional)
     * @param int $limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50) (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageContaBancariaPortadorResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET15WithHttpInfo($id_conta = null, $nome_agencia = null, $numero_agencia = null, $numero_conta = null, $flag_conta_origem_doc = null, $id_pessoa_fisica = null, $favorecido = null, $numero_receira_federal = null, $sort = null, $page = null, $limit = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/contas-bancarias-portador";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($id_conta !== null) {
            $queryParams['idConta'] = $this->apiClient->getSerializer()->toQueryValue($id_conta);
        }// query params
        
        if ($nome_agencia !== null) {
            $queryParams['nomeAgencia'] = $this->apiClient->getSerializer()->toQueryValue($nome_agencia);
        }// query params
        
        if ($numero_agencia !== null) {
            $queryParams['numeroAgencia'] = $this->apiClient->getSerializer()->toQueryValue($numero_agencia);
        }// query params
        
        if ($numero_conta !== null) {
            $queryParams['numeroConta'] = $this->apiClient->getSerializer()->toQueryValue($numero_conta);
        }// query params
        
        if ($flag_conta_origem_doc !== null) {
            $queryParams['flagContaOrigemDoc'] = $this->apiClient->getSerializer()->toQueryValue($flag_conta_origem_doc);
        }// query params
        
        if ($id_pessoa_fisica !== null) {
            $queryParams['idPessoaFisica'] = $this->apiClient->getSerializer()->toQueryValue($id_pessoa_fisica);
        }// query params
        
        if ($favorecido !== null) {
            $queryParams['favorecido'] = $this->apiClient->getSerializer()->toQueryValue($favorecido);
        }// query params
        
        if ($numero_receira_federal !== null) {
            $queryParams['numeroReceiraFederal'] = $this->apiClient->getSerializer()->toQueryValue($numero_receira_federal);
        }// query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageContaBancariaPortadorResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageContaBancariaPortadorResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageContaBancariaPortadorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET49
     *
     * Listar as transfer\u00EAncias banc\u00E1rias realizadas
     *
     * @param int $id Id Conta (required)
     * @param int $id_conta_bancaria_destino C\u00F3digo de identifica\u00E7\u00E3o da conta banc\u00E1ria de destino (id) (optional)
     * @param string[] $sort Tipo de ordena\u00E7\u00E3o dos registros. (optional)
     * @param int $page P\u00E1gina solicitada (Default = 0) (optional)
     * @param int $limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50) (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageTransferenciaBancariaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET49($id, $id_conta_bancaria_destino = null, $sort = null, $page = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGET49WithHttpInfo ($id, $id_conta_bancaria_destino, $sort, $page, $limit);
        return $response; 
    }


    /**
     * listarUsingGET49WithHttpInfo
     *
     * Listar as transfer\u00EAncias banc\u00E1rias realizadas
     *
     * @param int $id Id Conta (required)
     * @param int $id_conta_bancaria_destino C\u00F3digo de identifica\u00E7\u00E3o da conta banc\u00E1ria de destino (id) (optional)
     * @param string[] $sort Tipo de ordena\u00E7\u00E3o dos registros. (optional)
     * @param int $page P\u00E1gina solicitada (Default = 0) (optional)
     * @param int $limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50) (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageTransferenciaBancariaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET49WithHttpInfo($id, $id_conta_bancaria_destino = null, $sort = null, $page = null, $limit = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling listarUsingGET49');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/transferencias-creditos-contas-bancarias";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($id_conta_bancaria_destino !== null) {
            $queryParams['id_conta_bancaria_destino'] = $this->apiClient->getSerializer()->toQueryValue($id_conta_bancaria_destino);
        }// query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageTransferenciaBancariaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageTransferenciaBancariaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageTransferenciaBancariaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * salvarUsingPOST8
     *
     * Cadastra uma conta banc\u00E1ria do portador
     *
     * @param \br.com.conductor.pier.api.v2.model\ContaBancariaPortadorPersist $persist persist (required)
     * @return \br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST8($persist)
    {
        list($response, $statusCode, $httpHeader) = $this->salvarUsingPOST8WithHttpInfo ($persist);
        return $response; 
    }


    /**
     * salvarUsingPOST8WithHttpInfo
     *
     * Cadastra uma conta banc\u00E1ria do portador
     *
     * @param \br.com.conductor.pier.api.v2.model\ContaBancariaPortadorPersist $persist persist (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST8WithHttpInfo($persist)
    {
        
        // verify the required parameter 'persist' is set
        if ($persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $persist when calling salvarUsingPOST8');
        }
  
        // parse inputs
        $resourcePath = "/api/contas-bancarias-portador";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($persist)) {
            $_tempBody = $persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\ContaBancariaPortadorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * simularTransferenciaBancariaUsingPOST
     *
     * Realiza a simula\u00E7\u00E3o dos planos de parcelamentos para uma transfer\u00EAncia banc\u00E1ria de cr\u00E9dito entre contas banc\u00E1rias
     *
     * @param \br.com.conductor.pier.api.v2.model\PlanoParcelamentoTransferenciaCreditoContaBancariaRequest $request request (required)
     * @return \br.com.conductor.pier.api.v2.model\PlanoParcelamentoTransferenciaCreditoContaBancariaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function simularTransferenciaBancariaUsingPOST($request)
    {
        list($response, $statusCode, $httpHeader) = $this->simularTransferenciaBancariaUsingPOSTWithHttpInfo ($request);
        return $response; 
    }


    /**
     * simularTransferenciaBancariaUsingPOSTWithHttpInfo
     *
     * Realiza a simula\u00E7\u00E3o dos planos de parcelamentos para uma transfer\u00EAncia banc\u00E1ria de cr\u00E9dito entre contas banc\u00E1rias
     *
     * @param \br.com.conductor.pier.api.v2.model\PlanoParcelamentoTransferenciaCreditoContaBancariaRequest $request request (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\PlanoParcelamentoTransferenciaCreditoContaBancariaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function simularTransferenciaBancariaUsingPOSTWithHttpInfo($request)
    {
        
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling simularTransferenciaBancariaUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/simular-transferencias-creditos-contas-bancarias";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PlanoParcelamentoTransferenciaCreditoContaBancariaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PlanoParcelamentoTransferenciaCreditoContaBancariaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PlanoParcelamentoTransferenciaCreditoContaBancariaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * transferenciaCreditoContaBancariaUsingPOST
     *
     * Realizar transfer\u00EAncia banc\u00E1ria do cart\u00E3o para contas banc\u00E1rias
     *
     * @param \br.com.conductor.pier.api.v2.model\TransferenciaCreditoContaBancariaPersist $persist persist (required)
     * @return \br.com.conductor.pier.api.v2.model\TransferenciaCreditoContaBancariaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function transferenciaCreditoContaBancariaUsingPOST($persist)
    {
        list($response, $statusCode, $httpHeader) = $this->transferenciaCreditoContaBancariaUsingPOSTWithHttpInfo ($persist);
        return $response; 
    }


    /**
     * transferenciaCreditoContaBancariaUsingPOSTWithHttpInfo
     *
     * Realizar transfer\u00EAncia banc\u00E1ria do cart\u00E3o para contas banc\u00E1rias
     *
     * @param \br.com.conductor.pier.api.v2.model\TransferenciaCreditoContaBancariaPersist $persist persist (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\TransferenciaCreditoContaBancariaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function transferenciaCreditoContaBancariaUsingPOSTWithHttpInfo($persist)
    {
        
        // verify the required parameter 'persist' is set
        if ($persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $persist when calling transferenciaCreditoContaBancariaUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/transferencias-creditos-contas-bancarias";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($persist)) {
            $_tempBody = $persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\TransferenciaCreditoContaBancariaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\TransferenciaCreditoContaBancariaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\TransferenciaCreditoContaBancariaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * transferirUsingPOST
     *
     * Realizar transfer\u00EAncia banc\u00E1ria do cart\u00E3o para contas banc\u00E1rias
     *
     * @param int $id Id Conta (required)
     * @param \br.com.conductor.pier.api.v2.model\TransferenciaBancariaPersist $transferencia_bancaria_persist transferenciaBancariaPersist (required)
     * @return \br.com.conductor.pier.api.v2.model\TransferenciaBancariaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function transferirUsingPOST($id, $transferencia_bancaria_persist)
    {
        list($response, $statusCode, $httpHeader) = $this->transferirUsingPOSTWithHttpInfo ($id, $transferencia_bancaria_persist);
        return $response; 
    }


    /**
     * transferirUsingPOSTWithHttpInfo
     *
     * Realizar transfer\u00EAncia banc\u00E1ria do cart\u00E3o para contas banc\u00E1rias
     *
     * @param int $id Id Conta (required)
     * @param \br.com.conductor.pier.api.v2.model\TransferenciaBancariaPersist $transferencia_bancaria_persist transferenciaBancariaPersist (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\TransferenciaBancariaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function transferirUsingPOSTWithHttpInfo($id, $transferencia_bancaria_persist)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling transferirUsingPOST');
        }
        // verify the required parameter 'transferencia_bancaria_persist' is set
        if ($transferencia_bancaria_persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $transferencia_bancaria_persist when calling transferirUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/transferencias-creditos-contas-bancarias";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($transferencia_bancaria_persist)) {
            $_tempBody = $transferencia_bancaria_persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\TransferenciaBancariaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\TransferenciaBancariaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\TransferenciaBancariaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
