<?php
/**
 * MoedaResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2.model;

use \ArrayAccess;
/**
 * MoedaResponse Class Doc Comment
 *
 * @category    Class
 * @description Tipo de moeda
 * @package     br.com.conductor.pier.api.v2.invoker
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MoedaResponse implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'codigo_moeda' => 'string',
        'simbolo' => 'string',
        'descricao' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'codigo_moeda' => 'codigoMoeda',
        'simbolo' => 'simbolo',
        'descricao' => 'descricao'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'codigo_moeda' => 'setCodigoMoeda',
        'simbolo' => 'setSimbolo',
        'descricao' => 'setDescricao'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'codigo_moeda' => 'getCodigoMoeda',
        'simbolo' => 'getSimbolo',
        'descricao' => 'getDescricao'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id Identificador do tipo de moeda.
      * @var int
      */
    protected $id;
    
    /**
      * $codigo_moeda C\u00F3digo identificador do tipo de moeda.
      * @var string
      */
    protected $codigo_moeda;
    
    /**
      * $simbolo S\u00EDmbolo da Moeda.
      * @var string
      */
    protected $simbolo;
    
    /**
      * $descricao Descri\u00E7\u00E3o do tipo da moeda.
      * @var string
      */
    protected $descricao;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->codigo_moeda = $data["codigo_moeda"];
            $this->simbolo = $data["simbolo"];
            $this->descricao = $data["descricao"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id Identificador do tipo de moeda.
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets codigo_moeda
     * @return string
     */
    public function getCodigoMoeda()
    {
        return $this->codigo_moeda;
    }
  
    /**
     * Sets codigo_moeda
     * @param string $codigo_moeda C\u00F3digo identificador do tipo de moeda.
     * @return $this
     */
    public function setCodigoMoeda($codigo_moeda)
    {
        
        $this->codigo_moeda = $codigo_moeda;
        return $this;
    }
    
    /**
     * Gets simbolo
     * @return string
     */
    public function getSimbolo()
    {
        return $this->simbolo;
    }
  
    /**
     * Sets simbolo
     * @param string $simbolo S\u00EDmbolo da Moeda.
     * @return $this
     */
    public function setSimbolo($simbolo)
    {
        
        $this->simbolo = $simbolo;
        return $this;
    }
    
    /**
     * Gets descricao
     * @return string
     */
    public function getDescricao()
    {
        return $this->descricao;
    }
  
    /**
     * Sets descricao
     * @param string $descricao Descri\u00E7\u00E3o do tipo da moeda.
     * @return $this
     */
    public function setDescricao($descricao)
    {
        
        $this->descricao = $descricao;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
