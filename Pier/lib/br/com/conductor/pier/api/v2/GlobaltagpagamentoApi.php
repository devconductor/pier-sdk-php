<?php
/**
 * GlobaltagpagamentoApi
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2;

use \br.com.conductor.pier.api.v2.invoker\Configuration;
use \br.com.conductor.pier.api.v2.invoker\ApiClient;
use \br.com.conductor.pier.api.v2.invoker\ApiException;
use \br.com.conductor.pier.api.v2.invoker\ObjectSerializer;

/**
 * GlobaltagpagamentoApi Class Doc Comment
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GlobaltagpagamentoApi
{

    /**
     * API Client
     * @var \br.com.conductor.pier.api.v2.invoker\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://localhost/');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \br.com.conductor.pier.api.v2.invoker\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient $apiClient set the API client
     * @return GlobaltagpagamentoApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * consultarUsingGET
     *
     * {{{acordo_resource_consultar}}}
     *
     * @param int $id {{{acordo_resource_consultar_param_id}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\AcordoDetalheResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarUsingGETWithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarUsingGETWithHttpInfo
     *
     * {{{acordo_resource_consultar}}}
     *
     * @param int $id {{{acordo_resource_consultar_param_id}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\AcordoDetalheResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGETWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarUsingGET');
        }
  
        // parse inputs
        $resourcePath = "/api/acordos/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\AcordoDetalheResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\AcordoDetalheResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\AcordoDetalheResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarPagamentosUsingGET1
     *
     * {{{pagamento_resource_listar_pagamentos}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_conta {{{historico_pagamento_request_id_conta_value}}} (optional)
     * @param int $id_pagamento {{{historico_pagamento_request_id_pagamento_value}}} (optional)
     * @param int $id_estabelecimento {{{historico_pagamento_request_id_estabelecimento_value}}} (optional)
     * @param int $id_banco {{{historico_pagamento_request_id_banco_value}}} (optional)
     * @param int $id_cartao {{{historico_pagamento_request_id_cartao_value}}} (optional)
     * @param string $data_hora_pagamento {{{historico_pagamento_request_data_hora_pagamento_value}}} (optional)
     * @param int $status {{{historico_pagamento_request_status_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageHistoricoPagamentoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarPagamentosUsingGET1($sort = null, $page = null, $limit = null, $id_conta = null, $id_pagamento = null, $id_estabelecimento = null, $id_banco = null, $id_cartao = null, $data_hora_pagamento = null, $status = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarPagamentosUsingGET1WithHttpInfo ($sort, $page, $limit, $id_conta, $id_pagamento, $id_estabelecimento, $id_banco, $id_cartao, $data_hora_pagamento, $status);
        return $response; 
    }


    /**
     * listarPagamentosUsingGET1WithHttpInfo
     *
     * {{{pagamento_resource_listar_pagamentos}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_conta {{{historico_pagamento_request_id_conta_value}}} (optional)
     * @param int $id_pagamento {{{historico_pagamento_request_id_pagamento_value}}} (optional)
     * @param int $id_estabelecimento {{{historico_pagamento_request_id_estabelecimento_value}}} (optional)
     * @param int $id_banco {{{historico_pagamento_request_id_banco_value}}} (optional)
     * @param int $id_cartao {{{historico_pagamento_request_id_cartao_value}}} (optional)
     * @param string $data_hora_pagamento {{{historico_pagamento_request_data_hora_pagamento_value}}} (optional)
     * @param int $status {{{historico_pagamento_request_status_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageHistoricoPagamentoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarPagamentosUsingGET1WithHttpInfo($sort = null, $page = null, $limit = null, $id_conta = null, $id_pagamento = null, $id_estabelecimento = null, $id_banco = null, $id_cartao = null, $data_hora_pagamento = null, $status = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/pagamentos";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id_conta !== null) {
            $queryParams['idConta'] = $this->apiClient->getSerializer()->toQueryValue($id_conta);
        }// query params
        
        if ($id_pagamento !== null) {
            $queryParams['idPagamento'] = $this->apiClient->getSerializer()->toQueryValue($id_pagamento);
        }// query params
        
        if ($id_estabelecimento !== null) {
            $queryParams['idEstabelecimento'] = $this->apiClient->getSerializer()->toQueryValue($id_estabelecimento);
        }// query params
        
        if ($id_banco !== null) {
            $queryParams['idBanco'] = $this->apiClient->getSerializer()->toQueryValue($id_banco);
        }// query params
        
        if ($id_cartao !== null) {
            $queryParams['idCartao'] = $this->apiClient->getSerializer()->toQueryValue($id_cartao);
        }// query params
        
        if ($data_hora_pagamento !== null) {
            $queryParams['dataHoraPagamento'] = $this->apiClient->getSerializer()->toQueryValue($data_hora_pagamento);
        }// query params
        
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageHistoricoPagamentoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageHistoricoPagamentoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageHistoricoPagamentoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET
     *
     * {{{acordo_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_conta {{{acordo_request_id_conta_value}}} (optional)
     * @param int $status_acordo {{{acordo_request_status_acordo_value}}} (optional)
     * @param string $data_acordo {{{acordo_request_data_acordo_value}}} (optional)
     * @param int $quantidade_parcelas {{{acordo_request_quantidade_parcelas_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageAcordoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET($sort = null, $page = null, $limit = null, $id_conta = null, $status_acordo = null, $data_acordo = null, $quantidade_parcelas = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGETWithHttpInfo ($sort, $page, $limit, $id_conta, $status_acordo, $data_acordo, $quantidade_parcelas);
        return $response; 
    }


    /**
     * listarUsingGETWithHttpInfo
     *
     * {{{acordo_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_conta {{{acordo_request_id_conta_value}}} (optional)
     * @param int $status_acordo {{{acordo_request_status_acordo_value}}} (optional)
     * @param string $data_acordo {{{acordo_request_data_acordo_value}}} (optional)
     * @param int $quantidade_parcelas {{{acordo_request_quantidade_parcelas_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageAcordoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGETWithHttpInfo($sort = null, $page = null, $limit = null, $id_conta = null, $status_acordo = null, $data_acordo = null, $quantidade_parcelas = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/acordos";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id_conta !== null) {
            $queryParams['idConta'] = $this->apiClient->getSerializer()->toQueryValue($id_conta);
        }// query params
        
        if ($status_acordo !== null) {
            $queryParams['statusAcordo'] = $this->apiClient->getSerializer()->toQueryValue($status_acordo);
        }// query params
        
        if ($data_acordo !== null) {
            $queryParams['dataAcordo'] = $this->apiClient->getSerializer()->toQueryValue($data_acordo);
        }// query params
        
        if ($quantidade_parcelas !== null) {
            $queryParams['quantidadeParcelas'] = $this->apiClient->getSerializer()->toQueryValue($quantidade_parcelas);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageAcordoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageAcordoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageAcordoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
