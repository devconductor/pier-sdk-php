<?php
/**
 * CredorDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2.model;

use \ArrayAccess;
/**
 * CredorDTO Class Doc Comment
 *
 * @category    Class
 * @description Par\u00C3\u00A2metros de requisi\u00C3\u00A7\u00C3\u00A3o para cadastrar ou alterar credor
 * @package     br.com.conductor.pier.api.v2.invoker
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CredorDTO implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id_pessoa_juridica' => 'int',
        'nome' => 'string',
        'periodicidade' => 'string',
        'pagamento_semanal' => 'string',
        'pagamento_mensal' => 'int',
        'pagamento_decendial_primeiro' => 'int',
        'pagamento_decendial_segundo' => 'int',
        'pagamento_decendial_terceiro' => 'int',
        'pagamento_quinzenal_primeiro' => 'int',
        'pagamento_quinzenal_segundo' => 'int',
        'credor_banco' => 'bool',
        'percentual_rav' => 'Number',
        'recebe_rav' => 'string',
        'percentual_multiplica' => 'Number',
        'taxa_adm' => 'Number',
        'taxa_banco' => 'Number',
        'limite_rav' => 'Number',
        'id_credor_rav' => 'int',
        'banco' => 'int',
        'agencia' => 'int',
        'digito_verificador_agencia' => 'string',
        'conta_corrente' => 'string',
        'digito_verificador_conta_corrente' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id_pessoa_juridica' => 'idPessoaJuridica',
        'nome' => 'nome',
        'periodicidade' => 'periodicidade',
        'pagamento_semanal' => 'pagamentoSemanal',
        'pagamento_mensal' => 'pagamentoMensal',
        'pagamento_decendial_primeiro' => 'pagamentoDecendialPrimeiro',
        'pagamento_decendial_segundo' => 'pagamentoDecendialSegundo',
        'pagamento_decendial_terceiro' => 'pagamentoDecendialTerceiro',
        'pagamento_quinzenal_primeiro' => 'pagamentoQuinzenalPrimeiro',
        'pagamento_quinzenal_segundo' => 'pagamentoQuinzenalSegundo',
        'credor_banco' => 'credorBanco',
        'percentual_rav' => 'percentualRAV',
        'recebe_rav' => 'recebeRAV',
        'percentual_multiplica' => 'percentualMultiplica',
        'taxa_adm' => 'taxaAdm',
        'taxa_banco' => 'taxaBanco',
        'limite_rav' => 'limiteRAV',
        'id_credor_rav' => 'idCredorRAV',
        'banco' => 'banco',
        'agencia' => 'agencia',
        'digito_verificador_agencia' => 'digitoVerificadorAgencia',
        'conta_corrente' => 'contaCorrente',
        'digito_verificador_conta_corrente' => 'digitoVerificadorContaCorrente'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id_pessoa_juridica' => 'setIdPessoaJuridica',
        'nome' => 'setNome',
        'periodicidade' => 'setPeriodicidade',
        'pagamento_semanal' => 'setPagamentoSemanal',
        'pagamento_mensal' => 'setPagamentoMensal',
        'pagamento_decendial_primeiro' => 'setPagamentoDecendialPrimeiro',
        'pagamento_decendial_segundo' => 'setPagamentoDecendialSegundo',
        'pagamento_decendial_terceiro' => 'setPagamentoDecendialTerceiro',
        'pagamento_quinzenal_primeiro' => 'setPagamentoQuinzenalPrimeiro',
        'pagamento_quinzenal_segundo' => 'setPagamentoQuinzenalSegundo',
        'credor_banco' => 'setCredorBanco',
        'percentual_rav' => 'setPercentualRav',
        'recebe_rav' => 'setRecebeRav',
        'percentual_multiplica' => 'setPercentualMultiplica',
        'taxa_adm' => 'setTaxaAdm',
        'taxa_banco' => 'setTaxaBanco',
        'limite_rav' => 'setLimiteRav',
        'id_credor_rav' => 'setIdCredorRav',
        'banco' => 'setBanco',
        'agencia' => 'setAgencia',
        'digito_verificador_agencia' => 'setDigitoVerificadorAgencia',
        'conta_corrente' => 'setContaCorrente',
        'digito_verificador_conta_corrente' => 'setDigitoVerificadorContaCorrente'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id_pessoa_juridica' => 'getIdPessoaJuridica',
        'nome' => 'getNome',
        'periodicidade' => 'getPeriodicidade',
        'pagamento_semanal' => 'getPagamentoSemanal',
        'pagamento_mensal' => 'getPagamentoMensal',
        'pagamento_decendial_primeiro' => 'getPagamentoDecendialPrimeiro',
        'pagamento_decendial_segundo' => 'getPagamentoDecendialSegundo',
        'pagamento_decendial_terceiro' => 'getPagamentoDecendialTerceiro',
        'pagamento_quinzenal_primeiro' => 'getPagamentoQuinzenalPrimeiro',
        'pagamento_quinzenal_segundo' => 'getPagamentoQuinzenalSegundo',
        'credor_banco' => 'getCredorBanco',
        'percentual_rav' => 'getPercentualRav',
        'recebe_rav' => 'getRecebeRav',
        'percentual_multiplica' => 'getPercentualMultiplica',
        'taxa_adm' => 'getTaxaAdm',
        'taxa_banco' => 'getTaxaBanco',
        'limite_rav' => 'getLimiteRav',
        'id_credor_rav' => 'getIdCredorRav',
        'banco' => 'getBanco',
        'agencia' => 'getAgencia',
        'digito_verificador_agencia' => 'getDigitoVerificadorAgencia',
        'conta_corrente' => 'getContaCorrente',
        'digito_verificador_conta_corrente' => 'getDigitoVerificadorContaCorrente'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id_pessoa_juridica Identificador da pessoa jur\u00C3\u00ADdica do credor
      * @var int
      */
    protected $id_pessoa_juridica;
    
    /**
      * $nome Nome do credor
      * @var string
      */
    protected $nome;
    
    /**
      * $periodicidade Periodicidade do pagamento
      * @var string
      */
    protected $periodicidade;
    
    /**
      * $pagamento_semanal Dia para pagamento semanal
      * @var string
      */
    protected $pagamento_semanal;
    
    /**
      * $pagamento_mensal Dia da data para o pagamento mensal
      * @var int
      */
    protected $pagamento_mensal;
    
    /**
      * $pagamento_decendial_primeiro Dia da data para o primeiro pagamento decendial
      * @var int
      */
    protected $pagamento_decendial_primeiro;
    
    /**
      * $pagamento_decendial_segundo Dia da data para o segundo pagamento decendial
      * @var int
      */
    protected $pagamento_decendial_segundo;
    
    /**
      * $pagamento_decendial_terceiro Dia da data para o terceiro pagamento decendial
      * @var int
      */
    protected $pagamento_decendial_terceiro;
    
    /**
      * $pagamento_quinzenal_primeiro Dia da data para o primeiro pagamento quinzenal
      * @var int
      */
    protected $pagamento_quinzenal_primeiro;
    
    /**
      * $pagamento_quinzenal_segundo Dia da data para o segundo pagamento quinzenal
      * @var int
      */
    protected $pagamento_quinzenal_segundo;
    
    /**
      * $credor_banco Indica se este credor pode ser um Credor RAV de outros credores
      * @var bool
      */
    protected $credor_banco;
    
    /**
      * $percentual_rav Valor percentual do RAV do credor
      * @var Number
      */
    protected $percentual_rav;
    
    /**
      * $recebe_rav Indica se o credor recebe RAV e o tipo
      * @var string
      */
    protected $recebe_rav;
    
    /**
      * $percentual_multiplica Percentual Multiplica
      * @var Number
      */
    protected $percentual_multiplica;
    
    /**
      * $taxa_adm Taxa Administrativa
      * @var Number
      */
    protected $taxa_adm;
    
    /**
      * $taxa_banco Taxa do Banco
      * @var Number
      */
    protected $taxa_banco;
    
    /**
      * $limite_rav Valor limite do RAV
      * @var Number
      */
    protected $limite_rav;
    
    /**
      * $id_credor_rav C\u00C3\u00B3digo identificador do credor RAV
      * @var int
      */
    protected $id_credor_rav;
    
    /**
      * $banco C\u00C3\u00B3digo do banco
      * @var int
      */
    protected $banco;
    
    /**
      * $agencia Raz\u00C3\u00A3o social da pessoa jur\u00C3\u00ADdica
      * @var int
      */
    protected $agencia;
    
    /**
      * $digito_verificador_agencia D\u00C3\u00ADgito Verificador da ag\u00C3\u00AAncia
      * @var string
      */
    protected $digito_verificador_agencia;
    
    /**
      * $conta_corrente C\u00C3\u00B3digo da Conta Corrente
      * @var string
      */
    protected $conta_corrente;
    
    /**
      * $digito_verificador_conta_corrente D\u00C3\u00ADgito Verificador da Conta Corrente
      * @var string
      */
    protected $digito_verificador_conta_corrente;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id_pessoa_juridica = $data["id_pessoa_juridica"];
            $this->nome = $data["nome"];
            $this->periodicidade = $data["periodicidade"];
            $this->pagamento_semanal = $data["pagamento_semanal"];
            $this->pagamento_mensal = $data["pagamento_mensal"];
            $this->pagamento_decendial_primeiro = $data["pagamento_decendial_primeiro"];
            $this->pagamento_decendial_segundo = $data["pagamento_decendial_segundo"];
            $this->pagamento_decendial_terceiro = $data["pagamento_decendial_terceiro"];
            $this->pagamento_quinzenal_primeiro = $data["pagamento_quinzenal_primeiro"];
            $this->pagamento_quinzenal_segundo = $data["pagamento_quinzenal_segundo"];
            $this->credor_banco = $data["credor_banco"];
            $this->percentual_rav = $data["percentual_rav"];
            $this->recebe_rav = $data["recebe_rav"];
            $this->percentual_multiplica = $data["percentual_multiplica"];
            $this->taxa_adm = $data["taxa_adm"];
            $this->taxa_banco = $data["taxa_banco"];
            $this->limite_rav = $data["limite_rav"];
            $this->id_credor_rav = $data["id_credor_rav"];
            $this->banco = $data["banco"];
            $this->agencia = $data["agencia"];
            $this->digito_verificador_agencia = $data["digito_verificador_agencia"];
            $this->conta_corrente = $data["conta_corrente"];
            $this->digito_verificador_conta_corrente = $data["digito_verificador_conta_corrente"];
        }
    }
    
    /**
     * Gets id_pessoa_juridica
     * @return int
     */
    public function getIdPessoaJuridica()
    {
        return $this->id_pessoa_juridica;
    }
  
    /**
     * Sets id_pessoa_juridica
     * @param int $id_pessoa_juridica Identificador da pessoa jur\u00C3\u00ADdica do credor
     * @return $this
     */
    public function setIdPessoaJuridica($id_pessoa_juridica)
    {
        
        $this->id_pessoa_juridica = $id_pessoa_juridica;
        return $this;
    }
    
    /**
     * Gets nome
     * @return string
     */
    public function getNome()
    {
        return $this->nome;
    }
  
    /**
     * Sets nome
     * @param string $nome Nome do credor
     * @return $this
     */
    public function setNome($nome)
    {
        
        $this->nome = $nome;
        return $this;
    }
    
    /**
     * Gets periodicidade
     * @return string
     */
    public function getPeriodicidade()
    {
        return $this->periodicidade;
    }
  
    /**
     * Sets periodicidade
     * @param string $periodicidade Periodicidade do pagamento
     * @return $this
     */
    public function setPeriodicidade($periodicidade)
    {
        $allowed_values = array("DIARIO", "SEMANAL", "MENSAL", "DECENDIAL", "QUINZENAL");
        if (!in_array($periodicidade, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'periodicidade', must be one of 'DIARIO', 'SEMANAL', 'MENSAL', 'DECENDIAL', 'QUINZENAL'");
        }
        $this->periodicidade = $periodicidade;
        return $this;
    }
    
    /**
     * Gets pagamento_semanal
     * @return string
     */
    public function getPagamentoSemanal()
    {
        return $this->pagamento_semanal;
    }
  
    /**
     * Sets pagamento_semanal
     * @param string $pagamento_semanal Dia para pagamento semanal
     * @return $this
     */
    public function setPagamentoSemanal($pagamento_semanal)
    {
        $allowed_values = array("SEGUNDA", "TERCA", "QUARTA", "QUINTA", "SEXTA", "SABADO", "DOMINGO");
        if (!in_array($pagamento_semanal, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'pagamento_semanal', must be one of 'SEGUNDA', 'TERCA', 'QUARTA', 'QUINTA', 'SEXTA', 'SABADO', 'DOMINGO'");
        }
        $this->pagamento_semanal = $pagamento_semanal;
        return $this;
    }
    
    /**
     * Gets pagamento_mensal
     * @return int
     */
    public function getPagamentoMensal()
    {
        return $this->pagamento_mensal;
    }
  
    /**
     * Sets pagamento_mensal
     * @param int $pagamento_mensal Dia da data para o pagamento mensal
     * @return $this
     */
    public function setPagamentoMensal($pagamento_mensal)
    {
        
        $this->pagamento_mensal = $pagamento_mensal;
        return $this;
    }
    
    /**
     * Gets pagamento_decendial_primeiro
     * @return int
     */
    public function getPagamentoDecendialPrimeiro()
    {
        return $this->pagamento_decendial_primeiro;
    }
  
    /**
     * Sets pagamento_decendial_primeiro
     * @param int $pagamento_decendial_primeiro Dia da data para o primeiro pagamento decendial
     * @return $this
     */
    public function setPagamentoDecendialPrimeiro($pagamento_decendial_primeiro)
    {
        
        $this->pagamento_decendial_primeiro = $pagamento_decendial_primeiro;
        return $this;
    }
    
    /**
     * Gets pagamento_decendial_segundo
     * @return int
     */
    public function getPagamentoDecendialSegundo()
    {
        return $this->pagamento_decendial_segundo;
    }
  
    /**
     * Sets pagamento_decendial_segundo
     * @param int $pagamento_decendial_segundo Dia da data para o segundo pagamento decendial
     * @return $this
     */
    public function setPagamentoDecendialSegundo($pagamento_decendial_segundo)
    {
        
        $this->pagamento_decendial_segundo = $pagamento_decendial_segundo;
        return $this;
    }
    
    /**
     * Gets pagamento_decendial_terceiro
     * @return int
     */
    public function getPagamentoDecendialTerceiro()
    {
        return $this->pagamento_decendial_terceiro;
    }
  
    /**
     * Sets pagamento_decendial_terceiro
     * @param int $pagamento_decendial_terceiro Dia da data para o terceiro pagamento decendial
     * @return $this
     */
    public function setPagamentoDecendialTerceiro($pagamento_decendial_terceiro)
    {
        
        $this->pagamento_decendial_terceiro = $pagamento_decendial_terceiro;
        return $this;
    }
    
    /**
     * Gets pagamento_quinzenal_primeiro
     * @return int
     */
    public function getPagamentoQuinzenalPrimeiro()
    {
        return $this->pagamento_quinzenal_primeiro;
    }
  
    /**
     * Sets pagamento_quinzenal_primeiro
     * @param int $pagamento_quinzenal_primeiro Dia da data para o primeiro pagamento quinzenal
     * @return $this
     */
    public function setPagamentoQuinzenalPrimeiro($pagamento_quinzenal_primeiro)
    {
        
        $this->pagamento_quinzenal_primeiro = $pagamento_quinzenal_primeiro;
        return $this;
    }
    
    /**
     * Gets pagamento_quinzenal_segundo
     * @return int
     */
    public function getPagamentoQuinzenalSegundo()
    {
        return $this->pagamento_quinzenal_segundo;
    }
  
    /**
     * Sets pagamento_quinzenal_segundo
     * @param int $pagamento_quinzenal_segundo Dia da data para o segundo pagamento quinzenal
     * @return $this
     */
    public function setPagamentoQuinzenalSegundo($pagamento_quinzenal_segundo)
    {
        
        $this->pagamento_quinzenal_segundo = $pagamento_quinzenal_segundo;
        return $this;
    }
    
    /**
     * Gets credor_banco
     * @return bool
     */
    public function getCredorBanco()
    {
        return $this->credor_banco;
    }
  
    /**
     * Sets credor_banco
     * @param bool $credor_banco Indica se este credor pode ser um Credor RAV de outros credores
     * @return $this
     */
    public function setCredorBanco($credor_banco)
    {
        
        $this->credor_banco = $credor_banco;
        return $this;
    }
    
    /**
     * Gets percentual_rav
     * @return Number
     */
    public function getPercentualRav()
    {
        return $this->percentual_rav;
    }
  
    /**
     * Sets percentual_rav
     * @param Number $percentual_rav Valor percentual do RAV do credor
     * @return $this
     */
    public function setPercentualRav($percentual_rav)
    {
        
        $this->percentual_rav = $percentual_rav;
        return $this;
    }
    
    /**
     * Gets recebe_rav
     * @return string
     */
    public function getRecebeRav()
    {
        return $this->recebe_rav;
    }
  
    /**
     * Sets recebe_rav
     * @param string $recebe_rav Indica se o credor recebe RAV e o tipo
     * @return $this
     */
    public function setRecebeRav($recebe_rav)
    {
        $allowed_values = array("NAO_TEM_PERMISSAO_RAV", "CREDITO_RAV", "DEBITO_RAV");
        if (!in_array($recebe_rav, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'recebe_rav', must be one of 'NAO_TEM_PERMISSAO_RAV', 'CREDITO_RAV', 'DEBITO_RAV'");
        }
        $this->recebe_rav = $recebe_rav;
        return $this;
    }
    
    /**
     * Gets percentual_multiplica
     * @return Number
     */
    public function getPercentualMultiplica()
    {
        return $this->percentual_multiplica;
    }
  
    /**
     * Sets percentual_multiplica
     * @param Number $percentual_multiplica Percentual Multiplica
     * @return $this
     */
    public function setPercentualMultiplica($percentual_multiplica)
    {
        
        $this->percentual_multiplica = $percentual_multiplica;
        return $this;
    }
    
    /**
     * Gets taxa_adm
     * @return Number
     */
    public function getTaxaAdm()
    {
        return $this->taxa_adm;
    }
  
    /**
     * Sets taxa_adm
     * @param Number $taxa_adm Taxa Administrativa
     * @return $this
     */
    public function setTaxaAdm($taxa_adm)
    {
        
        $this->taxa_adm = $taxa_adm;
        return $this;
    }
    
    /**
     * Gets taxa_banco
     * @return Number
     */
    public function getTaxaBanco()
    {
        return $this->taxa_banco;
    }
  
    /**
     * Sets taxa_banco
     * @param Number $taxa_banco Taxa do Banco
     * @return $this
     */
    public function setTaxaBanco($taxa_banco)
    {
        
        $this->taxa_banco = $taxa_banco;
        return $this;
    }
    
    /**
     * Gets limite_rav
     * @return Number
     */
    public function getLimiteRav()
    {
        return $this->limite_rav;
    }
  
    /**
     * Sets limite_rav
     * @param Number $limite_rav Valor limite do RAV
     * @return $this
     */
    public function setLimiteRav($limite_rav)
    {
        
        $this->limite_rav = $limite_rav;
        return $this;
    }
    
    /**
     * Gets id_credor_rav
     * @return int
     */
    public function getIdCredorRav()
    {
        return $this->id_credor_rav;
    }
  
    /**
     * Sets id_credor_rav
     * @param int $id_credor_rav C\u00C3\u00B3digo identificador do credor RAV
     * @return $this
     */
    public function setIdCredorRav($id_credor_rav)
    {
        
        $this->id_credor_rav = $id_credor_rav;
        return $this;
    }
    
    /**
     * Gets banco
     * @return int
     */
    public function getBanco()
    {
        return $this->banco;
    }
  
    /**
     * Sets banco
     * @param int $banco C\u00C3\u00B3digo do banco
     * @return $this
     */
    public function setBanco($banco)
    {
        
        $this->banco = $banco;
        return $this;
    }
    
    /**
     * Gets agencia
     * @return int
     */
    public function getAgencia()
    {
        return $this->agencia;
    }
  
    /**
     * Sets agencia
     * @param int $agencia Raz\u00C3\u00A3o social da pessoa jur\u00C3\u00ADdica
     * @return $this
     */
    public function setAgencia($agencia)
    {
        
        $this->agencia = $agencia;
        return $this;
    }
    
    /**
     * Gets digito_verificador_agencia
     * @return string
     */
    public function getDigitoVerificadorAgencia()
    {
        return $this->digito_verificador_agencia;
    }
  
    /**
     * Sets digito_verificador_agencia
     * @param string $digito_verificador_agencia D\u00C3\u00ADgito Verificador da ag\u00C3\u00AAncia
     * @return $this
     */
    public function setDigitoVerificadorAgencia($digito_verificador_agencia)
    {
        
        $this->digito_verificador_agencia = $digito_verificador_agencia;
        return $this;
    }
    
    /**
     * Gets conta_corrente
     * @return string
     */
    public function getContaCorrente()
    {
        return $this->conta_corrente;
    }
  
    /**
     * Sets conta_corrente
     * @param string $conta_corrente C\u00C3\u00B3digo da Conta Corrente
     * @return $this
     */
    public function setContaCorrente($conta_corrente)
    {
        
        $this->conta_corrente = $conta_corrente;
        return $this;
    }
    
    /**
     * Gets digito_verificador_conta_corrente
     * @return string
     */
    public function getDigitoVerificadorContaCorrente()
    {
        return $this->digito_verificador_conta_corrente;
    }
  
    /**
     * Sets digito_verificador_conta_corrente
     * @param string $digito_verificador_conta_corrente D\u00C3\u00ADgito Verificador da Conta Corrente
     * @return $this
     */
    public function setDigitoVerificadorContaCorrente($digito_verificador_conta_corrente)
    {
        
        $this->digito_verificador_conta_corrente = $digito_verificador_conta_corrente;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
