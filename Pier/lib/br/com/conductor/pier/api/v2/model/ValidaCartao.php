<?php
/**
 * ValidaCartao
 *
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2.model;

use \ArrayAccess;
/**
 * ValidaCartao Class Doc Comment
 *
 * @category    Class
 * @description Objeto de resposta para a valida\u00C3\u00A7\u00C3\u00A3o de cart\u00C3\u00A3o
 * @package     br.com.conductor.pier.api.v2.invoker
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ValidaCartao implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'status_cartao' => 'string',
        'status_conta' => 'string',
        'criptograma_resposta' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'status_cartao' => 'statusCartao',
        'status_conta' => 'statusConta',
        'criptograma_resposta' => 'criptogramaResposta'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'status_cartao' => 'setStatusCartao',
        'status_conta' => 'setStatusConta',
        'criptograma_resposta' => 'setCriptogramaResposta'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'status_cartao' => 'getStatusCartao',
        'status_conta' => 'getStatusConta',
        'criptograma_resposta' => 'getCriptogramaResposta'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $status_cartao Descri\u00C3\u00A7\u00C3\u00A3o do status do cart\u00C3\u00A3o
      * @var string
      */
    protected $status_cartao;
    
    /**
      * $status_conta Descri\u00C3\u00A7\u00C3\u00A3o do status da conta
      * @var string
      */
    protected $status_conta;
    
    /**
      * $criptograma_resposta Criptograma de resposta
      * @var string
      */
    protected $criptograma_resposta;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->status_cartao = $data["status_cartao"];
            $this->status_conta = $data["status_conta"];
            $this->criptograma_resposta = $data["criptograma_resposta"];
        }
    }
    
    /**
     * Gets status_cartao
     * @return string
     */
    public function getStatusCartao()
    {
        return $this->status_cartao;
    }
  
    /**
     * Sets status_cartao
     * @param string $status_cartao Descri\u00C3\u00A7\u00C3\u00A3o do status do cart\u00C3\u00A3o
     * @return $this
     */
    public function setStatusCartao($status_cartao)
    {
        
        $this->status_cartao = $status_cartao;
        return $this;
    }
    
    /**
     * Gets status_conta
     * @return string
     */
    public function getStatusConta()
    {
        return $this->status_conta;
    }
  
    /**
     * Sets status_conta
     * @param string $status_conta Descri\u00C3\u00A7\u00C3\u00A3o do status da conta
     * @return $this
     */
    public function setStatusConta($status_conta)
    {
        
        $this->status_conta = $status_conta;
        return $this;
    }
    
    /**
     * Gets criptograma_resposta
     * @return string
     */
    public function getCriptogramaResposta()
    {
        return $this->criptograma_resposta;
    }
  
    /**
     * Sets criptograma_resposta
     * @param string $criptograma_resposta Criptograma de resposta
     * @return $this
     */
    public function setCriptogramaResposta($criptograma_resposta)
    {
        
        $this->criptograma_resposta = $criptograma_resposta;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
