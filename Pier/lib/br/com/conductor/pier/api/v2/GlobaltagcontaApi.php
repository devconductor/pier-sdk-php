<?php
/**
 * GlobaltagcontaApi
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2;

use \br.com.conductor.pier.api.v2.invoker\Configuration;
use \br.com.conductor.pier.api.v2.invoker\ApiClient;
use \br.com.conductor.pier.api.v2.invoker\ApiException;
use \br.com.conductor.pier.api.v2.invoker\ObjectSerializer;

/**
 * GlobaltagcontaApi Class Doc Comment
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GlobaltagcontaApi
{

    /**
     * API Client
     * @var \br.com.conductor.pier.api.v2.invoker\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://localhost/');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \br.com.conductor.pier.api.v2.invoker\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient $apiClient set the API client
     * @return GlobaltagcontaApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * ajustarContaUsingPOST1
     *
     * {{{conta_resource_ajustar_conta}}}
     *
     * @param int $id {{{conta_resource_ajustar_conta_param_id}}} (required)
     * @param int $id_tipo_ajuste {{{ajuste_persist_id_tipo_ajuste_value}}} (required)
     * @param string $data_ajuste {{{ajuste_persist_data_ajuste_value}}} (required)
     * @param Number $valor_ajuste {{{ajuste_persist_valor_ajuste_value}}} (required)
     * @param string $authorization Authorization (optional)
     * @param string $identificador_externo {{{ajuste_persist_identificador_externo_value}}} (optional)
     * @param int $id_transacao_original {{{ajuste_persist_id_transacao_original}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\AjusteFinanceiroResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function ajustarContaUsingPOST1($id, $id_tipo_ajuste, $data_ajuste, $valor_ajuste, $authorization = null, $identificador_externo = null, $id_transacao_original = null)
    {
        list($response, $statusCode, $httpHeader) = $this->ajustarContaUsingPOST1WithHttpInfo ($id, $id_tipo_ajuste, $data_ajuste, $valor_ajuste, $authorization, $identificador_externo, $id_transacao_original);
        return $response; 
    }


    /**
     * ajustarContaUsingPOST1WithHttpInfo
     *
     * {{{conta_resource_ajustar_conta}}}
     *
     * @param int $id {{{conta_resource_ajustar_conta_param_id}}} (required)
     * @param int $id_tipo_ajuste {{{ajuste_persist_id_tipo_ajuste_value}}} (required)
     * @param string $data_ajuste {{{ajuste_persist_data_ajuste_value}}} (required)
     * @param Number $valor_ajuste {{{ajuste_persist_valor_ajuste_value}}} (required)
     * @param string $authorization Authorization (optional)
     * @param string $identificador_externo {{{ajuste_persist_identificador_externo_value}}} (optional)
     * @param int $id_transacao_original {{{ajuste_persist_id_transacao_original}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\AjusteFinanceiroResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function ajustarContaUsingPOST1WithHttpInfo($id, $id_tipo_ajuste, $data_ajuste, $valor_ajuste, $authorization = null, $identificador_externo = null, $id_transacao_original = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling ajustarContaUsingPOST1');
        }
        // verify the required parameter 'id_tipo_ajuste' is set
        if ($id_tipo_ajuste === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_tipo_ajuste when calling ajustarContaUsingPOST1');
        }
        // verify the required parameter 'data_ajuste' is set
        if ($data_ajuste === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data_ajuste when calling ajustarContaUsingPOST1');
        }
        // verify the required parameter 'valor_ajuste' is set
        if ($valor_ajuste === null) {
            throw new \InvalidArgumentException('Missing the required parameter $valor_ajuste when calling ajustarContaUsingPOST1');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/ajustes-financeiros";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($id_tipo_ajuste !== null) {
            $queryParams['idTipoAjuste'] = $this->apiClient->getSerializer()->toQueryValue($id_tipo_ajuste);
        }// query params
        
        if ($data_ajuste !== null) {
            $queryParams['dataAjuste'] = $this->apiClient->getSerializer()->toQueryValue($data_ajuste);
        }// query params
        
        if ($valor_ajuste !== null) {
            $queryParams['valorAjuste'] = $this->apiClient->getSerializer()->toQueryValue($valor_ajuste);
        }// query params
        
        if ($identificador_externo !== null) {
            $queryParams['identificadorExterno'] = $this->apiClient->getSerializer()->toQueryValue($identificador_externo);
        }// query params
        
        if ($id_transacao_original !== null) {
            $queryParams['idTransacaoOriginal'] = $this->apiClient->getSerializer()->toQueryValue($id_transacao_original);
        }
        // header params
        
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\AjusteFinanceiroResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\AjusteFinanceiroResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\AjusteFinanceiroResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * alterarProdutoUsingPOST
     *
     * {{{conta_resource_alterar_produto}}}
     *
     * @param int $id {{{conta_resource_alterar_produto_param_id}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\AlterarProdutoRequest $request request (required)
     * @param string $authorization Authorization (optional)
     * @return string
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarProdutoUsingPOST($id, $request, $authorization = null)
    {
        list($response, $statusCode, $httpHeader) = $this->alterarProdutoUsingPOSTWithHttpInfo ($id, $request, $authorization);
        return $response; 
    }


    /**
     * alterarProdutoUsingPOSTWithHttpInfo
     *
     * {{{conta_resource_alterar_produto}}}
     *
     * @param int $id {{{conta_resource_alterar_produto_param_id}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\AlterarProdutoRequest $request request (required)
     * @param string $authorization Authorization (optional)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarProdutoUsingPOSTWithHttpInfo($id, $request, $authorization = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling alterarProdutoUsingPOST');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling alterarProdutoUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/alterar-produto";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        // header params
        
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'string'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * alterarTitularUsingPOST
     *
     * {{{conta_resource_alterar_titular}}}
     *
     * @param int $id {{{conta_resource_alterar_titular_param_id_conta}}} (required)
     * @param int $id_pessoa {{{conta_resource_alterar_titular_param_id_pessoa}}} (required)
     * @param string $authorization Authorization (optional)
     * @return \br.com.conductor.pier.api.v2.model\ContaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarTitularUsingPOST($id, $id_pessoa, $authorization = null)
    {
        list($response, $statusCode, $httpHeader) = $this->alterarTitularUsingPOSTWithHttpInfo ($id, $id_pessoa, $authorization);
        return $response; 
    }


    /**
     * alterarTitularUsingPOSTWithHttpInfo
     *
     * {{{conta_resource_alterar_titular}}}
     *
     * @param int $id {{{conta_resource_alterar_titular_param_id_conta}}} (required)
     * @param int $id_pessoa {{{conta_resource_alterar_titular_param_id_pessoa}}} (required)
     * @param string $authorization Authorization (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\ContaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarTitularUsingPOSTWithHttpInfo($id, $id_pessoa, $authorization = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling alterarTitularUsingPOST');
        }
        // verify the required parameter 'id_pessoa' is set
        if ($id_pessoa === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_pessoa when calling alterarTitularUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/alterar-titular";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($id_pessoa !== null) {
            $queryParams['id_pessoa'] = $this->apiClient->getSerializer()->toQueryValue($id_pessoa);
        }
        // header params
        
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\ContaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\ContaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\ContaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * alterarVencimentoUsingPUT
     *
     * {{{conta_resource_alterar_vencimento}}}
     *
     * @param int $id {{{conta_resource_alterar_vencimento_param_id}}} (required)
     * @param int $novo_dia_vencimento {{{conta_resource_alterar_vencimento_param_novo_dia_vencimento}}} (required)
     * @param string $authorization Authorization (optional)
     * @return \br.com.conductor.pier.api.v2.model\ContaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarVencimentoUsingPUT($id, $novo_dia_vencimento, $authorization = null)
    {
        list($response, $statusCode, $httpHeader) = $this->alterarVencimentoUsingPUTWithHttpInfo ($id, $novo_dia_vencimento, $authorization);
        return $response; 
    }


    /**
     * alterarVencimentoUsingPUTWithHttpInfo
     *
     * {{{conta_resource_alterar_vencimento}}}
     *
     * @param int $id {{{conta_resource_alterar_vencimento_param_id}}} (required)
     * @param int $novo_dia_vencimento {{{conta_resource_alterar_vencimento_param_novo_dia_vencimento}}} (required)
     * @param string $authorization Authorization (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\ContaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarVencimentoUsingPUTWithHttpInfo($id, $novo_dia_vencimento, $authorization = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling alterarVencimentoUsingPUT');
        }
        // verify the required parameter 'novo_dia_vencimento' is set
        if ($novo_dia_vencimento === null) {
            throw new \InvalidArgumentException('Missing the required parameter $novo_dia_vencimento when calling alterarVencimentoUsingPUT');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/alterar-vencimento";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($novo_dia_vencimento !== null) {
            $queryParams['novo_dia_vencimento'] = $this->apiClient->getSerializer()->toQueryValue($novo_dia_vencimento);
        }
        // header params
        
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\ContaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\ContaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\ContaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * ativarAnuidadeUsingPOST
     *
     * {{{conta_resource_ativar_anuidade}}}
     *
     * @param int $id {{{conta_resource_ativar_anuidade_param_id}}} (required)
     * @param int $id_anuidade {{{anuidade_request_id_anuidade_value}}} (required)
     * @param string $authorization Authorization (optional)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param string $ddd {{{anuidade_request_d_d_d_value}}} (optional)
     * @param string $celular {{{anuidade_request_celular_value}}} (optional)
     * @param int $id_operadora {{{anuidade_request_id_operadora_value}}} (optional)
     * @param int $id_origem_comercial {{{anuidade_request_id_origem_comercial_value}}} (optional)
     * @return object
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function ativarAnuidadeUsingPOST($id, $id_anuidade, $authorization = null, $sort = null, $page = null, $limit = null, $ddd = null, $celular = null, $id_operadora = null, $id_origem_comercial = null)
    {
        list($response, $statusCode, $httpHeader) = $this->ativarAnuidadeUsingPOSTWithHttpInfo ($id, $id_anuidade, $authorization, $sort, $page, $limit, $ddd, $celular, $id_operadora, $id_origem_comercial);
        return $response; 
    }


    /**
     * ativarAnuidadeUsingPOSTWithHttpInfo
     *
     * {{{conta_resource_ativar_anuidade}}}
     *
     * @param int $id {{{conta_resource_ativar_anuidade_param_id}}} (required)
     * @param int $id_anuidade {{{anuidade_request_id_anuidade_value}}} (required)
     * @param string $authorization Authorization (optional)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param string $ddd {{{anuidade_request_d_d_d_value}}} (optional)
     * @param string $celular {{{anuidade_request_celular_value}}} (optional)
     * @param int $id_operadora {{{anuidade_request_id_operadora_value}}} (optional)
     * @param int $id_origem_comercial {{{anuidade_request_id_origem_comercial_value}}} (optional)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function ativarAnuidadeUsingPOSTWithHttpInfo($id, $id_anuidade, $authorization = null, $sort = null, $page = null, $limit = null, $ddd = null, $celular = null, $id_operadora = null, $id_origem_comercial = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling ativarAnuidadeUsingPOST');
        }
        // verify the required parameter 'id_anuidade' is set
        if ($id_anuidade === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_anuidade when calling ativarAnuidadeUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/atribuir-anuidade";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id_anuidade !== null) {
            $queryParams['idAnuidade'] = $this->apiClient->getSerializer()->toQueryValue($id_anuidade);
        }// query params
        
        if ($ddd !== null) {
            $queryParams['DDD'] = $this->apiClient->getSerializer()->toQueryValue($ddd);
        }// query params
        
        if ($celular !== null) {
            $queryParams['celular'] = $this->apiClient->getSerializer()->toQueryValue($celular);
        }// query params
        
        if ($id_operadora !== null) {
            $queryParams['idOperadora'] = $this->apiClient->getSerializer()->toQueryValue($id_operadora);
        }// query params
        
        if ($id_origem_comercial !== null) {
            $queryParams['idOrigemComercial'] = $this->apiClient->getSerializer()->toQueryValue($id_origem_comercial);
        }
        // header params
        
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'object'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * ativarEnvioFaturaEmailUsingPOST
     *
     * {{{conta_resource_ativar_envio_fatura_email}}}
     *
     * @param int $id {{{conta_resource_ativar_envio_fatura_email_param_id}}} (required)
     * @param string $authorization Authorization (optional)
     * @return object
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function ativarEnvioFaturaEmailUsingPOST($id, $authorization = null)
    {
        list($response, $statusCode, $httpHeader) = $this->ativarEnvioFaturaEmailUsingPOSTWithHttpInfo ($id, $authorization);
        return $response; 
    }


    /**
     * ativarEnvioFaturaEmailUsingPOSTWithHttpInfo
     *
     * {{{conta_resource_ativar_envio_fatura_email}}}
     *
     * @param int $id {{{conta_resource_ativar_envio_fatura_email_param_id}}} (required)
     * @param string $authorization Authorization (optional)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function ativarEnvioFaturaEmailUsingPOSTWithHttpInfo($id, $authorization = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling ativarEnvioFaturaEmailUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/ativar-fatura-email";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        // header params
        
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'object'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * bloquearUsingPOST1
     *
     * {{{conta_resource_bloquear}}}
     *
     * @param int $id {{{conta_resource_bloquear_param_id}}} (required)
     * @param int $id_status {{{conta_resource_bloquear_param_id_status}}} (required)
     * @param string $authorization Authorization (optional)
     * @return \br.com.conductor.pier.api.v2.model\ContaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function bloquearUsingPOST1($id, $id_status, $authorization = null)
    {
        list($response, $statusCode, $httpHeader) = $this->bloquearUsingPOST1WithHttpInfo ($id, $id_status, $authorization);
        return $response; 
    }


    /**
     * bloquearUsingPOST1WithHttpInfo
     *
     * {{{conta_resource_bloquear}}}
     *
     * @param int $id {{{conta_resource_bloquear_param_id}}} (required)
     * @param int $id_status {{{conta_resource_bloquear_param_id_status}}} (required)
     * @param string $authorization Authorization (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\ContaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function bloquearUsingPOST1WithHttpInfo($id, $id_status, $authorization = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling bloquearUsingPOST1');
        }
        // verify the required parameter 'id_status' is set
        if ($id_status === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_status when calling bloquearUsingPOST1');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/bloquear";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($id_status !== null) {
            $queryParams['id_status'] = $this->apiClient->getSerializer()->toQueryValue($id_status);
        }
        // header params
        
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\ContaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\ContaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\ContaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * cancelarUsingPOST1
     *
     * {{{conta_resource_cancelar}}}
     *
     * @param int $id {{{conta_resource_cancelar_param_id}}} (required)
     * @param int $id_status {{{conta_resource_cancelar_param_id_status}}} (required)
     * @param string $authorization Authorization (optional)
     * @return \br.com.conductor.pier.api.v2.model\ContaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function cancelarUsingPOST1($id, $id_status, $authorization = null)
    {
        list($response, $statusCode, $httpHeader) = $this->cancelarUsingPOST1WithHttpInfo ($id, $id_status, $authorization);
        return $response; 
    }


    /**
     * cancelarUsingPOST1WithHttpInfo
     *
     * {{{conta_resource_cancelar}}}
     *
     * @param int $id {{{conta_resource_cancelar_param_id}}} (required)
     * @param int $id_status {{{conta_resource_cancelar_param_id_status}}} (required)
     * @param string $authorization Authorization (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\ContaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function cancelarUsingPOST1WithHttpInfo($id, $id_status, $authorization = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling cancelarUsingPOST1');
        }
        // verify the required parameter 'id_status' is set
        if ($id_status === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_status when calling cancelarUsingPOST1');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/cancelar";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($id_status !== null) {
            $queryParams['id_status'] = $this->apiClient->getSerializer()->toQueryValue($id_status);
        }
        // header params
        
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\ContaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\ContaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\ContaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarBeneficioPagamentoAtrasoUsingGET
     *
     * {{{conta_resource_consultar_beneficio_pagamento_atraso}}}
     *
     * @param int $id {{{conta_resource_consultar_beneficio_pagamento_atraso_param_id}}} (required)
     * @param string $authorization Authorization (optional)
     * @return \br.com.conductor.pier.api.v2.model\BeneficioPagamentoAtrasoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarBeneficioPagamentoAtrasoUsingGET($id, $authorization = null)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarBeneficioPagamentoAtrasoUsingGETWithHttpInfo ($id, $authorization);
        return $response; 
    }


    /**
     * consultarBeneficioPagamentoAtrasoUsingGETWithHttpInfo
     *
     * {{{conta_resource_consultar_beneficio_pagamento_atraso}}}
     *
     * @param int $id {{{conta_resource_consultar_beneficio_pagamento_atraso_param_id}}} (required)
     * @param string $authorization Authorization (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\BeneficioPagamentoAtrasoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarBeneficioPagamentoAtrasoUsingGETWithHttpInfo($id, $authorization = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarBeneficioPagamentoAtrasoUsingGET');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/consultar-beneficio-pagamento-atraso";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        // header params
        
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\BeneficioPagamentoAtrasoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\BeneficioPagamentoAtrasoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\BeneficioPagamentoAtrasoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarBoletoEmitidoUsingGET
     *
     * {{{conta_resource_consultar_boleto_emitido}}}
     *
     * @param int $id {{{conta_resource_consultar_boleto_emitido_param_id}}} (required)
     * @param string $authorization Authorization (optional)
     * @return \br.com.conductor.pier.api.v2.model\BoletoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarBoletoEmitidoUsingGET($id, $authorization = null)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarBoletoEmitidoUsingGETWithHttpInfo ($id, $authorization);
        return $response; 
    }


    /**
     * consultarBoletoEmitidoUsingGETWithHttpInfo
     *
     * {{{conta_resource_consultar_boleto_emitido}}}
     *
     * @param int $id {{{conta_resource_consultar_boleto_emitido_param_id}}} (required)
     * @param string $authorization Authorization (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\BoletoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarBoletoEmitidoUsingGETWithHttpInfo($id, $authorization = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarBoletoEmitidoUsingGET');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/consultar-dados-pagamento-fatura";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        // header params
        
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\BoletoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\BoletoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\BoletoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarDividaAtualizadaClienteUsingGET
     *
     * {{{conta_resource_consultar_divida_atualizada_cliente}}}
     *
     * @param int $id {{{conta_resource_consultar_divida_atualizada_cliente_param_id}}} (required)
     * @param string $authorization Authorization (optional)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param string $data_vencimento {{{divida_cliente_request_data_vencimento_value}}} (optional)
     * @param int $id_escritorio_cobranca {{{divida_cliente_request_id_escritorio_cobranca_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\DividaClienteResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarDividaAtualizadaClienteUsingGET($id, $authorization = null, $sort = null, $page = null, $limit = null, $data_vencimento = null, $id_escritorio_cobranca = null)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarDividaAtualizadaClienteUsingGETWithHttpInfo ($id, $authorization, $sort, $page, $limit, $data_vencimento, $id_escritorio_cobranca);
        return $response; 
    }


    /**
     * consultarDividaAtualizadaClienteUsingGETWithHttpInfo
     *
     * {{{conta_resource_consultar_divida_atualizada_cliente}}}
     *
     * @param int $id {{{conta_resource_consultar_divida_atualizada_cliente_param_id}}} (required)
     * @param string $authorization Authorization (optional)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param string $data_vencimento {{{divida_cliente_request_data_vencimento_value}}} (optional)
     * @param int $id_escritorio_cobranca {{{divida_cliente_request_id_escritorio_cobranca_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\DividaClienteResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarDividaAtualizadaClienteUsingGETWithHttpInfo($id, $authorization = null, $sort = null, $page = null, $limit = null, $data_vencimento = null, $id_escritorio_cobranca = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarDividaAtualizadaClienteUsingGET');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/recuperar-divida-atualizada";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($data_vencimento !== null) {
            $queryParams['dataVencimento'] = $this->apiClient->getSerializer()->toQueryValue($data_vencimento);
        }// query params
        
        if ($id_escritorio_cobranca !== null) {
            $queryParams['idEscritorioCobranca'] = $this->apiClient->getSerializer()->toQueryValue($id_escritorio_cobranca);
        }
        // header params
        
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\DividaClienteResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\DividaClienteResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\DividaClienteResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarTaxasTarifasUsingGET
     *
     * {{{conta_resource_consultar_taxas_tarifas}}}
     *
     * @param int $id {{{conta_resource_consultar_taxas_tarifas_param_id_conta}}} (required)
     * @param string $authorization Authorization (optional)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageTaxasRefinanciamentoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarTaxasTarifasUsingGET($id, $authorization = null, $sort = null, $page = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarTaxasTarifasUsingGETWithHttpInfo ($id, $authorization, $sort, $page, $limit);
        return $response; 
    }


    /**
     * consultarTaxasTarifasUsingGETWithHttpInfo
     *
     * {{{conta_resource_consultar_taxas_tarifas}}}
     *
     * @param int $id {{{conta_resource_consultar_taxas_tarifas_param_id_conta}}} (required)
     * @param string $authorization Authorization (optional)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageTaxasRefinanciamentoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarTaxasTarifasUsingGETWithHttpInfo($id, $authorization = null, $sort = null, $page = null, $limit = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarTaxasTarifasUsingGET');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/consultar-taxas-tarifas";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // header params
        
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageTaxasRefinanciamentoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageTaxasRefinanciamentoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageTaxasRefinanciamentoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarUsingGET13
     *
     * {{{conta_resource_consultar}}}
     *
     * @param int $id {{{conta_resource_consultar_param_id}}} (required)
     * @param string $authorization Authorization (optional)
     * @return \br.com.conductor.pier.api.v2.model\ContaDetalheResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET13($id, $authorization = null)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarUsingGET13WithHttpInfo ($id, $authorization);
        return $response; 
    }


    /**
     * consultarUsingGET13WithHttpInfo
     *
     * {{{conta_resource_consultar}}}
     *
     * @param int $id {{{conta_resource_consultar_param_id}}} (required)
     * @param string $authorization Authorization (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\ContaDetalheResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET13WithHttpInfo($id, $authorization = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarUsingGET13');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        // header params
        
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\ContaDetalheResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\ContaDetalheResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\ContaDetalheResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarUsingGET48
     *
     * {{{transferencia_resource_consultar}}}
     *
     * @param int $id {{{transferencia_resource_consultar_param_id_conta}}} (required)
     * @param int $id_transferencia {{{transferencia_resource_consultar_param_id_transferencia}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\TransferenciaDetalheResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET48($id, $id_transferencia)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarUsingGET48WithHttpInfo ($id, $id_transferencia);
        return $response; 
    }


    /**
     * consultarUsingGET48WithHttpInfo
     *
     * {{{transferencia_resource_consultar}}}
     *
     * @param int $id {{{transferencia_resource_consultar_param_id_conta}}} (required)
     * @param int $id_transferencia {{{transferencia_resource_consultar_param_id_transferencia}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\TransferenciaDetalheResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET48WithHttpInfo($id, $id_transferencia)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarUsingGET48');
        }
        // verify the required parameter 'id_transferencia' is set
        if ($id_transferencia === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_transferencia when calling consultarUsingGET48');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/transferencias-creditos-cartoes/{id_transferencia}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }// path params
        
        if ($id_transferencia !== null) {
            $resourcePath = str_replace(
                "{" . "id_transferencia" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_transferencia),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\TransferenciaDetalheResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\TransferenciaDetalheResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\TransferenciaDetalheResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * desativarEnvioFaturaEmailUsingPOST
     *
     * {{{conta_resource_desativar_envio_fatura_email}}}
     *
     * @param int $id {{{conta_resource_desativar_envio_fatura_email_param_id}}} (required)
     * @param string $authorization Authorization (optional)
     * @return object
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function desativarEnvioFaturaEmailUsingPOST($id, $authorization = null)
    {
        list($response, $statusCode, $httpHeader) = $this->desativarEnvioFaturaEmailUsingPOSTWithHttpInfo ($id, $authorization);
        return $response; 
    }


    /**
     * desativarEnvioFaturaEmailUsingPOSTWithHttpInfo
     *
     * {{{conta_resource_desativar_envio_fatura_email}}}
     *
     * @param int $id {{{conta_resource_desativar_envio_fatura_email_param_id}}} (required)
     * @param string $authorization Authorization (optional)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function desativarEnvioFaturaEmailUsingPOSTWithHttpInfo($id, $authorization = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling desativarEnvioFaturaEmailUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/desativar-fatura-email";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        // header params
        
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'object'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * gerarBoletoRecargaUsingPOST
     *
     * {{{conta_resource_gerar_boleto_recarga}}}
     *
     * @param int $id {{{conta_resource_gerar_boleto_recarga_param_id}}} (required)
     * @param Number $valor {{{boleto_recarga_request_valor_value}}} (required)
     * @param string $data_vencimento {{{boleto_recarga_request_data_vencimento_value}}} (required)
     * @param string $authorization Authorization (optional)
     * @return \br.com.conductor.pier.api.v2.model\BoletoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function gerarBoletoRecargaUsingPOST($id, $valor, $data_vencimento, $authorization = null)
    {
        list($response, $statusCode, $httpHeader) = $this->gerarBoletoRecargaUsingPOSTWithHttpInfo ($id, $valor, $data_vencimento, $authorization);
        return $response; 
    }


    /**
     * gerarBoletoRecargaUsingPOSTWithHttpInfo
     *
     * {{{conta_resource_gerar_boleto_recarga}}}
     *
     * @param int $id {{{conta_resource_gerar_boleto_recarga_param_id}}} (required)
     * @param Number $valor {{{boleto_recarga_request_valor_value}}} (required)
     * @param string $data_vencimento {{{boleto_recarga_request_data_vencimento_value}}} (required)
     * @param string $authorization Authorization (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\BoletoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function gerarBoletoRecargaUsingPOSTWithHttpInfo($id, $valor, $data_vencimento, $authorization = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling gerarBoletoRecargaUsingPOST');
        }
        // verify the required parameter 'valor' is set
        if ($valor === null) {
            throw new \InvalidArgumentException('Missing the required parameter $valor when calling gerarBoletoRecargaUsingPOST');
        }
        // verify the required parameter 'data_vencimento' is set
        if ($data_vencimento === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data_vencimento when calling gerarBoletoRecargaUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/gerar-boleto-recarga";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($valor !== null) {
            $queryParams['valor'] = $this->apiClient->getSerializer()->toQueryValue($valor);
        }// query params
        
        if ($data_vencimento !== null) {
            $queryParams['dataVencimento'] = $this->apiClient->getSerializer()->toQueryValue($data_vencimento);
        }
        // header params
        
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\BoletoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\BoletoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\BoletoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * gerarCartaoEmbossingUsingPOST
     *
     * {{{conta_resource_gerar_cartao_embossing}}}
     *
     * @param int $id {{{conta_resource_gerar_cartao_embossing_param_id}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\CartaoEmbossingRequest $cartao_embossing_request cartaoEmbossingRequest (required)
     * @param string $authorization Authorization (optional)
     * @return \br.com.conductor.pier.api.v2.model\CartaoEmbossingResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function gerarCartaoEmbossingUsingPOST($id, $cartao_embossing_request, $authorization = null)
    {
        list($response, $statusCode, $httpHeader) = $this->gerarCartaoEmbossingUsingPOSTWithHttpInfo ($id, $cartao_embossing_request, $authorization);
        return $response; 
    }


    /**
     * gerarCartaoEmbossingUsingPOSTWithHttpInfo
     *
     * {{{conta_resource_gerar_cartao_embossing}}}
     *
     * @param int $id {{{conta_resource_gerar_cartao_embossing_param_id}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\CartaoEmbossingRequest $cartao_embossing_request cartaoEmbossingRequest (required)
     * @param string $authorization Authorization (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\CartaoEmbossingResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function gerarCartaoEmbossingUsingPOSTWithHttpInfo($id, $cartao_embossing_request, $authorization = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling gerarCartaoEmbossingUsingPOST');
        }
        // verify the required parameter 'cartao_embossing_request' is set
        if ($cartao_embossing_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cartao_embossing_request when calling gerarCartaoEmbossingUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/gerar-cartao-grafica";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        // header params
        
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($cartao_embossing_request)) {
            $_tempBody = $cartao_embossing_request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\CartaoEmbossingResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\CartaoEmbossingResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\CartaoEmbossingResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * gerarCartaoProvisorioUsingPOST
     *
     * {{{conta_resource_gerar_cartao_provisorio}}}
     *
     * @param int $id {{{conta_resource_gerar_cartao_provisorio_param_id_conta}}} (required)
     * @param string $authorization Authorization (optional)
     * @return \br.com.conductor.pier.api.v2.model\CartaoImpressaoProvisorioResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function gerarCartaoProvisorioUsingPOST($id, $authorization = null)
    {
        list($response, $statusCode, $httpHeader) = $this->gerarCartaoProvisorioUsingPOSTWithHttpInfo ($id, $authorization);
        return $response; 
    }


    /**
     * gerarCartaoProvisorioUsingPOSTWithHttpInfo
     *
     * {{{conta_resource_gerar_cartao_provisorio}}}
     *
     * @param int $id {{{conta_resource_gerar_cartao_provisorio_param_id_conta}}} (required)
     * @param string $authorization Authorization (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\CartaoImpressaoProvisorioResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function gerarCartaoProvisorioUsingPOSTWithHttpInfo($id, $authorization = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling gerarCartaoProvisorioUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/gerar-cartao-provisorio";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        // header params
        
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\CartaoImpressaoProvisorioResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\CartaoImpressaoProvisorioResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\CartaoImpressaoProvisorioResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * gerarCartaoUsingPOST
     *
     * {{{conta_resource_gerar_cartao}}}
     *
     * @param int $id {{{conta_resource_gerar_cartao_param_id}}} (required)
     * @param int $id_pessoa {{{conta_resource_gerar_cartao_param_id_pessoa}}} (required)
     * @param string $authorization Authorization (optional)
     * @param int $id_tipo_plastico {{{conta_resource_gerar_cartao_param_id_tipo_plastico}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\CartaoImpressaoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function gerarCartaoUsingPOST($id, $id_pessoa, $authorization = null, $id_tipo_plastico = null)
    {
        list($response, $statusCode, $httpHeader) = $this->gerarCartaoUsingPOSTWithHttpInfo ($id, $id_pessoa, $authorization, $id_tipo_plastico);
        return $response; 
    }


    /**
     * gerarCartaoUsingPOSTWithHttpInfo
     *
     * {{{conta_resource_gerar_cartao}}}
     *
     * @param int $id {{{conta_resource_gerar_cartao_param_id}}} (required)
     * @param int $id_pessoa {{{conta_resource_gerar_cartao_param_id_pessoa}}} (required)
     * @param string $authorization Authorization (optional)
     * @param int $id_tipo_plastico {{{conta_resource_gerar_cartao_param_id_tipo_plastico}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\CartaoImpressaoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function gerarCartaoUsingPOSTWithHttpInfo($id, $id_pessoa, $authorization = null, $id_tipo_plastico = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling gerarCartaoUsingPOST');
        }
        // verify the required parameter 'id_pessoa' is set
        if ($id_pessoa === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_pessoa when calling gerarCartaoUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/pessoas/{id_pessoa}/gerar-cartao";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($id_tipo_plastico !== null) {
            $queryParams['id_tipo_plastico'] = $this->apiClient->getSerializer()->toQueryValue($id_tipo_plastico);
        }
        // header params
        
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }// path params
        
        if ($id_pessoa !== null) {
            $resourcePath = str_replace(
                "{" . "id_pessoa" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_pessoa),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\CartaoImpressaoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\CartaoImpressaoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\CartaoImpressaoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * gerarCartaoVirtualUsingPOST
     *
     * {{{conta_resource_gerar_cartao_virtual}}}
     *
     * @param int $id {{{conta_resource_gerar_cartao_virtual_param_id}}} (required)
     * @param string $data_validade {{{conta_resource_gerar_cartao_virtual_param_data_validade}}} (required)
     * @param string $authorization Authorization (optional)
     * @return \br.com.conductor.pier.api.v2.model\CartaoImpressaoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function gerarCartaoVirtualUsingPOST($id, $data_validade, $authorization = null)
    {
        list($response, $statusCode, $httpHeader) = $this->gerarCartaoVirtualUsingPOSTWithHttpInfo ($id, $data_validade, $authorization);
        return $response; 
    }


    /**
     * gerarCartaoVirtualUsingPOSTWithHttpInfo
     *
     * {{{conta_resource_gerar_cartao_virtual}}}
     *
     * @param int $id {{{conta_resource_gerar_cartao_virtual_param_id}}} (required)
     * @param string $data_validade {{{conta_resource_gerar_cartao_virtual_param_data_validade}}} (required)
     * @param string $authorization Authorization (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\CartaoImpressaoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function gerarCartaoVirtualUsingPOSTWithHttpInfo($id, $data_validade, $authorization = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling gerarCartaoVirtualUsingPOST');
        }
        // verify the required parameter 'data_validade' is set
        if ($data_validade === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data_validade when calling gerarCartaoVirtualUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/gerar-cartao-virtual";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($data_validade !== null) {
            $queryParams['dataValidade'] = $this->apiClient->getSerializer()->toQueryValue($data_validade);
        }
        // header params
        
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\CartaoImpressaoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\CartaoImpressaoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\CartaoImpressaoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarHistoricoAlteracoesLimitesUsingGET
     *
     * {{{conta_resource_listar_historico_alteracoes_limites}}}
     *
     * @param int $id {{{conta_resource_listar_historico_alteracoes_limites_param_id}}} (required)
     * @param string $authorization Authorization (optional)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageHistoricoEventosResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarHistoricoAlteracoesLimitesUsingGET($id, $authorization = null, $sort = null, $page = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarHistoricoAlteracoesLimitesUsingGETWithHttpInfo ($id, $authorization, $sort, $page, $limit);
        return $response; 
    }


    /**
     * listarHistoricoAlteracoesLimitesUsingGETWithHttpInfo
     *
     * {{{conta_resource_listar_historico_alteracoes_limites}}}
     *
     * @param int $id {{{conta_resource_listar_historico_alteracoes_limites_param_id}}} (required)
     * @param string $authorization Authorization (optional)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageHistoricoEventosResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarHistoricoAlteracoesLimitesUsingGETWithHttpInfo($id, $authorization = null, $sort = null, $page = null, $limit = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling listarHistoricoAlteracoesLimitesUsingGET');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/historicos-alteracoes-limites";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // header params
        
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageHistoricoEventosResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageHistoricoEventosResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageHistoricoEventosResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarHistoricoAssessoriaUsingGET
     *
     * {{{conta_resource_listar_historico_assessoria}}}
     *
     * @param int $id {{{conta_resource_listar_historico_assessoria_param_id}}} (required)
     * @param string $authorization Authorization (optional)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageHistoricoAssessoriaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarHistoricoAssessoriaUsingGET($id, $authorization = null, $sort = null, $page = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarHistoricoAssessoriaUsingGETWithHttpInfo ($id, $authorization, $sort, $page, $limit);
        return $response; 
    }


    /**
     * listarHistoricoAssessoriaUsingGETWithHttpInfo
     *
     * {{{conta_resource_listar_historico_assessoria}}}
     *
     * @param int $id {{{conta_resource_listar_historico_assessoria_param_id}}} (required)
     * @param string $authorization Authorization (optional)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageHistoricoAssessoriaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarHistoricoAssessoriaUsingGETWithHttpInfo($id, $authorization = null, $sort = null, $page = null, $limit = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling listarHistoricoAssessoriaUsingGET');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/historicos-assessorias-cobranca";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // header params
        
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageHistoricoAssessoriaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageHistoricoAssessoriaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageHistoricoAssessoriaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarHistoricoAtrasosFaturasUsingGET
     *
     * {{{conta_resource_listar_historico_atrasos_faturas}}}
     *
     * @param int $id {{{conta_resource_listar_historico_atrasos_faturas_param_id}}} (required)
     * @param string $authorization Authorization (optional)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageHistoricoAtrasoFaturaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarHistoricoAtrasosFaturasUsingGET($id, $authorization = null, $sort = null, $page = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarHistoricoAtrasosFaturasUsingGETWithHttpInfo ($id, $authorization, $sort, $page, $limit);
        return $response; 
    }


    /**
     * listarHistoricoAtrasosFaturasUsingGETWithHttpInfo
     *
     * {{{conta_resource_listar_historico_atrasos_faturas}}}
     *
     * @param int $id {{{conta_resource_listar_historico_atrasos_faturas_param_id}}} (required)
     * @param string $authorization Authorization (optional)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageHistoricoAtrasoFaturaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarHistoricoAtrasosFaturasUsingGETWithHttpInfo($id, $authorization = null, $sort = null, $page = null, $limit = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling listarHistoricoAtrasosFaturasUsingGET');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/historicos-faturas-atrasos";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // header params
        
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageHistoricoAtrasoFaturaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageHistoricoAtrasoFaturaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageHistoricoAtrasoFaturaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarNaoProcessadasUsingGET
     *
     * {{{transacoes_correntes_resource_listar_nao_processadas}}}
     *
     * @param int $id {{{transacoes_correntes_resource_listar_nao_processadas_param_id}}} (required)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param string $data_inicio {{{transacoes_nao_processadas_request_data_inicio_value}}} (optional)
     * @param string $data_fim {{{transacoes_nao_processadas_request_data_fim_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageTransacaoNaoProcessadaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarNaoProcessadasUsingGET($id, $sort = null, $page = null, $limit = null, $data_inicio = null, $data_fim = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarNaoProcessadasUsingGETWithHttpInfo ($id, $sort, $page, $limit, $data_inicio, $data_fim);
        return $response; 
    }


    /**
     * listarNaoProcessadasUsingGETWithHttpInfo
     *
     * {{{transacoes_correntes_resource_listar_nao_processadas}}}
     *
     * @param int $id {{{transacoes_correntes_resource_listar_nao_processadas_param_id}}} (required)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param string $data_inicio {{{transacoes_nao_processadas_request_data_inicio_value}}} (optional)
     * @param string $data_fim {{{transacoes_nao_processadas_request_data_fim_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageTransacaoNaoProcessadaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarNaoProcessadasUsingGETWithHttpInfo($id, $sort = null, $page = null, $limit = null, $data_inicio = null, $data_fim = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling listarNaoProcessadasUsingGET');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/transacoes/listar-nao-processadas";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($data_inicio !== null) {
            $queryParams['dataInicio'] = $this->apiClient->getSerializer()->toQueryValue($data_inicio);
        }// query params
        
        if ($data_fim !== null) {
            $queryParams['dataFim'] = $this->apiClient->getSerializer()->toQueryValue($data_fim);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageTransacaoNaoProcessadaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageTransacaoNaoProcessadaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageTransacaoNaoProcessadaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarProcessadasUsingGET
     *
     * {{{transacoes_correntes_resource_listar_processadas}}}
     *
     * @param int $id {{{transacoes_correntes_resource_listar_processadas_param_id}}} (required)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param string $data_vencimento {{{transacoes_processadas_request_data_vencimento_value}}} (optional)
     * @param string $data_inicio {{{transacoes_processadas_request_data_inicio_value}}} (optional)
     * @param string $data_fim {{{transacoes_processadas_request_data_fim_value}}} (optional)
     * @param int $id_tipo_transacao {{{transacoes_processadas_request_tipo_transacao}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageTransacoesCorrentesResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarProcessadasUsingGET($id, $sort = null, $page = null, $limit = null, $data_vencimento = null, $data_inicio = null, $data_fim = null, $id_tipo_transacao = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarProcessadasUsingGETWithHttpInfo ($id, $sort, $page, $limit, $data_vencimento, $data_inicio, $data_fim, $id_tipo_transacao);
        return $response; 
    }


    /**
     * listarProcessadasUsingGETWithHttpInfo
     *
     * {{{transacoes_correntes_resource_listar_processadas}}}
     *
     * @param int $id {{{transacoes_correntes_resource_listar_processadas_param_id}}} (required)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param string $data_vencimento {{{transacoes_processadas_request_data_vencimento_value}}} (optional)
     * @param string $data_inicio {{{transacoes_processadas_request_data_inicio_value}}} (optional)
     * @param string $data_fim {{{transacoes_processadas_request_data_fim_value}}} (optional)
     * @param int $id_tipo_transacao {{{transacoes_processadas_request_tipo_transacao}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageTransacoesCorrentesResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarProcessadasUsingGETWithHttpInfo($id, $sort = null, $page = null, $limit = null, $data_vencimento = null, $data_inicio = null, $data_fim = null, $id_tipo_transacao = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling listarProcessadasUsingGET');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/transacoes/listar-processadas";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($data_vencimento !== null) {
            $queryParams['dataVencimento'] = $this->apiClient->getSerializer()->toQueryValue($data_vencimento);
        }// query params
        
        if ($data_inicio !== null) {
            $queryParams['dataInicio'] = $this->apiClient->getSerializer()->toQueryValue($data_inicio);
        }// query params
        
        if ($data_fim !== null) {
            $queryParams['dataFim'] = $this->apiClient->getSerializer()->toQueryValue($data_fim);
        }// query params
        
        if ($id_tipo_transacao !== null) {
            $queryParams['idTipoTransacao'] = $this->apiClient->getSerializer()->toQueryValue($id_tipo_transacao);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageTransacoesCorrentesResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageTransacoesCorrentesResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageTransacoesCorrentesResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET18
     *
     * {{{conta_resource_listar}}}
     *
     * @param string $authorization Authorization (optional)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_produto {{{conta_request_id_produto_value}}} (optional)
     * @param int $id_origem_comercial {{{conta_request_id_origem_comercial_value}}} (optional)
     * @param int $id_pessoa {{{conta_request_id_pessoa_value}}} (optional)
     * @param int $id_status_conta {{{conta_request_id_status_conta_value}}} (optional)
     * @param int $dia_vencimento {{{conta_request_dia_vencimento_value}}} (optional)
     * @param int $melhor_dia_compra {{{conta_request_melhor_dia_compra_value}}} (optional)
     * @param string $data_status_conta {{{conta_request_data_status_conta_value}}} (optional)
     * @param string $data_cadastro {{{conta_request_data_cadastro_value}}} (optional)
     * @param string $data_ultima_alteracao_vencimento {{{conta_request_data_ultima_alteracao_vencimento_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageContaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET18($authorization = null, $sort = null, $page = null, $limit = null, $id_produto = null, $id_origem_comercial = null, $id_pessoa = null, $id_status_conta = null, $dia_vencimento = null, $melhor_dia_compra = null, $data_status_conta = null, $data_cadastro = null, $data_ultima_alteracao_vencimento = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGET18WithHttpInfo ($authorization, $sort, $page, $limit, $id_produto, $id_origem_comercial, $id_pessoa, $id_status_conta, $dia_vencimento, $melhor_dia_compra, $data_status_conta, $data_cadastro, $data_ultima_alteracao_vencimento);
        return $response; 
    }


    /**
     * listarUsingGET18WithHttpInfo
     *
     * {{{conta_resource_listar}}}
     *
     * @param string $authorization Authorization (optional)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_produto {{{conta_request_id_produto_value}}} (optional)
     * @param int $id_origem_comercial {{{conta_request_id_origem_comercial_value}}} (optional)
     * @param int $id_pessoa {{{conta_request_id_pessoa_value}}} (optional)
     * @param int $id_status_conta {{{conta_request_id_status_conta_value}}} (optional)
     * @param int $dia_vencimento {{{conta_request_dia_vencimento_value}}} (optional)
     * @param int $melhor_dia_compra {{{conta_request_melhor_dia_compra_value}}} (optional)
     * @param string $data_status_conta {{{conta_request_data_status_conta_value}}} (optional)
     * @param string $data_cadastro {{{conta_request_data_cadastro_value}}} (optional)
     * @param string $data_ultima_alteracao_vencimento {{{conta_request_data_ultima_alteracao_vencimento_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageContaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET18WithHttpInfo($authorization = null, $sort = null, $page = null, $limit = null, $id_produto = null, $id_origem_comercial = null, $id_pessoa = null, $id_status_conta = null, $dia_vencimento = null, $melhor_dia_compra = null, $data_status_conta = null, $data_cadastro = null, $data_ultima_alteracao_vencimento = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/contas";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id_produto !== null) {
            $queryParams['idProduto'] = $this->apiClient->getSerializer()->toQueryValue($id_produto);
        }// query params
        
        if ($id_origem_comercial !== null) {
            $queryParams['idOrigemComercial'] = $this->apiClient->getSerializer()->toQueryValue($id_origem_comercial);
        }// query params
        
        if ($id_pessoa !== null) {
            $queryParams['idPessoa'] = $this->apiClient->getSerializer()->toQueryValue($id_pessoa);
        }// query params
        
        if ($id_status_conta !== null) {
            $queryParams['idStatusConta'] = $this->apiClient->getSerializer()->toQueryValue($id_status_conta);
        }// query params
        
        if ($dia_vencimento !== null) {
            $queryParams['diaVencimento'] = $this->apiClient->getSerializer()->toQueryValue($dia_vencimento);
        }// query params
        
        if ($melhor_dia_compra !== null) {
            $queryParams['melhorDiaCompra'] = $this->apiClient->getSerializer()->toQueryValue($melhor_dia_compra);
        }// query params
        
        if ($data_status_conta !== null) {
            $queryParams['dataStatusConta'] = $this->apiClient->getSerializer()->toQueryValue($data_status_conta);
        }// query params
        
        if ($data_cadastro !== null) {
            $queryParams['dataCadastro'] = $this->apiClient->getSerializer()->toQueryValue($data_cadastro);
        }// query params
        
        if ($data_ultima_alteracao_vencimento !== null) {
            $queryParams['dataUltimaAlteracaoVencimento'] = $this->apiClient->getSerializer()->toQueryValue($data_ultima_alteracao_vencimento);
        }
        // header params
        
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageContaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageContaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageContaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET58
     *
     * {{{transacoes_correntes_resource_listar_nao_processadas_e_processadas}}}
     *
     * @param int $id {{{transacoes_correntes_resource_listar_nao_processadas_param_id}}} (required)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param string $data_vencimento {{{transacoes_processadas_request_data_vencimento_value}}} (optional)
     * @param string $data_inicio {{{transacoes_processadas_request_data_inicio_value}}} (optional)
     * @param string $data_fim {{{transacoes_processadas_request_data_fim_value}}} (optional)
     * @param int $id_tipo_transacao {{{transacoes_processadas_request_tipo_transacao}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageTransacaoProcessadaNaoProcessadaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET58($id, $sort = null, $page = null, $limit = null, $data_vencimento = null, $data_inicio = null, $data_fim = null, $id_tipo_transacao = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGET58WithHttpInfo ($id, $sort, $page, $limit, $data_vencimento, $data_inicio, $data_fim, $id_tipo_transacao);
        return $response; 
    }


    /**
     * listarUsingGET58WithHttpInfo
     *
     * {{{transacoes_correntes_resource_listar_nao_processadas_e_processadas}}}
     *
     * @param int $id {{{transacoes_correntes_resource_listar_nao_processadas_param_id}}} (required)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param string $data_vencimento {{{transacoes_processadas_request_data_vencimento_value}}} (optional)
     * @param string $data_inicio {{{transacoes_processadas_request_data_inicio_value}}} (optional)
     * @param string $data_fim {{{transacoes_processadas_request_data_fim_value}}} (optional)
     * @param int $id_tipo_transacao {{{transacoes_processadas_request_tipo_transacao}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageTransacaoProcessadaNaoProcessadaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET58WithHttpInfo($id, $sort = null, $page = null, $limit = null, $data_vencimento = null, $data_inicio = null, $data_fim = null, $id_tipo_transacao = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling listarUsingGET58');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/transacoes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($data_vencimento !== null) {
            $queryParams['dataVencimento'] = $this->apiClient->getSerializer()->toQueryValue($data_vencimento);
        }// query params
        
        if ($data_inicio !== null) {
            $queryParams['dataInicio'] = $this->apiClient->getSerializer()->toQueryValue($data_inicio);
        }// query params
        
        if ($data_fim !== null) {
            $queryParams['dataFim'] = $this->apiClient->getSerializer()->toQueryValue($data_fim);
        }// query params
        
        if ($id_tipo_transacao !== null) {
            $queryParams['idTipoTransacao'] = $this->apiClient->getSerializer()->toQueryValue($id_tipo_transacao);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageTransacaoProcessadaNaoProcessadaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageTransacaoProcessadaNaoProcessadaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageTransacaoProcessadaNaoProcessadaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET60
     *
     * {{{transferencia_resource_listar}}}
     *
     * @param int $id {{{transferencia_resource_listar_param_id}}} (required)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_transferencia {{{transferencia_request_id_transferencia_value}}} (optional)
     * @param int $id_conta_origem {{{transferencia_request_id_conta_origem_value}}} (optional)
     * @param int $id_conta_destino {{{transferencia_request_id_conta_destino_value}}} (optional)
     * @param Number $valor_transferencia {{{transferencia_request_valor_transferencia_value}}} (optional)
     * @param string $data_transferencia {{{transferencia_request_data_transferencia_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageTransferenciaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET60($id, $sort = null, $page = null, $limit = null, $id_transferencia = null, $id_conta_origem = null, $id_conta_destino = null, $valor_transferencia = null, $data_transferencia = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGET60WithHttpInfo ($id, $sort, $page, $limit, $id_transferencia, $id_conta_origem, $id_conta_destino, $valor_transferencia, $data_transferencia);
        return $response; 
    }


    /**
     * listarUsingGET60WithHttpInfo
     *
     * {{{transferencia_resource_listar}}}
     *
     * @param int $id {{{transferencia_resource_listar_param_id}}} (required)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_transferencia {{{transferencia_request_id_transferencia_value}}} (optional)
     * @param int $id_conta_origem {{{transferencia_request_id_conta_origem_value}}} (optional)
     * @param int $id_conta_destino {{{transferencia_request_id_conta_destino_value}}} (optional)
     * @param Number $valor_transferencia {{{transferencia_request_valor_transferencia_value}}} (optional)
     * @param string $data_transferencia {{{transferencia_request_data_transferencia_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageTransferenciaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET60WithHttpInfo($id, $sort = null, $page = null, $limit = null, $id_transferencia = null, $id_conta_origem = null, $id_conta_destino = null, $valor_transferencia = null, $data_transferencia = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling listarUsingGET60');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/transferencias-creditos-cartoes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id_transferencia !== null) {
            $queryParams['idTransferencia'] = $this->apiClient->getSerializer()->toQueryValue($id_transferencia);
        }// query params
        
        if ($id_conta_origem !== null) {
            $queryParams['idContaOrigem'] = $this->apiClient->getSerializer()->toQueryValue($id_conta_origem);
        }// query params
        
        if ($id_conta_destino !== null) {
            $queryParams['idContaDestino'] = $this->apiClient->getSerializer()->toQueryValue($id_conta_destino);
        }// query params
        
        if ($valor_transferencia !== null) {
            $queryParams['valorTransferencia'] = $this->apiClient->getSerializer()->toQueryValue($valor_transferencia);
        }// query params
        
        if ($data_transferencia !== null) {
            $queryParams['dataTransferencia'] = $this->apiClient->getSerializer()->toQueryValue($data_transferencia);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageTransferenciaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageTransferenciaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageTransferenciaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * reativarUsingPOST1
     *
     * {{{conta_resource_reativar}}}
     *
     * @param int $id {{{conta_resource_reativar_param_id}}} (required)
     * @param string $authorization Authorization (optional)
     * @return object
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function reativarUsingPOST1($id, $authorization = null)
    {
        list($response, $statusCode, $httpHeader) = $this->reativarUsingPOST1WithHttpInfo ($id, $authorization);
        return $response; 
    }


    /**
     * reativarUsingPOST1WithHttpInfo
     *
     * {{{conta_resource_reativar}}}
     *
     * @param int $id {{{conta_resource_reativar_param_id}}} (required)
     * @param string $authorization Authorization (optional)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function reativarUsingPOST1WithHttpInfo($id, $authorization = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reativarUsingPOST1');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/reativar";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        // header params
        
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'object'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * salvarUsingPOST8
     *
     * {{{conta_resource_salvar}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\ContaPersistValue_ $conta_persist contaPersist (required)
     * @param string $authorization Authorization (optional)
     * @return \br.com.conductor.pier.api.v2.model\ContaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST8($conta_persist, $authorization = null)
    {
        list($response, $statusCode, $httpHeader) = $this->salvarUsingPOST8WithHttpInfo ($conta_persist, $authorization);
        return $response; 
    }


    /**
     * salvarUsingPOST8WithHttpInfo
     *
     * {{{conta_resource_salvar}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\ContaPersistValue_ $conta_persist contaPersist (required)
     * @param string $authorization Authorization (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\ContaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST8WithHttpInfo($conta_persist, $authorization = null)
    {
        
        // verify the required parameter 'conta_persist' is set
        if ($conta_persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $conta_persist when calling salvarUsingPOST8');
        }
  
        // parse inputs
        $resourcePath = "/api/contas";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        // header params
        
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($conta_persist)) {
            $_tempBody = $conta_persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\ContaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\ContaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\ContaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * simularEmprestimoFinanciamentoUsingPOST
     *
     * {{{financiamento_resource_simular_emprestimo_financiamento}}}
     *
     * @param int $id {{{financiamento_resource_simular_emprestimo_financiamento_param_id_conta}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\EmprestimoPessoalRequest $request request (required)
     * @return \br.com.conductor.pier.api.v2.model\EmprestimoPessoalResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function simularEmprestimoFinanciamentoUsingPOST($id, $request)
    {
        list($response, $statusCode, $httpHeader) = $this->simularEmprestimoFinanciamentoUsingPOSTWithHttpInfo ($id, $request);
        return $response; 
    }


    /**
     * simularEmprestimoFinanciamentoUsingPOSTWithHttpInfo
     *
     * {{{financiamento_resource_simular_emprestimo_financiamento}}}
     *
     * @param int $id {{{financiamento_resource_simular_emprestimo_financiamento_param_id_conta}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\EmprestimoPessoalRequest $request request (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\EmprestimoPessoalResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function simularEmprestimoFinanciamentoUsingPOSTWithHttpInfo($id, $request)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling simularEmprestimoFinanciamentoUsingPOST');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling simularEmprestimoFinanciamentoUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/simular-emprestimos-financiamentos";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\EmprestimoPessoalResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\EmprestimoPessoalResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\EmprestimoPessoalResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * transacoesUsingGET
     *
     * {{{conta_resource_transacoes}}}
     *
     * @param int $id {{{conta_resource_transacoes_param_id}}} (required)
     * @param string $authorization Authorization (optional)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageTransacaoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function transacoesUsingGET($id, $authorization = null, $sort = null, $page = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->transacoesUsingGETWithHttpInfo ($id, $authorization, $sort, $page, $limit);
        return $response; 
    }


    /**
     * transacoesUsingGETWithHttpInfo
     *
     * {{{conta_resource_transacoes}}}
     *
     * @param int $id {{{conta_resource_transacoes_param_id}}} (required)
     * @param string $authorization Authorization (optional)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageTransacaoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function transacoesUsingGETWithHttpInfo($id, $authorization = null, $sort = null, $page = null, $limit = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling transacoesUsingGET');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/timeline";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // header params
        
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageTransacaoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageTransacaoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageTransacaoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * transferirUsingPOST1
     *
     * {{{transferencia_resource_transferir}}}
     *
     * @param int $id {{{transferencia_resource_transferir_param_id_conta_origem}}} (required)
     * @param int $id_conta_destino {{{transferencia_resource_transferir_param_id_conta_destino}}} (required)
     * @param Number $valor_transferencia {{{transferencia_resource_transferir_param_valor_transferencia}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\TransferenciaDetalheResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function transferirUsingPOST1($id, $id_conta_destino, $valor_transferencia)
    {
        list($response, $statusCode, $httpHeader) = $this->transferirUsingPOST1WithHttpInfo ($id, $id_conta_destino, $valor_transferencia);
        return $response; 
    }


    /**
     * transferirUsingPOST1WithHttpInfo
     *
     * {{{transferencia_resource_transferir}}}
     *
     * @param int $id {{{transferencia_resource_transferir_param_id_conta_origem}}} (required)
     * @param int $id_conta_destino {{{transferencia_resource_transferir_param_id_conta_destino}}} (required)
     * @param Number $valor_transferencia {{{transferencia_resource_transferir_param_valor_transferencia}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\TransferenciaDetalheResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function transferirUsingPOST1WithHttpInfo($id, $id_conta_destino, $valor_transferencia)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling transferirUsingPOST1');
        }
        // verify the required parameter 'id_conta_destino' is set
        if ($id_conta_destino === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_conta_destino when calling transferirUsingPOST1');
        }
        // verify the required parameter 'valor_transferencia' is set
        if ($valor_transferencia === null) {
            throw new \InvalidArgumentException('Missing the required parameter $valor_transferencia when calling transferirUsingPOST1');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/{id}/transferencias-creditos-cartoes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($id_conta_destino !== null) {
            $queryParams['id_conta_destino'] = $this->apiClient->getSerializer()->toQueryValue($id_conta_destino);
        }// query params
        
        if ($valor_transferencia !== null) {
            $queryParams['valor_transferencia'] = $this->apiClient->getSerializer()->toQueryValue($valor_transferencia);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\TransferenciaDetalheResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\TransferenciaDetalheResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\TransferenciaDetalheResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
