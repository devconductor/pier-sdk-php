<?php
/**
 * GlobaltagcontamultiApi
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2;

use \br.com.conductor.pier.api.v2.invoker\Configuration;
use \br.com.conductor.pier.api.v2.invoker\ApiClient;
use \br.com.conductor.pier.api.v2.invoker\ApiException;
use \br.com.conductor.pier.api.v2.invoker\ObjectSerializer;

/**
 * GlobaltagcontamultiApi Class Doc Comment
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GlobaltagcontamultiApi
{

    /**
     * API Client
     * @var \br.com.conductor.pier.api.v2.invoker\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://localhost/');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \br.com.conductor.pier.api.v2.invoker\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient $apiClient set the API client
     * @return GlobaltagcontamultiApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * criarCartoesMultiAppUsingPOST
     *
     * {{{conta_resource_cadastrar_cartao_multiapp}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\CartaoMultiAppPersistValue_ $cartao_multi_app_persist cartaoMultiAppPersist (required)
     * @return \br.com.conductor.pier.api.v2.model\VinculoCartoesResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function criarCartoesMultiAppUsingPOST($cartao_multi_app_persist)
    {
        list($response, $statusCode, $httpHeader) = $this->criarCartoesMultiAppUsingPOSTWithHttpInfo ($cartao_multi_app_persist);
        return $response; 
    }


    /**
     * criarCartoesMultiAppUsingPOSTWithHttpInfo
     *
     * {{{conta_resource_cadastrar_cartao_multiapp}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\CartaoMultiAppPersistValue_ $cartao_multi_app_persist cartaoMultiAppPersist (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\VinculoCartoesResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function criarCartoesMultiAppUsingPOSTWithHttpInfo($cartao_multi_app_persist)
    {
        
        // verify the required parameter 'cartao_multi_app_persist' is set
        if ($cartao_multi_app_persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cartao_multi_app_persist when calling criarCartoesMultiAppUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/cartoes/gerar-cartoes-multiapp";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($cartao_multi_app_persist)) {
            $_tempBody = $cartao_multi_app_persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\VinculoCartoesResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\VinculoCartoesResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\VinculoCartoesResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * criarContasMultiAppUsingPOST
     *
     * {{{conta_resource_cadastrar_conta_multiapp}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\ContaMultiAppPersistValue_ $conta_multi_app_persist contaMultiAppPersist (required)
     * @return \br.com.conductor.pier.api.v2.model\ContaMultiAppResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function criarContasMultiAppUsingPOST($conta_multi_app_persist)
    {
        list($response, $statusCode, $httpHeader) = $this->criarContasMultiAppUsingPOSTWithHttpInfo ($conta_multi_app_persist);
        return $response; 
    }


    /**
     * criarContasMultiAppUsingPOSTWithHttpInfo
     *
     * {{{conta_resource_cadastrar_conta_multiapp}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\ContaMultiAppPersistValue_ $conta_multi_app_persist contaMultiAppPersist (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\ContaMultiAppResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function criarContasMultiAppUsingPOSTWithHttpInfo($conta_multi_app_persist)
    {
        
        // verify the required parameter 'conta_multi_app_persist' is set
        if ($conta_multi_app_persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $conta_multi_app_persist when calling criarContasMultiAppUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/contas/cadastrar-conta-multiapp";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($conta_multi_app_persist)) {
            $_tempBody = $conta_multi_app_persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\ContaMultiAppResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\ContaMultiAppResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\ContaMultiAppResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
