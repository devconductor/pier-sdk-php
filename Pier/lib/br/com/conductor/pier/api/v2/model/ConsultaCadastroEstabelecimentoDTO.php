<?php
/**
 * ConsultaCadastroEstabelecimentoDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2.model;

use \ArrayAccess;
/**
 * ConsultaCadastroEstabelecimentoDTO Class Doc Comment
 *
 * @category    Class
 * @description {{{consulta_cadastro_estabelecimento_d_t_o_description}}}
 * @package     br.com.conductor.pier.api.v2.invoker
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ConsultaCadastroEstabelecimentoDTO implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'data_hora_consulta' => 'string',
        'status' => 'string',
        'tipo_entidade' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'data_hora_consulta' => 'dataHoraConsulta',
        'status' => 'status',
        'tipo_entidade' => 'tipoEntidade'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'data_hora_consulta' => 'setDataHoraConsulta',
        'status' => 'setStatus',
        'tipo_entidade' => 'setTipoEntidade'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'data_hora_consulta' => 'getDataHoraConsulta',
        'status' => 'getStatus',
        'tipo_entidade' => 'getTipoEntidade'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $data_hora_consulta {{{consulta_cadastro_estabelecimento_d_t_o_data_hora_consulta_value}}}
      * @var string
      */
    protected $data_hora_consulta;
    
    /**
      * $status {{{consulta_cadastro_estabelecimento_d_t_o_status_value}}}
      * @var string
      */
    protected $status;
    
    /**
      * $tipo_entidade {{{consulta_cadastro_estabelecimento_d_t_o_tipo_entidade_value}}}
      * @var string
      */
    protected $tipo_entidade;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->data_hora_consulta = $data["data_hora_consulta"];
            $this->status = $data["status"];
            $this->tipo_entidade = $data["tipo_entidade"];
        }
    }
    
    /**
     * Gets data_hora_consulta
     * @return string
     */
    public function getDataHoraConsulta()
    {
        return $this->data_hora_consulta;
    }
  
    /**
     * Sets data_hora_consulta
     * @param string $data_hora_consulta {{{consulta_cadastro_estabelecimento_d_t_o_data_hora_consulta_value}}}
     * @return $this
     */
    public function setDataHoraConsulta($data_hora_consulta)
    {
        
        $this->data_hora_consulta = $data_hora_consulta;
        return $this;
    }
    
    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }
  
    /**
     * Sets status
     * @param string $status {{{consulta_cadastro_estabelecimento_d_t_o_status_value}}}
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array("OK", "NOK");
        if (!in_array($status, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'OK', 'NOK'");
        }
        $this->status = $status;
        return $this;
    }
    
    /**
     * Gets tipo_entidade
     * @return string
     */
    public function getTipoEntidade()
    {
        return $this->tipo_entidade;
    }
  
    /**
     * Sets tipo_entidade
     * @param string $tipo_entidade {{{consulta_cadastro_estabelecimento_d_t_o_tipo_entidade_value}}}
     * @return $this
     */
    public function setTipoEntidade($tipo_entidade)
    {
        $allowed_values = array("ATIVO", "BLOQUEADO");
        if (!in_array($tipo_entidade, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'tipo_entidade', must be one of 'ATIVO', 'BLOQUEADO'");
        }
        $this->tipo_entidade = $tipo_entidade;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
