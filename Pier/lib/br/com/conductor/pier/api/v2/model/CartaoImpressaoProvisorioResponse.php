<?php
/**
 * CartaoImpressaoProvisorioResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2.model;

use \ArrayAccess;
/**
 * CartaoImpressaoProvisorioResponse Class Doc Comment
 *
 * @category    Class
 * @description {{{cartao_impressao_provisorio_response_description}}}
 * @package     br.com.conductor.pier.api.v2.invoker
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CartaoImpressaoProvisorioResponse implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'flag_virtual' => 'int',
        'id_conta' => 'int',
        'id_pessoa' => 'int',
        'id_cartao' => 'int',
        'numero_cartao' => 'string',
        'nome_plastico' => 'string',
        'data_validade' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'flag_virtual' => 'flagVirtual',
        'id_conta' => 'idConta',
        'id_pessoa' => 'idPessoa',
        'id_cartao' => 'idCartao',
        'numero_cartao' => 'numeroCartao',
        'nome_plastico' => 'nomePlastico',
        'data_validade' => 'dataValidade'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'flag_virtual' => 'setFlagVirtual',
        'id_conta' => 'setIdConta',
        'id_pessoa' => 'setIdPessoa',
        'id_cartao' => 'setIdCartao',
        'numero_cartao' => 'setNumeroCartao',
        'nome_plastico' => 'setNomePlastico',
        'data_validade' => 'setDataValidade'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'flag_virtual' => 'getFlagVirtual',
        'id_conta' => 'getIdConta',
        'id_pessoa' => 'getIdPessoa',
        'id_cartao' => 'getIdCartao',
        'numero_cartao' => 'getNumeroCartao',
        'nome_plastico' => 'getNomePlastico',
        'data_validade' => 'getDataValidade'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $flag_virtual 
      * @var int
      */
    protected $flag_virtual;
    
    /**
      * $id_conta {{{cartao_impressao_provisorio_response_id_conta_value}}}
      * @var int
      */
    protected $id_conta;
    
    /**
      * $id_pessoa {{{cartao_impressao_provisorio_response_id_pessoa_value}}}
      * @var int
      */
    protected $id_pessoa;
    
    /**
      * $id_cartao {{{cartao_impressao_provisorio_response_id_cartao_value}}}
      * @var int
      */
    protected $id_cartao;
    
    /**
      * $numero_cartao {{{cartao_impressao_provisorio_response_numero_cartao_value}}}
      * @var string
      */
    protected $numero_cartao;
    
    /**
      * $nome_plastico {{{cartao_impressao_provisorio_response_nome_plastico_value}}}
      * @var string
      */
    protected $nome_plastico;
    
    /**
      * $data_validade {{{cartao_impressao_provisorio_response_data_validade_value}}}
      * @var string
      */
    protected $data_validade;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->flag_virtual = $data["flag_virtual"];
            $this->id_conta = $data["id_conta"];
            $this->id_pessoa = $data["id_pessoa"];
            $this->id_cartao = $data["id_cartao"];
            $this->numero_cartao = $data["numero_cartao"];
            $this->nome_plastico = $data["nome_plastico"];
            $this->data_validade = $data["data_validade"];
        }
    }
    
    /**
     * Gets flag_virtual
     * @return int
     */
    public function getFlagVirtual()
    {
        return $this->flag_virtual;
    }
  
    /**
     * Sets flag_virtual
     * @param int $flag_virtual 
     * @return $this
     */
    public function setFlagVirtual($flag_virtual)
    {
        
        $this->flag_virtual = $flag_virtual;
        return $this;
    }
    
    /**
     * Gets id_conta
     * @return int
     */
    public function getIdConta()
    {
        return $this->id_conta;
    }
  
    /**
     * Sets id_conta
     * @param int $id_conta {{{cartao_impressao_provisorio_response_id_conta_value}}}
     * @return $this
     */
    public function setIdConta($id_conta)
    {
        
        $this->id_conta = $id_conta;
        return $this;
    }
    
    /**
     * Gets id_pessoa
     * @return int
     */
    public function getIdPessoa()
    {
        return $this->id_pessoa;
    }
  
    /**
     * Sets id_pessoa
     * @param int $id_pessoa {{{cartao_impressao_provisorio_response_id_pessoa_value}}}
     * @return $this
     */
    public function setIdPessoa($id_pessoa)
    {
        
        $this->id_pessoa = $id_pessoa;
        return $this;
    }
    
    /**
     * Gets id_cartao
     * @return int
     */
    public function getIdCartao()
    {
        return $this->id_cartao;
    }
  
    /**
     * Sets id_cartao
     * @param int $id_cartao {{{cartao_impressao_provisorio_response_id_cartao_value}}}
     * @return $this
     */
    public function setIdCartao($id_cartao)
    {
        
        $this->id_cartao = $id_cartao;
        return $this;
    }
    
    /**
     * Gets numero_cartao
     * @return string
     */
    public function getNumeroCartao()
    {
        return $this->numero_cartao;
    }
  
    /**
     * Sets numero_cartao
     * @param string $numero_cartao {{{cartao_impressao_provisorio_response_numero_cartao_value}}}
     * @return $this
     */
    public function setNumeroCartao($numero_cartao)
    {
        
        $this->numero_cartao = $numero_cartao;
        return $this;
    }
    
    /**
     * Gets nome_plastico
     * @return string
     */
    public function getNomePlastico()
    {
        return $this->nome_plastico;
    }
  
    /**
     * Sets nome_plastico
     * @param string $nome_plastico {{{cartao_impressao_provisorio_response_nome_plastico_value}}}
     * @return $this
     */
    public function setNomePlastico($nome_plastico)
    {
        
        $this->nome_plastico = $nome_plastico;
        return $this;
    }
    
    /**
     * Gets data_validade
     * @return string
     */
    public function getDataValidade()
    {
        return $this->data_validade;
    }
  
    /**
     * Sets data_validade
     * @param string $data_validade {{{cartao_impressao_provisorio_response_data_validade_value}}}
     * @return $this
     */
    public function setDataValidade($data_validade)
    {
        
        $this->data_validade = $data_validade;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
