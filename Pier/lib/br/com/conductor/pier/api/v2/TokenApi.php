<?php
/**
 * TokenApi
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2;

use \br.com.conductor.pier.api.v2.invoker\Configuration;
use \br.com.conductor.pier.api.v2.invoker\ApiClient;
use \br.com.conductor.pier.api.v2.invoker\ApiException;
use \br.com.conductor.pier.api.v2.invoker\ObjectSerializer;

/**
 * TokenApi Class Doc Comment
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TokenApi
{

    /**
     * API Client
     * @var \br.com.conductor.pier.api.v2.invoker\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost/');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \br.com.conductor.pier.api.v2.invoker\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient $apiClient set the API client
     * @return TokenApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * alterarUsingPUT5
     *
     * Alterar token
     *
     * @param int $id C\u00C3\u00B3digo identificador do token (required)
     * @param string $token Token (optional)
     * @param int $base C\u00C3\u00B3digo identificador da base (optional)
     * @param string $owner Owner do token (optional)
     * @param string $status Status do token (optional)
     * @param string $criado_por Descri\u00C3\u00A7\u00C3\u00A3o de quem criou o token (optional)
     * @param string $alterado_por Descri\u00C3\u00A7\u00C3\u00A3o de quem alterou o token (optional)
     * @return \br.com.conductor.pier.api.v2.model\Token
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUT5($id, $token = null, $base = null, $owner = null, $status = null, $criado_por = null, $alterado_por = null)
    {
        list($response, $statusCode, $httpHeader) = $this->alterarUsingPUT5WithHttpInfo ($id, $token, $base, $owner, $status, $criado_por, $alterado_por);
        return $response; 
    }


    /**
     * alterarUsingPUT5WithHttpInfo
     *
     * Alterar token
     *
     * @param int $id C\u00C3\u00B3digo identificador do token (required)
     * @param string $token Token (optional)
     * @param int $base C\u00C3\u00B3digo identificador da base (optional)
     * @param string $owner Owner do token (optional)
     * @param string $status Status do token (optional)
     * @param string $criado_por Descri\u00C3\u00A7\u00C3\u00A3o de quem criou o token (optional)
     * @param string $alterado_por Descri\u00C3\u00A7\u00C3\u00A3o de quem alterou o token (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\Token, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUT5WithHttpInfo($id, $token = null, $base = null, $owner = null, $status = null, $criado_por = null, $alterado_por = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling alterarUsingPUT5');
        }
  
        // parse inputs
        $resourcePath = "/api/tokens";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }// query params
        
        if ($token !== null) {
            $queryParams['token'] = $this->apiClient->getSerializer()->toQueryValue($token);
        }// query params
        
        if ($base !== null) {
            $queryParams['base'] = $this->apiClient->getSerializer()->toQueryValue($base);
        }// query params
        
        if ($owner !== null) {
            $queryParams['owner'] = $this->apiClient->getSerializer()->toQueryValue($owner);
        }// query params
        
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }// query params
        
        if ($criado_por !== null) {
            $queryParams['criadoPor'] = $this->apiClient->getSerializer()->toQueryValue($criado_por);
        }// query params
        
        if ($alterado_por !== null) {
            $queryParams['alteradoPor'] = $this->apiClient->getSerializer()->toQueryValue($alterado_por);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\Token'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\Token', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\Token', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * callbackUsingPOST
     *
     * /api/tokens/callback
     *
     * @param \br.com.conductor.pier.api.v2.model\BodyAccessToken $body_access_token bodyAccessToken (required)
     * @return \br.com.conductor.pier.api.v2.model\BodyAccessToken
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function callbackUsingPOST($body_access_token)
    {
        list($response, $statusCode, $httpHeader) = $this->callbackUsingPOSTWithHttpInfo ($body_access_token);
        return $response; 
    }


    /**
     * callbackUsingPOSTWithHttpInfo
     *
     * /api/tokens/callback
     *
     * @param \br.com.conductor.pier.api.v2.model\BodyAccessToken $body_access_token bodyAccessToken (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\BodyAccessToken, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function callbackUsingPOSTWithHttpInfo($body_access_token)
    {
        
        // verify the required parameter 'body_access_token' is set
        if ($body_access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body_access_token when calling callbackUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/tokens/callback";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body_access_token)) {
            $_tempBody = $body_access_token;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\BodyAccessToken'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\BodyAccessToken', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\BodyAccessToken', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarUsingGET14
     *
     * Consultar token
     *
     * @param int $id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do token (id). (required)
     * @return \br.com.conductor.pier.api.v2.model\Token
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET14($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarUsingGET14WithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarUsingGET14WithHttpInfo
     *
     * Consultar token
     *
     * @param int $id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do token (id). (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\Token, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET14WithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarUsingGET14');
        }
  
        // parse inputs
        $resourcePath = "/api/tokens/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\Token'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\Token', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\Token', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET14
     *
     * Listar tokens
     *
     * @param int $page P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     * @param int $limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100) (optional)
     * @param int $id C\u00C3\u00B3digo identificador do token (optional)
     * @param string $token Token (optional)
     * @param int $base C\u00C3\u00B3digo identificador da base (optional)
     * @param string $owner Owner do token (optional)
     * @param string $status Status do token (optional)
     * @param string $criado_por Descri\u00C3\u00A7\u00C3\u00A3o de quem criou o token (optional)
     * @param \DateTime $data_criacao Data de cria\u00C3\u00A7\u00C3\u00A3o do token (optional)
     * @param string $alterado_por Descri\u00C3\u00A7\u00C3\u00A3o de quem alterou o token (optional)
     * @param \DateTime $data_modificacao Data de modifica\u00C3\u00A7\u00C3\u00A3o do token (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageBases
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET14($page = null, $limit = null, $id = null, $token = null, $base = null, $owner = null, $status = null, $criado_por = null, $data_criacao = null, $alterado_por = null, $data_modificacao = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGET14WithHttpInfo ($page, $limit, $id, $token, $base, $owner, $status, $criado_por, $data_criacao, $alterado_por, $data_modificacao);
        return $response; 
    }


    /**
     * listarUsingGET14WithHttpInfo
     *
     * Listar tokens
     *
     * @param int $page P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     * @param int $limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100) (optional)
     * @param int $id C\u00C3\u00B3digo identificador do token (optional)
     * @param string $token Token (optional)
     * @param int $base C\u00C3\u00B3digo identificador da base (optional)
     * @param string $owner Owner do token (optional)
     * @param string $status Status do token (optional)
     * @param string $criado_por Descri\u00C3\u00A7\u00C3\u00A3o de quem criou o token (optional)
     * @param \DateTime $data_criacao Data de cria\u00C3\u00A7\u00C3\u00A3o do token (optional)
     * @param string $alterado_por Descri\u00C3\u00A7\u00C3\u00A3o de quem alterou o token (optional)
     * @param \DateTime $data_modificacao Data de modifica\u00C3\u00A7\u00C3\u00A3o do token (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageBases, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET14WithHttpInfo($page = null, $limit = null, $id = null, $token = null, $base = null, $owner = null, $status = null, $criado_por = null, $data_criacao = null, $alterado_por = null, $data_modificacao = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/tokens";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }// query params
        
        if ($token !== null) {
            $queryParams['token'] = $this->apiClient->getSerializer()->toQueryValue($token);
        }// query params
        
        if ($base !== null) {
            $queryParams['base'] = $this->apiClient->getSerializer()->toQueryValue($base);
        }// query params
        
        if ($owner !== null) {
            $queryParams['owner'] = $this->apiClient->getSerializer()->toQueryValue($owner);
        }// query params
        
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }// query params
        
        if ($criado_por !== null) {
            $queryParams['criadoPor'] = $this->apiClient->getSerializer()->toQueryValue($criado_por);
        }// query params
        
        if ($data_criacao !== null) {
            $queryParams['dataCriacao'] = $this->apiClient->getSerializer()->toQueryValue($data_criacao);
        }// query params
        
        if ($alterado_por !== null) {
            $queryParams['alteradoPor'] = $this->apiClient->getSerializer()->toQueryValue($alterado_por);
        }// query params
        
        if ($data_modificacao !== null) {
            $queryParams['dataModificacao'] = $this->apiClient->getSerializer()->toQueryValue($data_modificacao);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageBases'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageBases', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageBases', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * salvarUsingPOST5
     *
     * Salvar token
     *
     * @param string $token Token (optional)
     * @param int $base C\u00C3\u00B3digo identificador da base (optional)
     * @param string $owner Owner do token (optional)
     * @param string $status Status do token (optional)
     * @param string $criado_por Descri\u00C3\u00A7\u00C3\u00A3o de quem criou o token (optional)
     * @param string $alterado_por Descri\u00C3\u00A7\u00C3\u00A3o de quem alterou o token (optional)
     * @return \br.com.conductor.pier.api.v2.model\Token
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST5($token = null, $base = null, $owner = null, $status = null, $criado_por = null, $alterado_por = null)
    {
        list($response, $statusCode, $httpHeader) = $this->salvarUsingPOST5WithHttpInfo ($token, $base, $owner, $status, $criado_por, $alterado_por);
        return $response; 
    }


    /**
     * salvarUsingPOST5WithHttpInfo
     *
     * Salvar token
     *
     * @param string $token Token (optional)
     * @param int $base C\u00C3\u00B3digo identificador da base (optional)
     * @param string $owner Owner do token (optional)
     * @param string $status Status do token (optional)
     * @param string $criado_por Descri\u00C3\u00A7\u00C3\u00A3o de quem criou o token (optional)
     * @param string $alterado_por Descri\u00C3\u00A7\u00C3\u00A3o de quem alterou o token (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\Token, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST5WithHttpInfo($token = null, $base = null, $owner = null, $status = null, $criado_por = null, $alterado_por = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/tokens";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($token !== null) {
            $queryParams['token'] = $this->apiClient->getSerializer()->toQueryValue($token);
        }// query params
        
        if ($base !== null) {
            $queryParams['base'] = $this->apiClient->getSerializer()->toQueryValue($base);
        }// query params
        
        if ($owner !== null) {
            $queryParams['owner'] = $this->apiClient->getSerializer()->toQueryValue($owner);
        }// query params
        
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }// query params
        
        if ($criado_por !== null) {
            $queryParams['criadoPor'] = $this->apiClient->getSerializer()->toQueryValue($criado_por);
        }// query params
        
        if ($alterado_por !== null) {
            $queryParams['alteradoPor'] = $this->apiClient->getSerializer()->toQueryValue($alterado_por);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\Token'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\Token', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\Token', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * validarUsingPOST
     *
     * /api/tokens/validar
     *
     * @param \br.com.conductor.pier.api.v2.model\BodyAccessToken $body_access_token bodyAccessToken (required)
     * @return object
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function validarUsingPOST($body_access_token)
    {
        list($response, $statusCode, $httpHeader) = $this->validarUsingPOSTWithHttpInfo ($body_access_token);
        return $response; 
    }


    /**
     * validarUsingPOSTWithHttpInfo
     *
     * /api/tokens/validar
     *
     * @param \br.com.conductor.pier.api.v2.model\BodyAccessToken $body_access_token bodyAccessToken (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function validarUsingPOSTWithHttpInfo($body_access_token)
    {
        
        // verify the required parameter 'body_access_token' is set
        if ($body_access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body_access_token when calling validarUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/tokens/validar";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body_access_token)) {
            $_tempBody = $body_access_token;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'object'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
