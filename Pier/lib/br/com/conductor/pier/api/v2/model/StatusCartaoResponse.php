<?php
/**
 * StatusCartaoResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2.model;

use \ArrayAccess;
/**
 * StatusCartaoResponse Class Doc Comment
 *
 * @category    Class
 * @description Representa\u00E7\u00E3o do recurso Status Cart\u00E3o
 * @package     br.com.conductor.pier.api.v2.invoker
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class StatusCartaoResponse implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'nome' => 'string',
        'permite_desbloquear' => 'int',
        'permite_atribuir_como_bloqueio' => 'int',
        'permite_atribuir_como_cancelamento' => 'int',
        'cobrar_tarifa_ao_emitir_nova_via' => 'int'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'nome' => 'nome',
        'permite_desbloquear' => 'permiteDesbloquear',
        'permite_atribuir_como_bloqueio' => 'permiteAtribuirComoBloqueio',
        'permite_atribuir_como_cancelamento' => 'permiteAtribuirComoCancelamento',
        'cobrar_tarifa_ao_emitir_nova_via' => 'cobrarTarifaAoEmitirNovaVia'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'nome' => 'setNome',
        'permite_desbloquear' => 'setPermiteDesbloquear',
        'permite_atribuir_como_bloqueio' => 'setPermiteAtribuirComoBloqueio',
        'permite_atribuir_como_cancelamento' => 'setPermiteAtribuirComoCancelamento',
        'cobrar_tarifa_ao_emitir_nova_via' => 'setCobrarTarifaAoEmitirNovaVia'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'nome' => 'getNome',
        'permite_desbloquear' => 'getPermiteDesbloquear',
        'permite_atribuir_como_bloqueio' => 'getPermiteAtribuirComoBloqueio',
        'permite_atribuir_como_cancelamento' => 'getPermiteAtribuirComoCancelamento',
        'cobrar_tarifa_ao_emitir_nova_via' => 'getCobrarTarifaAoEmitirNovaVia'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id C\u00F3digo de Identifica\u00E7\u00E3o do Status do Cart\u00E3o (id) 
      * @var int
      */
    protected $id;
    
    /**
      * $nome Nome atribu\u00EDdo ao Status de Entrega do Cart\u00E3o.
      * @var string
      */
    protected $nome;
    
    /**
      * $permite_desbloquear Par\u00E2metro que define se o status do cart\u00E3o permite a reativa\u00E7\u00E3o do cart\u00E3o, sendo: 0: Inativo e 1: Ativo.
      * @var int
      */
    protected $permite_desbloquear;
    
    /**
      * $permite_atribuir_como_bloqueio Par\u00E2metro que define se o status do cart\u00E3o permite a reativa\u00E7\u00E3o do cart\u00E3o, sendo: 0: Inativo e 1: Ativo.
      * @var int
      */
    protected $permite_atribuir_como_bloqueio;
    
    /**
      * $permite_atribuir_como_cancelamento Par\u00E2metro que define se o status do cart\u00E3o permite a reativa\u00E7\u00E3o do cart\u00E3o, sendo: 0: Inativo e 1: Ativo.
      * @var int
      */
    protected $permite_atribuir_como_cancelamento;
    
    /**
      * $cobrar_tarifa_ao_emitir_nova_via Par\u00E2metro que define se o status do cart\u00E3o permite a reativa\u00E7\u00E3o do cart\u00E3o, sendo: 0: Inativo e 1: Ativo.
      * @var int
      */
    protected $cobrar_tarifa_ao_emitir_nova_via;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->nome = $data["nome"];
            $this->permite_desbloquear = $data["permite_desbloquear"];
            $this->permite_atribuir_como_bloqueio = $data["permite_atribuir_como_bloqueio"];
            $this->permite_atribuir_como_cancelamento = $data["permite_atribuir_como_cancelamento"];
            $this->cobrar_tarifa_ao_emitir_nova_via = $data["cobrar_tarifa_ao_emitir_nova_via"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id C\u00F3digo de Identifica\u00E7\u00E3o do Status do Cart\u00E3o (id) 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets nome
     * @return string
     */
    public function getNome()
    {
        return $this->nome;
    }
  
    /**
     * Sets nome
     * @param string $nome Nome atribu\u00EDdo ao Status de Entrega do Cart\u00E3o.
     * @return $this
     */
    public function setNome($nome)
    {
        
        $this->nome = $nome;
        return $this;
    }
    
    /**
     * Gets permite_desbloquear
     * @return int
     */
    public function getPermiteDesbloquear()
    {
        return $this->permite_desbloquear;
    }
  
    /**
     * Sets permite_desbloquear
     * @param int $permite_desbloquear Par\u00E2metro que define se o status do cart\u00E3o permite a reativa\u00E7\u00E3o do cart\u00E3o, sendo: 0: Inativo e 1: Ativo.
     * @return $this
     */
    public function setPermiteDesbloquear($permite_desbloquear)
    {
        
        $this->permite_desbloquear = $permite_desbloquear;
        return $this;
    }
    
    /**
     * Gets permite_atribuir_como_bloqueio
     * @return int
     */
    public function getPermiteAtribuirComoBloqueio()
    {
        return $this->permite_atribuir_como_bloqueio;
    }
  
    /**
     * Sets permite_atribuir_como_bloqueio
     * @param int $permite_atribuir_como_bloqueio Par\u00E2metro que define se o status do cart\u00E3o permite a reativa\u00E7\u00E3o do cart\u00E3o, sendo: 0: Inativo e 1: Ativo.
     * @return $this
     */
    public function setPermiteAtribuirComoBloqueio($permite_atribuir_como_bloqueio)
    {
        
        $this->permite_atribuir_como_bloqueio = $permite_atribuir_como_bloqueio;
        return $this;
    }
    
    /**
     * Gets permite_atribuir_como_cancelamento
     * @return int
     */
    public function getPermiteAtribuirComoCancelamento()
    {
        return $this->permite_atribuir_como_cancelamento;
    }
  
    /**
     * Sets permite_atribuir_como_cancelamento
     * @param int $permite_atribuir_como_cancelamento Par\u00E2metro que define se o status do cart\u00E3o permite a reativa\u00E7\u00E3o do cart\u00E3o, sendo: 0: Inativo e 1: Ativo.
     * @return $this
     */
    public function setPermiteAtribuirComoCancelamento($permite_atribuir_como_cancelamento)
    {
        
        $this->permite_atribuir_como_cancelamento = $permite_atribuir_como_cancelamento;
        return $this;
    }
    
    /**
     * Gets cobrar_tarifa_ao_emitir_nova_via
     * @return int
     */
    public function getCobrarTarifaAoEmitirNovaVia()
    {
        return $this->cobrar_tarifa_ao_emitir_nova_via;
    }
  
    /**
     * Sets cobrar_tarifa_ao_emitir_nova_via
     * @param int $cobrar_tarifa_ao_emitir_nova_via Par\u00E2metro que define se o status do cart\u00E3o permite a reativa\u00E7\u00E3o do cart\u00E3o, sendo: 0: Inativo e 1: Ativo.
     * @return $this
     */
    public function setCobrarTarifaAoEmitirNovaVia($cobrar_tarifa_ao_emitir_nova_via)
    {
        
        $this->cobrar_tarifa_ao_emitir_nova_via = $cobrar_tarifa_ao_emitir_nova_via;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
