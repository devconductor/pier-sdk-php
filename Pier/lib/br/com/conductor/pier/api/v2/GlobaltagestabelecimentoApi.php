<?php
/**
 * GlobaltagestabelecimentoApi
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2;

use \br.com.conductor.pier.api.v2.invoker\Configuration;
use \br.com.conductor.pier.api.v2.invoker\ApiClient;
use \br.com.conductor.pier.api.v2.invoker\ApiException;
use \br.com.conductor.pier.api.v2.invoker\ObjectSerializer;

/**
 * GlobaltagestabelecimentoApi Class Doc Comment
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GlobaltagestabelecimentoApi
{

    /**
     * API Client
     * @var \br.com.conductor.pier.api.v2.invoker\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://localhost/');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \br.com.conductor.pier.api.v2.invoker\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient $apiClient set the API client
     * @return GlobaltagestabelecimentoApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * alterarOrigemComercialUsingPUT
     *
     * {{{origem_comercial_resource_alterar_origem_comercial}}}
     *
     * @param int $id {{{origem_comercial_resource_alterar_origem_comercial_param_id}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\OrigemComercialUpdate $origem_comercial_update origemComercialUpdate (required)
     * @return \br.com.conductor.pier.api.v2.model\OrigemComercialResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarOrigemComercialUsingPUT($id, $origem_comercial_update)
    {
        list($response, $statusCode, $httpHeader) = $this->alterarOrigemComercialUsingPUTWithHttpInfo ($id, $origem_comercial_update);
        return $response; 
    }


    /**
     * alterarOrigemComercialUsingPUTWithHttpInfo
     *
     * {{{origem_comercial_resource_alterar_origem_comercial}}}
     *
     * @param int $id {{{origem_comercial_resource_alterar_origem_comercial_param_id}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\OrigemComercialUpdate $origem_comercial_update origemComercialUpdate (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\OrigemComercialResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarOrigemComercialUsingPUTWithHttpInfo($id, $origem_comercial_update)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling alterarOrigemComercialUsingPUT');
        }
        // verify the required parameter 'origem_comercial_update' is set
        if ($origem_comercial_update === null) {
            throw new \InvalidArgumentException('Missing the required parameter $origem_comercial_update when calling alterarOrigemComercialUsingPUT');
        }
  
        // parse inputs
        $resourcePath = "/api/origens-comerciais/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($origem_comercial_update)) {
            $_tempBody = $origem_comercial_update;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\OrigemComercialResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\OrigemComercialResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\OrigemComercialResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * alterarUsingPUT10
     *
     * {{{maquineta_resource_alterar}}}
     *
     * @param int $id {{{maquineta_resource_alterar_param_id}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\MaquinetaUpdate $maquineta_update maquinetaUpdate (required)
     * @return \br.com.conductor.pier.api.v2.model\MaquinetaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUT10($id, $maquineta_update)
    {
        list($response, $statusCode, $httpHeader) = $this->alterarUsingPUT10WithHttpInfo ($id, $maquineta_update);
        return $response; 
    }


    /**
     * alterarUsingPUT10WithHttpInfo
     *
     * {{{maquineta_resource_alterar}}}
     *
     * @param int $id {{{maquineta_resource_alterar_param_id}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\MaquinetaUpdate $maquineta_update maquinetaUpdate (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\MaquinetaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUT10WithHttpInfo($id, $maquineta_update)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling alterarUsingPUT10');
        }
        // verify the required parameter 'maquineta_update' is set
        if ($maquineta_update === null) {
            throw new \InvalidArgumentException('Missing the required parameter $maquineta_update when calling alterarUsingPUT10');
        }
  
        // parse inputs
        $resourcePath = "/api/maquinetas/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($maquineta_update)) {
            $_tempBody = $maquineta_update;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\MaquinetaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\MaquinetaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\MaquinetaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * alterarUsingPUT11
     *
     * {{{operacao_credor_resource_alterar}}}
     *
     * @param int $id {{{operacao_credor_resource_alterar_param_id}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\OperacaoCredorUpdate $operacao_credor_update operacaoCredorUpdate (required)
     * @return \br.com.conductor.pier.api.v2.model\OperacaoCredorResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUT11($id, $operacao_credor_update)
    {
        list($response, $statusCode, $httpHeader) = $this->alterarUsingPUT11WithHttpInfo ($id, $operacao_credor_update);
        return $response; 
    }


    /**
     * alterarUsingPUT11WithHttpInfo
     *
     * {{{operacao_credor_resource_alterar}}}
     *
     * @param int $id {{{operacao_credor_resource_alterar_param_id}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\OperacaoCredorUpdate $operacao_credor_update operacaoCredorUpdate (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\OperacaoCredorResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUT11WithHttpInfo($id, $operacao_credor_update)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling alterarUsingPUT11');
        }
        // verify the required parameter 'operacao_credor_update' is set
        if ($operacao_credor_update === null) {
            throw new \InvalidArgumentException('Missing the required parameter $operacao_credor_update when calling alterarUsingPUT11');
        }
  
        // parse inputs
        $resourcePath = "/api/regras-operacoes-estabelecimentos/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($operacao_credor_update)) {
            $_tempBody = $operacao_credor_update;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\OperacaoCredorResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\OperacaoCredorResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\OperacaoCredorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * alterarUsingPUT17
     *
     * {{{telefone_estabelecimento_resource_alterar}}}
     *
     * @param int $id {{{telefone_estabelecimento_resource_alterar_param_id}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\TelefoneEstabelecimentoUpdate $telefone_estabelecimento_update telefoneEstabelecimentoUpdate (required)
     * @return \br.com.conductor.pier.api.v2.model\TelefoneEstabelecimentoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUT17($id, $telefone_estabelecimento_update)
    {
        list($response, $statusCode, $httpHeader) = $this->alterarUsingPUT17WithHttpInfo ($id, $telefone_estabelecimento_update);
        return $response; 
    }


    /**
     * alterarUsingPUT17WithHttpInfo
     *
     * {{{telefone_estabelecimento_resource_alterar}}}
     *
     * @param int $id {{{telefone_estabelecimento_resource_alterar_param_id}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\TelefoneEstabelecimentoUpdate $telefone_estabelecimento_update telefoneEstabelecimentoUpdate (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\TelefoneEstabelecimentoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUT17WithHttpInfo($id, $telefone_estabelecimento_update)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling alterarUsingPUT17');
        }
        // verify the required parameter 'telefone_estabelecimento_update' is set
        if ($telefone_estabelecimento_update === null) {
            throw new \InvalidArgumentException('Missing the required parameter $telefone_estabelecimento_update when calling alterarUsingPUT17');
        }
  
        // parse inputs
        $resourcePath = "/api/telefones-estabelecimentos/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($telefone_estabelecimento_update)) {
            $_tempBody = $telefone_estabelecimento_update;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\TelefoneEstabelecimentoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\TelefoneEstabelecimentoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\TelefoneEstabelecimentoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * alterarUsingPUT19
     *
     * {{{terminal_resource_alterar}}}
     *
     * @param int $id {{{terminal_resource_alterar_param_id}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\TerminalUpdateValue_ $terminal_update terminalUpdate (required)
     * @return \br.com.conductor.pier.api.v2.model\TerminalResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUT19($id, $terminal_update)
    {
        list($response, $statusCode, $httpHeader) = $this->alterarUsingPUT19WithHttpInfo ($id, $terminal_update);
        return $response; 
    }


    /**
     * alterarUsingPUT19WithHttpInfo
     *
     * {{{terminal_resource_alterar}}}
     *
     * @param int $id {{{terminal_resource_alterar_param_id}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\TerminalUpdateValue_ $terminal_update terminalUpdate (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\TerminalResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUT19WithHttpInfo($id, $terminal_update)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling alterarUsingPUT19');
        }
        // verify the required parameter 'terminal_update' is set
        if ($terminal_update === null) {
            throw new \InvalidArgumentException('Missing the required parameter $terminal_update when calling alterarUsingPUT19');
        }
  
        // parse inputs
        $resourcePath = "/api/terminais/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($terminal_update)) {
            $_tempBody = $terminal_update;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\TerminalResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\TerminalResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\TerminalResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * alterarUsingPUT6
     *
     * {{{estabelecimento_resource_alterar}}}
     *
     * @param int $id {{{estabelecimento_resource_alterar_param_id_estabelecimento}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\EstabelecimentoUpdate $update update (required)
     * @return \br.com.conductor.pier.api.v2.model\EstabelecimentoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUT6($id, $update)
    {
        list($response, $statusCode, $httpHeader) = $this->alterarUsingPUT6WithHttpInfo ($id, $update);
        return $response; 
    }


    /**
     * alterarUsingPUT6WithHttpInfo
     *
     * {{{estabelecimento_resource_alterar}}}
     *
     * @param int $id {{{estabelecimento_resource_alterar_param_id_estabelecimento}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\EstabelecimentoUpdate $update update (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\EstabelecimentoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUT6WithHttpInfo($id, $update)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling alterarUsingPUT6');
        }
        // verify the required parameter 'update' is set
        if ($update === null) {
            throw new \InvalidArgumentException('Missing the required parameter $update when calling alterarUsingPUT6');
        }
  
        // parse inputs
        $resourcePath = "/api/estabelecimentos/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($update)) {
            $_tempBody = $update;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\EstabelecimentoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\EstabelecimentoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\EstabelecimentoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * alterarUsingPUT8
     *
     * {{{grupo_economico_resource_alterar}}}
     *
     * @param int $id {{{grupo_economico_resource_alterar_param_id}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\GrupoEconomicoDTO $grupo_economico_dto grupoEconomicoDTO (required)
     * @return \br.com.conductor.pier.api.v2.model\GrupoEconomicoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUT8($id, $grupo_economico_dto)
    {
        list($response, $statusCode, $httpHeader) = $this->alterarUsingPUT8WithHttpInfo ($id, $grupo_economico_dto);
        return $response; 
    }


    /**
     * alterarUsingPUT8WithHttpInfo
     *
     * {{{grupo_economico_resource_alterar}}}
     *
     * @param int $id {{{grupo_economico_resource_alterar_param_id}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\GrupoEconomicoDTO $grupo_economico_dto grupoEconomicoDTO (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\GrupoEconomicoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUT8WithHttpInfo($id, $grupo_economico_dto)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling alterarUsingPUT8');
        }
        // verify the required parameter 'grupo_economico_dto' is set
        if ($grupo_economico_dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $grupo_economico_dto when calling alterarUsingPUT8');
        }
  
        // parse inputs
        $resourcePath = "/api/grupos-economicos/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($grupo_economico_dto)) {
            $_tempBody = $grupo_economico_dto;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\GrupoEconomicoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\GrupoEconomicoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\GrupoEconomicoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * cadastrarOrigemComercialUsingPOST
     *
     * {{{origem_comercial_resource_cadastrar_origem_comercial}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\OrigemComercialPersist $origem_comercial_persist origemComercialPersist (required)
     * @return \br.com.conductor.pier.api.v2.model\OrigemComercialResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function cadastrarOrigemComercialUsingPOST($origem_comercial_persist)
    {
        list($response, $statusCode, $httpHeader) = $this->cadastrarOrigemComercialUsingPOSTWithHttpInfo ($origem_comercial_persist);
        return $response; 
    }


    /**
     * cadastrarOrigemComercialUsingPOSTWithHttpInfo
     *
     * {{{origem_comercial_resource_cadastrar_origem_comercial}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\OrigemComercialPersist $origem_comercial_persist origemComercialPersist (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\OrigemComercialResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function cadastrarOrigemComercialUsingPOSTWithHttpInfo($origem_comercial_persist)
    {
        
        // verify the required parameter 'origem_comercial_persist' is set
        if ($origem_comercial_persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $origem_comercial_persist when calling cadastrarOrigemComercialUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/origens-comerciais";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($origem_comercial_persist)) {
            $_tempBody = $origem_comercial_persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\OrigemComercialResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\OrigemComercialResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\OrigemComercialResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * cadastrarUsingPOST3
     *
     * {{{estabelecimento_resource_cadastrar}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\EstabelecimentoPersist $persist persist (required)
     * @return \br.com.conductor.pier.api.v2.model\EstabelecimentoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function cadastrarUsingPOST3($persist)
    {
        list($response, $statusCode, $httpHeader) = $this->cadastrarUsingPOST3WithHttpInfo ($persist);
        return $response; 
    }


    /**
     * cadastrarUsingPOST3WithHttpInfo
     *
     * {{{estabelecimento_resource_cadastrar}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\EstabelecimentoPersist $persist persist (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\EstabelecimentoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function cadastrarUsingPOST3WithHttpInfo($persist)
    {
        
        // verify the required parameter 'persist' is set
        if ($persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $persist when calling cadastrarUsingPOST3');
        }
  
        // parse inputs
        $resourcePath = "/api/estabelecimentos";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($persist)) {
            $_tempBody = $persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\EstabelecimentoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\EstabelecimentoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\EstabelecimentoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * cadastrarUsingPOST4
     *
     * {{{grupo_economico_resource_cadastrar}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\GrupoEconomicoDTO $grupo_economico_dto GrupoEconomicoDTO (required)
     * @return \br.com.conductor.pier.api.v2.model\GrupoEconomicoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function cadastrarUsingPOST4($grupo_economico_dto)
    {
        list($response, $statusCode, $httpHeader) = $this->cadastrarUsingPOST4WithHttpInfo ($grupo_economico_dto);
        return $response; 
    }


    /**
     * cadastrarUsingPOST4WithHttpInfo
     *
     * {{{grupo_economico_resource_cadastrar}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\GrupoEconomicoDTO $grupo_economico_dto GrupoEconomicoDTO (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\GrupoEconomicoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function cadastrarUsingPOST4WithHttpInfo($grupo_economico_dto)
    {
        
        // verify the required parameter 'grupo_economico_dto' is set
        if ($grupo_economico_dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $grupo_economico_dto when calling cadastrarUsingPOST4');
        }
  
        // parse inputs
        $resourcePath = "/api/grupos-economicos";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($grupo_economico_dto)) {
            $_tempBody = $grupo_economico_dto;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\GrupoEconomicoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\GrupoEconomicoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\GrupoEconomicoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultaOperacaoUsingGET
     *
     * {{{operacao_resource_consulta_operacao}}}
     *
     * @param int $id {{{operacao_resource_consulta_operacao_param_id_operacao}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\DetalheOperacaoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultaOperacaoUsingGET($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultaOperacaoUsingGETWithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultaOperacaoUsingGETWithHttpInfo
     *
     * {{{operacao_resource_consulta_operacao}}}
     *
     * @param int $id {{{operacao_resource_consulta_operacao_param_id_operacao}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\DetalheOperacaoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultaOperacaoUsingGETWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultaOperacaoUsingGET');
        }
  
        // parse inputs
        $resourcePath = "/api/tipos-operacoes-estabelecimentos/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\DetalheOperacaoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\DetalheOperacaoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\DetalheOperacaoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarOrigemComercialUsingGET
     *
     * {{{origem_comercial_resource_consultar_origem_comercial}}}
     *
     * @param int $id {{{origem_comercial_resource_consultar_origem_comercial_param_id}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\OrigemComercialResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarOrigemComercialUsingGET($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarOrigemComercialUsingGETWithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarOrigemComercialUsingGETWithHttpInfo
     *
     * {{{origem_comercial_resource_consultar_origem_comercial}}}
     *
     * @param int $id {{{origem_comercial_resource_consultar_origem_comercial_param_id}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\OrigemComercialResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarOrigemComercialUsingGETWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarOrigemComercialUsingGET');
        }
  
        // parse inputs
        $resourcePath = "/api/origens-comerciais/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\OrigemComercialResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\OrigemComercialResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\OrigemComercialResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarUsingGET20
     *
     * {{{estabelecimento_resource_consultar}}}
     *
     * @param int $id {{{estabelecimento_resource_consultar_param_id_estabelecimento}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\EstabelecimentoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET20($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarUsingGET20WithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarUsingGET20WithHttpInfo
     *
     * {{{estabelecimento_resource_consultar}}}
     *
     * @param int $id {{{estabelecimento_resource_consultar_param_id_estabelecimento}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\EstabelecimentoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET20WithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarUsingGET20');
        }
  
        // parse inputs
        $resourcePath = "/api/estabelecimentos/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\EstabelecimentoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\EstabelecimentoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\EstabelecimentoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarUsingGET22
     *
     * {{{grupo_economico_resource_consultar}}}
     *
     * @param int $id {{{grupo_economico_resource_consultar_param_id}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\GrupoEconomicoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET22($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarUsingGET22WithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarUsingGET22WithHttpInfo
     *
     * {{{grupo_economico_resource_consultar}}}
     *
     * @param int $id {{{grupo_economico_resource_consultar_param_id}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\GrupoEconomicoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET22WithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarUsingGET22');
        }
  
        // parse inputs
        $resourcePath = "/api/grupos-economicos/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\GrupoEconomicoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\GrupoEconomicoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\GrupoEconomicoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarUsingGET24
     *
     * {{{maquineta_resource_consultar}}}
     *
     * @param int $id {{{maquineta_resource_consultar_param_id}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\MaquinetaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET24($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarUsingGET24WithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarUsingGET24WithHttpInfo
     *
     * {{{maquineta_resource_consultar}}}
     *
     * @param int $id {{{maquineta_resource_consultar_param_id}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\MaquinetaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET24WithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarUsingGET24');
        }
  
        // parse inputs
        $resourcePath = "/api/maquinetas/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\MaquinetaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\MaquinetaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\MaquinetaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarUsingGET25
     *
     * {{{operacao_credor_resource_consultar}}}
     *
     * @param int $id {{{operacao_credor_resource_consultar_param_id}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\OperacaoCredorResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET25($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarUsingGET25WithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarUsingGET25WithHttpInfo
     *
     * {{{operacao_credor_resource_consultar}}}
     *
     * @param int $id {{{operacao_credor_resource_consultar_param_id}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\OperacaoCredorResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET25WithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarUsingGET25');
        }
  
        // parse inputs
        $resourcePath = "/api/regras-operacoes-estabelecimentos/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\OperacaoCredorResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\OperacaoCredorResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\OperacaoCredorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarUsingGET38
     *
     * {{{telefone_estabelecimento_resource_consultar}}}
     *
     * @param int $id {{{telefone_estabelecimento_resource_consultar_param_id}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\TelefoneEstabelecimentoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET38($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarUsingGET38WithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarUsingGET38WithHttpInfo
     *
     * {{{telefone_estabelecimento_resource_consultar}}}
     *
     * @param int $id {{{telefone_estabelecimento_resource_consultar_param_id}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\TelefoneEstabelecimentoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET38WithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarUsingGET38');
        }
  
        // parse inputs
        $resourcePath = "/api/telefones-estabelecimentos/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\TelefoneEstabelecimentoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\TelefoneEstabelecimentoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\TelefoneEstabelecimentoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarUsingGET40
     *
     * {{{terminal_resource_consultar}}}
     *
     * @param int $id {{{terminal_resource_consultar_param_id}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\TerminalResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET40($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarUsingGET40WithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarUsingGET40WithHttpInfo
     *
     * {{{terminal_resource_consultar}}}
     *
     * @param int $id {{{terminal_resource_consultar_param_id}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\TerminalResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET40WithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarUsingGET40');
        }
  
        // parse inputs
        $resourcePath = "/api/terminais/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\TerminalResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\TerminalResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\TerminalResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarUsingGET52
     *
     * {{{vinculo_estabelecimento_adquirente_resource_consultar}}}
     *
     * @param int $id {{{vinculo_estabelecimento_adquirente_resource_consultar_param_id}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\VinculoEstabelecimentoAdquirenteResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET52($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarUsingGET52WithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarUsingGET52WithHttpInfo
     *
     * {{{vinculo_estabelecimento_adquirente_resource_consultar}}}
     *
     * @param int $id {{{vinculo_estabelecimento_adquirente_resource_consultar_param_id}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\VinculoEstabelecimentoAdquirenteResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET52WithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarUsingGET52');
        }
  
        // parse inputs
        $resourcePath = "/api/adquirentes-estabelecimento/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\VinculoEstabelecimentoAdquirenteResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\VinculoEstabelecimentoAdquirenteResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\VinculoEstabelecimentoAdquirenteResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * desabilitarVinculoUsingPOST
     *
     * {{{vinculo_estabelecimento_adquirente_resource_desabilitar_vinculo}}}
     *
     * @param int $id {{{vinculo_estabelecimento_adquirente_resource_desabilitar_vinculo_param_id}}} (required)
     * @return object
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function desabilitarVinculoUsingPOST($id)
    {
        list($response, $statusCode, $httpHeader) = $this->desabilitarVinculoUsingPOSTWithHttpInfo ($id);
        return $response; 
    }


    /**
     * desabilitarVinculoUsingPOSTWithHttpInfo
     *
     * {{{vinculo_estabelecimento_adquirente_resource_desabilitar_vinculo}}}
     *
     * @param int $id {{{vinculo_estabelecimento_adquirente_resource_desabilitar_vinculo_param_id}}} (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function desabilitarVinculoUsingPOSTWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling desabilitarVinculoUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/adquirentes-estabelecimento/{id}/desabilitar";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'object'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * desabilitarVinculoUsingPOST1
     *
     * {{{vinculo_operacao_resource_desabilitar_vinculo}}}
     *
     * @param int $id {{{vinculo_operacao_resource_desabilitar_vinculo_param_id}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\VinculoOperacaoPersist $vinculo_operacao_persist vinculoOperacaoPersist (required)
     * @return object
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function desabilitarVinculoUsingPOST1($id, $vinculo_operacao_persist)
    {
        list($response, $statusCode, $httpHeader) = $this->desabilitarVinculoUsingPOST1WithHttpInfo ($id, $vinculo_operacao_persist);
        return $response; 
    }


    /**
     * desabilitarVinculoUsingPOST1WithHttpInfo
     *
     * {{{vinculo_operacao_resource_desabilitar_vinculo}}}
     *
     * @param int $id {{{vinculo_operacao_resource_desabilitar_vinculo_param_id}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\VinculoOperacaoPersist $vinculo_operacao_persist vinculoOperacaoPersist (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function desabilitarVinculoUsingPOST1WithHttpInfo($id, $vinculo_operacao_persist)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling desabilitarVinculoUsingPOST1');
        }
        // verify the required parameter 'vinculo_operacao_persist' is set
        if ($vinculo_operacao_persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vinculo_operacao_persist when calling desabilitarVinculoUsingPOST1');
        }
  
        // parse inputs
        $resourcePath = "/api/estabelecimentos/{id}/desabilitar-operacao";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($vinculo_operacao_persist)) {
            $_tempBody = $vinculo_operacao_persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'object'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * habilitarVinculoUsingPOST
     *
     * {{{vinculo_estabelecimento_adquirente_resource_habilitar_vinculo}}}
     *
     * @param int $id {{{vinculo_estabelecimento_adquirente_resource_habilitar_vinculo_param_id}}} (required)
     * @return object
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function habilitarVinculoUsingPOST($id)
    {
        list($response, $statusCode, $httpHeader) = $this->habilitarVinculoUsingPOSTWithHttpInfo ($id);
        return $response; 
    }


    /**
     * habilitarVinculoUsingPOSTWithHttpInfo
     *
     * {{{vinculo_estabelecimento_adquirente_resource_habilitar_vinculo}}}
     *
     * @param int $id {{{vinculo_estabelecimento_adquirente_resource_habilitar_vinculo_param_id}}} (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function habilitarVinculoUsingPOSTWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling habilitarVinculoUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/adquirentes-estabelecimento/{id}/habilitar";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'object'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * habilitarVinculoUsingPOST1
     *
     * {{{vinculo_operacao_resource_habilitar_vinculo}}}
     *
     * @param int $id {{{vinculo_operacao_resource_habilitar_vinculo_param_id}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\VinculoOperacaoPersist $vinculo_operacao_persist vinculoOperacaoPersist (required)
     * @return object
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function habilitarVinculoUsingPOST1($id, $vinculo_operacao_persist)
    {
        list($response, $statusCode, $httpHeader) = $this->habilitarVinculoUsingPOST1WithHttpInfo ($id, $vinculo_operacao_persist);
        return $response; 
    }


    /**
     * habilitarVinculoUsingPOST1WithHttpInfo
     *
     * {{{vinculo_operacao_resource_habilitar_vinculo}}}
     *
     * @param int $id {{{vinculo_operacao_resource_habilitar_vinculo_param_id}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\VinculoOperacaoPersist $vinculo_operacao_persist vinculoOperacaoPersist (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function habilitarVinculoUsingPOST1WithHttpInfo($id, $vinculo_operacao_persist)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling habilitarVinculoUsingPOST1');
        }
        // verify the required parameter 'vinculo_operacao_persist' is set
        if ($vinculo_operacao_persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vinculo_operacao_persist when calling habilitarVinculoUsingPOST1');
        }
  
        // parse inputs
        $resourcePath = "/api/estabelecimentos/{id}/habilitar-operacao";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($vinculo_operacao_persist)) {
            $_tempBody = $vinculo_operacao_persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'object'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listaOperacaoUsingGET
     *
     * {{{operacao_resource_lista_operacao}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_operacao {{{operacao_request_id_operacao_value}}} (optional)
     * @param string $codigo_processamento {{{operacao_request_codigo_processamento_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageOperacaoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listaOperacaoUsingGET($sort = null, $page = null, $limit = null, $id_operacao = null, $codigo_processamento = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listaOperacaoUsingGETWithHttpInfo ($sort, $page, $limit, $id_operacao, $codigo_processamento);
        return $response; 
    }


    /**
     * listaOperacaoUsingGETWithHttpInfo
     *
     * {{{operacao_resource_lista_operacao}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_operacao {{{operacao_request_id_operacao_value}}} (optional)
     * @param string $codigo_processamento {{{operacao_request_codigo_processamento_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageOperacaoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listaOperacaoUsingGETWithHttpInfo($sort = null, $page = null, $limit = null, $id_operacao = null, $codigo_processamento = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/tipos-operacoes-estabelecimentos";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id_operacao !== null) {
            $queryParams['idOperacao'] = $this->apiClient->getSerializer()->toQueryValue($id_operacao);
        }// query params
        
        if ($codigo_processamento !== null) {
            $queryParams['codigoProcessamento'] = $this->apiClient->getSerializer()->toQueryValue($codigo_processamento);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageOperacaoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageOperacaoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageOperacaoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarMCCUsingGET
     *
     * {{{m_c_c_resource_listar_m_c_c}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageMCCResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarMCCUsingGET($sort = null, $page = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarMCCUsingGETWithHttpInfo ($sort, $page, $limit);
        return $response; 
    }


    /**
     * listarMCCUsingGETWithHttpInfo
     *
     * {{{m_c_c_resource_listar_m_c_c}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageMCCResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarMCCUsingGETWithHttpInfo($sort = null, $page = null, $limit = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/mcc-estabelecimentos";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageMCCResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageMCCResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageMCCResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarOrigensComerciaisUsingGET
     *
     * {{{origem_comercial_resource_listar_origens_comerciais}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id {{{origem_comercial_request_id_value}}} (optional)
     * @param string $nome {{{origem_comercial_request_nome_value}}} (optional)
     * @param int $status {{{origem_comercial_request_status_value}}} (optional)
     * @param int $id_estabelecimento {{{origem_comercial_request_id_estabelecimento_value}}} (optional)
     * @param int $id_produto {{{origem_comercial_request_id_produto_value}}} (optional)
     * @param string $descricao {{{origem_comercial_request_descricao_value}}} (optional)
     * @param int $id_tipo_origem_comercial {{{origem_comercial_request_id_tipo_origem_comercial_value}}} (optional)
     * @param int $id_grupo_origem_comercial {{{origem_comercial_request_id_grupo_origem_comercial_value}}} (optional)
     * @param bool $flag_pre_aprovado {{{origem_comercial_request_flag_pre_aprovado_value}}} (optional)
     * @param bool $flag_aprovacao_imediata {{{origem_comercial_request_flag_aprovacao_imediata_value}}} (optional)
     * @param string $nome_fantasia_plastico {{{origem_comercial_request_nome_fantasia_plastico_value}}} (optional)
     * @param bool $flag_cartao_provisorio {{{origem_comercial_request_flag_cartao_provisorio_value}}} (optional)
     * @param bool $flag_cartao_definitivo {{{origem_comercial_request_flag_cartao_definitivo_value}}} (optional)
     * @param string $usuario {{{origem_comercial_request_usuario_value}}} (optional)
     * @param string $senha {{{origem_comercial_request_senha_value}}} (optional)
     * @param bool $flag_origem_externa {{{origem_comercial_request_flag_origem_externa_value}}} (optional)
     * @param bool $flag_modificado {{{origem_comercial_request_flag_modificado_value}}} (optional)
     * @param bool $flag_envia_fatura_usuario {{{origem_comercial_request_flag_envia_fatura_usuario_value}}} (optional)
     * @param bool $flag_credito_faturamento {{{origem_comercial_request_flag_credito_faturamento_value}}} (optional)
     * @param bool $flag_concede_limite_provisorio {{{origem_comercial_request_flag_concede_limite_provisorio_value}}} (optional)
     * @param bool $flag_digitalizar_doc {{{origem_comercial_request_flag_digitalizar_doc_value}}} (optional)
     * @param bool $flag_embossing_loja {{{origem_comercial_request_flag_embossing_loja_value}}} (optional)
     * @param bool $flag_consulta_previa {{{origem_comercial_request_flag_consulta_previa_value}}} (optional)
     * @param string $tipo_pessoa {{{origem_comercial_request_tipo_pessoa_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageOrigemComercialResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarOrigensComerciaisUsingGET($sort = null, $page = null, $limit = null, $id = null, $nome = null, $status = null, $id_estabelecimento = null, $id_produto = null, $descricao = null, $id_tipo_origem_comercial = null, $id_grupo_origem_comercial = null, $flag_pre_aprovado = null, $flag_aprovacao_imediata = null, $nome_fantasia_plastico = null, $flag_cartao_provisorio = null, $flag_cartao_definitivo = null, $usuario = null, $senha = null, $flag_origem_externa = null, $flag_modificado = null, $flag_envia_fatura_usuario = null, $flag_credito_faturamento = null, $flag_concede_limite_provisorio = null, $flag_digitalizar_doc = null, $flag_embossing_loja = null, $flag_consulta_previa = null, $tipo_pessoa = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarOrigensComerciaisUsingGETWithHttpInfo ($sort, $page, $limit, $id, $nome, $status, $id_estabelecimento, $id_produto, $descricao, $id_tipo_origem_comercial, $id_grupo_origem_comercial, $flag_pre_aprovado, $flag_aprovacao_imediata, $nome_fantasia_plastico, $flag_cartao_provisorio, $flag_cartao_definitivo, $usuario, $senha, $flag_origem_externa, $flag_modificado, $flag_envia_fatura_usuario, $flag_credito_faturamento, $flag_concede_limite_provisorio, $flag_digitalizar_doc, $flag_embossing_loja, $flag_consulta_previa, $tipo_pessoa);
        return $response; 
    }


    /**
     * listarOrigensComerciaisUsingGETWithHttpInfo
     *
     * {{{origem_comercial_resource_listar_origens_comerciais}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id {{{origem_comercial_request_id_value}}} (optional)
     * @param string $nome {{{origem_comercial_request_nome_value}}} (optional)
     * @param int $status {{{origem_comercial_request_status_value}}} (optional)
     * @param int $id_estabelecimento {{{origem_comercial_request_id_estabelecimento_value}}} (optional)
     * @param int $id_produto {{{origem_comercial_request_id_produto_value}}} (optional)
     * @param string $descricao {{{origem_comercial_request_descricao_value}}} (optional)
     * @param int $id_tipo_origem_comercial {{{origem_comercial_request_id_tipo_origem_comercial_value}}} (optional)
     * @param int $id_grupo_origem_comercial {{{origem_comercial_request_id_grupo_origem_comercial_value}}} (optional)
     * @param bool $flag_pre_aprovado {{{origem_comercial_request_flag_pre_aprovado_value}}} (optional)
     * @param bool $flag_aprovacao_imediata {{{origem_comercial_request_flag_aprovacao_imediata_value}}} (optional)
     * @param string $nome_fantasia_plastico {{{origem_comercial_request_nome_fantasia_plastico_value}}} (optional)
     * @param bool $flag_cartao_provisorio {{{origem_comercial_request_flag_cartao_provisorio_value}}} (optional)
     * @param bool $flag_cartao_definitivo {{{origem_comercial_request_flag_cartao_definitivo_value}}} (optional)
     * @param string $usuario {{{origem_comercial_request_usuario_value}}} (optional)
     * @param string $senha {{{origem_comercial_request_senha_value}}} (optional)
     * @param bool $flag_origem_externa {{{origem_comercial_request_flag_origem_externa_value}}} (optional)
     * @param bool $flag_modificado {{{origem_comercial_request_flag_modificado_value}}} (optional)
     * @param bool $flag_envia_fatura_usuario {{{origem_comercial_request_flag_envia_fatura_usuario_value}}} (optional)
     * @param bool $flag_credito_faturamento {{{origem_comercial_request_flag_credito_faturamento_value}}} (optional)
     * @param bool $flag_concede_limite_provisorio {{{origem_comercial_request_flag_concede_limite_provisorio_value}}} (optional)
     * @param bool $flag_digitalizar_doc {{{origem_comercial_request_flag_digitalizar_doc_value}}} (optional)
     * @param bool $flag_embossing_loja {{{origem_comercial_request_flag_embossing_loja_value}}} (optional)
     * @param bool $flag_consulta_previa {{{origem_comercial_request_flag_consulta_previa_value}}} (optional)
     * @param string $tipo_pessoa {{{origem_comercial_request_tipo_pessoa_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageOrigemComercialResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarOrigensComerciaisUsingGETWithHttpInfo($sort = null, $page = null, $limit = null, $id = null, $nome = null, $status = null, $id_estabelecimento = null, $id_produto = null, $descricao = null, $id_tipo_origem_comercial = null, $id_grupo_origem_comercial = null, $flag_pre_aprovado = null, $flag_aprovacao_imediata = null, $nome_fantasia_plastico = null, $flag_cartao_provisorio = null, $flag_cartao_definitivo = null, $usuario = null, $senha = null, $flag_origem_externa = null, $flag_modificado = null, $flag_envia_fatura_usuario = null, $flag_credito_faturamento = null, $flag_concede_limite_provisorio = null, $flag_digitalizar_doc = null, $flag_embossing_loja = null, $flag_consulta_previa = null, $tipo_pessoa = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/origens-comerciais";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }// query params
        
        if ($nome !== null) {
            $queryParams['nome'] = $this->apiClient->getSerializer()->toQueryValue($nome);
        }// query params
        
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }// query params
        
        if ($id_estabelecimento !== null) {
            $queryParams['idEstabelecimento'] = $this->apiClient->getSerializer()->toQueryValue($id_estabelecimento);
        }// query params
        
        if ($id_produto !== null) {
            $queryParams['idProduto'] = $this->apiClient->getSerializer()->toQueryValue($id_produto);
        }// query params
        
        if ($descricao !== null) {
            $queryParams['descricao'] = $this->apiClient->getSerializer()->toQueryValue($descricao);
        }// query params
        
        if ($id_tipo_origem_comercial !== null) {
            $queryParams['idTipoOrigemComercial'] = $this->apiClient->getSerializer()->toQueryValue($id_tipo_origem_comercial);
        }// query params
        
        if ($id_grupo_origem_comercial !== null) {
            $queryParams['idGrupoOrigemComercial'] = $this->apiClient->getSerializer()->toQueryValue($id_grupo_origem_comercial);
        }// query params
        
        if ($flag_pre_aprovado !== null) {
            $queryParams['flagPreAprovado'] = $this->apiClient->getSerializer()->toQueryValue($flag_pre_aprovado);
        }// query params
        
        if ($flag_aprovacao_imediata !== null) {
            $queryParams['flagAprovacaoImediata'] = $this->apiClient->getSerializer()->toQueryValue($flag_aprovacao_imediata);
        }// query params
        
        if ($nome_fantasia_plastico !== null) {
            $queryParams['nomeFantasiaPlastico'] = $this->apiClient->getSerializer()->toQueryValue($nome_fantasia_plastico);
        }// query params
        
        if ($flag_cartao_provisorio !== null) {
            $queryParams['flagCartaoProvisorio'] = $this->apiClient->getSerializer()->toQueryValue($flag_cartao_provisorio);
        }// query params
        
        if ($flag_cartao_definitivo !== null) {
            $queryParams['flagCartaoDefinitivo'] = $this->apiClient->getSerializer()->toQueryValue($flag_cartao_definitivo);
        }// query params
        
        if ($usuario !== null) {
            $queryParams['usuario'] = $this->apiClient->getSerializer()->toQueryValue($usuario);
        }// query params
        
        if ($senha !== null) {
            $queryParams['senha'] = $this->apiClient->getSerializer()->toQueryValue($senha);
        }// query params
        
        if ($flag_origem_externa !== null) {
            $queryParams['flagOrigemExterna'] = $this->apiClient->getSerializer()->toQueryValue($flag_origem_externa);
        }// query params
        
        if ($flag_modificado !== null) {
            $queryParams['flagModificado'] = $this->apiClient->getSerializer()->toQueryValue($flag_modificado);
        }// query params
        
        if ($flag_envia_fatura_usuario !== null) {
            $queryParams['flagEnviaFaturaUsuario'] = $this->apiClient->getSerializer()->toQueryValue($flag_envia_fatura_usuario);
        }// query params
        
        if ($flag_credito_faturamento !== null) {
            $queryParams['flagCreditoFaturamento'] = $this->apiClient->getSerializer()->toQueryValue($flag_credito_faturamento);
        }// query params
        
        if ($flag_concede_limite_provisorio !== null) {
            $queryParams['flagConcedeLimiteProvisorio'] = $this->apiClient->getSerializer()->toQueryValue($flag_concede_limite_provisorio);
        }// query params
        
        if ($flag_digitalizar_doc !== null) {
            $queryParams['flagDigitalizarDoc'] = $this->apiClient->getSerializer()->toQueryValue($flag_digitalizar_doc);
        }// query params
        
        if ($flag_embossing_loja !== null) {
            $queryParams['flagEmbossingLoja'] = $this->apiClient->getSerializer()->toQueryValue($flag_embossing_loja);
        }// query params
        
        if ($flag_consulta_previa !== null) {
            $queryParams['flagConsultaPrevia'] = $this->apiClient->getSerializer()->toQueryValue($flag_consulta_previa);
        }// query params
        
        if ($tipo_pessoa !== null) {
            $queryParams['tipoPessoa'] = $this->apiClient->getSerializer()->toQueryValue($tipo_pessoa);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageOrigemComercialResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageOrigemComercialResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageOrigemComercialResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarTiposAdquirentesUsingGET
     *
     * {{{vinculo_estabelecimento_adquirente_resource_listar_tipos_adquirentes}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageEntidadeResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarTiposAdquirentesUsingGET($sort = null, $page = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarTiposAdquirentesUsingGETWithHttpInfo ($sort, $page, $limit);
        return $response; 
    }


    /**
     * listarTiposAdquirentesUsingGETWithHttpInfo
     *
     * {{{vinculo_estabelecimento_adquirente_resource_listar_tipos_adquirentes}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageEntidadeResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarTiposAdquirentesUsingGETWithHttpInfo($sort = null, $page = null, $limit = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/tipos-adquirentes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageEntidadeResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageEntidadeResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageEntidadeResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarTiposEstabelecimentosUsingGET
     *
     * {{{tipo_estabelecimento_resource_listar_tipos_estabelecimentos}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param string $descricao {{{tipo_estabelecimento_request_descricao_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageTipoEstabelecimentoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarTiposEstabelecimentosUsingGET($sort = null, $page = null, $limit = null, $descricao = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarTiposEstabelecimentosUsingGETWithHttpInfo ($sort, $page, $limit, $descricao);
        return $response; 
    }


    /**
     * listarTiposEstabelecimentosUsingGETWithHttpInfo
     *
     * {{{tipo_estabelecimento_resource_listar_tipos_estabelecimentos}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param string $descricao {{{tipo_estabelecimento_request_descricao_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageTipoEstabelecimentoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarTiposEstabelecimentosUsingGETWithHttpInfo($sort = null, $page = null, $limit = null, $descricao = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/tipos-estabelecimentos";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($descricao !== null) {
            $queryParams['descricao'] = $this->apiClient->getSerializer()->toQueryValue($descricao);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageTipoEstabelecimentoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageTipoEstabelecimentoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageTipoEstabelecimentoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarTiposMaquinetasUsingGET
     *
     * {{{maquineta_resource_listar_tipos_maquinetas}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageCampoCodificadoDescricaoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarTiposMaquinetasUsingGET($sort = null, $page = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarTiposMaquinetasUsingGETWithHttpInfo ($sort, $page, $limit);
        return $response; 
    }


    /**
     * listarTiposMaquinetasUsingGETWithHttpInfo
     *
     * {{{maquineta_resource_listar_tipos_maquinetas}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageCampoCodificadoDescricaoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarTiposMaquinetasUsingGETWithHttpInfo($sort = null, $page = null, $limit = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/tipos-maquinetas";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageCampoCodificadoDescricaoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageCampoCodificadoDescricaoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageCampoCodificadoDescricaoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarTiposOrigensComerciaisUsingGET
     *
     * {{{tipo_origem_comercial_resource_listar_tipos_origens_comerciais}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param string $nome {{{tipo_origem_comercial_request_nome_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageTipoOrigemComercialResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarTiposOrigensComerciaisUsingGET($sort = null, $page = null, $limit = null, $nome = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarTiposOrigensComerciaisUsingGETWithHttpInfo ($sort, $page, $limit, $nome);
        return $response; 
    }


    /**
     * listarTiposOrigensComerciaisUsingGETWithHttpInfo
     *
     * {{{tipo_origem_comercial_resource_listar_tipos_origens_comerciais}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param string $nome {{{tipo_origem_comercial_request_nome_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageTipoOrigemComercialResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarTiposOrigensComerciaisUsingGETWithHttpInfo($sort = null, $page = null, $limit = null, $nome = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/tipos-origens-comerciais";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($nome !== null) {
            $queryParams['nome'] = $this->apiClient->getSerializer()->toQueryValue($nome);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageTipoOrigemComercialResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageTipoOrigemComercialResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageTipoOrigemComercialResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarTiposTerminaisUsingGET1
     *
     * {{{terminal_resource_listar_tipos_terminais}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageTipoTerminalResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarTiposTerminaisUsingGET1($sort = null, $page = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarTiposTerminaisUsingGET1WithHttpInfo ($sort, $page, $limit);
        return $response; 
    }


    /**
     * listarTiposTerminaisUsingGET1WithHttpInfo
     *
     * {{{terminal_resource_listar_tipos_terminais}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageTipoTerminalResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarTiposTerminaisUsingGET1WithHttpInfo($sort = null, $page = null, $limit = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/tipos-terminais-estabelecimento";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageTipoTerminalResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageTipoTerminalResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageTipoTerminalResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET25
     *
     * {{{estabelecimento_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id {{{estabelecimento_request_id_value}}} (optional)
     * @param int $id_grupo_economico {{{estabelecimento_request_id_grupo_economico_value}}} (optional)
     * @param string $numero_receita_federal {{{estabelecimento_request_numero_receita_federal_value}}} (optional)
     * @param string $nome {{{estabelecimento_request_nome_value}}} (optional)
     * @param string $descricao {{{estabelecimento_request_descricao_value}}} (optional)
     * @param string $nome_fantasia {{{estabelecimento_request_nome_fantasia_value}}} (optional)
     * @param string $cep {{{estabelecimento_request_cep_value}}} (optional)
     * @param string $nome_logradouro {{{estabelecimento_request_nome_logradouro_value}}} (optional)
     * @param int $numero_endereco {{{estabelecimento_request_numero_endereco_value}}} (optional)
     * @param string $complemento {{{estabelecimento_request_complemento_value}}} (optional)
     * @param string $bairro {{{estabelecimento_request_bairro_value}}} (optional)
     * @param string $cidade {{{estabelecimento_request_cidade_value}}} (optional)
     * @param string $uf {{{estabelecimento_request_uf_value}}} (optional)
     * @param string $pais {{{estabelecimento_request_pais_value}}} (optional)
     * @param string $data_cadastramento {{{estabelecimento_request_data_cadastramento_value}}} (optional)
     * @param string $contato {{{estabelecimento_request_contato_value}}} (optional)
     * @param string $email {{{estabelecimento_request_email_value}}} (optional)
     * @param int $flag_arquivo_secr_fazenda {{{estabelecimento_request_flag_arquivo_secr_fazenda_value}}} (optional)
     * @param int $flag_cartao_digitado {{{estabelecimento_request_flag_cartao_digitado_value}}} (optional)
     * @param int $inativo {{{estabelecimento_request_inativo_value}}} (optional)
     * @param int $id_pais {{{estabelecimento_request_id_pais_value}}} (optional)
     * @param int $mcc {{{estabelecimento_request_mcc_value}}} (optional)
     * @param int $id_tipo_estabelecimento {{{estabelecimento_request_id_tipo_estabelecimento_value}}} (optional)
     * @param int $correspondencia {{{estabelecimento_request_correspondencia_value}}} (optional)
     * @param int $id_moeda {{{estabelecimento_request_id_moeda_value}}} (optional)
     * @param string $tipo_pagamento {{{estabelecimento_request_tipo_pagamento_value}}} (optional)
     * @param string $numero_estabelecimento {{{estabelecimento_request_numero_estabelecimento_value}}} (optional)
     * @param string $cep2 {{{estabelecimento_request_cep2_value}}} (optional)
     * @param string $nome_logradouro2 {{{estabelecimento_request_nome_logradouro2_value}}} (optional)
     * @param int $numero_endereco2 {{{estabelecimento_request_numero_endereco2_value}}} (optional)
     * @param string $complemento2 {{{estabelecimento_request_complemento2_value}}} (optional)
     * @param string $bairro2 {{{estabelecimento_request_bairro2_value}}} (optional)
     * @param string $cidade2 {{{estabelecimento_request_cidade2_value}}} (optional)
     * @param string $uf2 {{{estabelecimento_request_uf2_value}}} (optional)
     * @param int $flag_matriz {{{estabelecimento_request_flag_matriz_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageEstabelecimentoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET25($sort = null, $page = null, $limit = null, $id = null, $id_grupo_economico = null, $numero_receita_federal = null, $nome = null, $descricao = null, $nome_fantasia = null, $cep = null, $nome_logradouro = null, $numero_endereco = null, $complemento = null, $bairro = null, $cidade = null, $uf = null, $pais = null, $data_cadastramento = null, $contato = null, $email = null, $flag_arquivo_secr_fazenda = null, $flag_cartao_digitado = null, $inativo = null, $id_pais = null, $mcc = null, $id_tipo_estabelecimento = null, $correspondencia = null, $id_moeda = null, $tipo_pagamento = null, $numero_estabelecimento = null, $cep2 = null, $nome_logradouro2 = null, $numero_endereco2 = null, $complemento2 = null, $bairro2 = null, $cidade2 = null, $uf2 = null, $flag_matriz = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGET25WithHttpInfo ($sort, $page, $limit, $id, $id_grupo_economico, $numero_receita_federal, $nome, $descricao, $nome_fantasia, $cep, $nome_logradouro, $numero_endereco, $complemento, $bairro, $cidade, $uf, $pais, $data_cadastramento, $contato, $email, $flag_arquivo_secr_fazenda, $flag_cartao_digitado, $inativo, $id_pais, $mcc, $id_tipo_estabelecimento, $correspondencia, $id_moeda, $tipo_pagamento, $numero_estabelecimento, $cep2, $nome_logradouro2, $numero_endereco2, $complemento2, $bairro2, $cidade2, $uf2, $flag_matriz);
        return $response; 
    }


    /**
     * listarUsingGET25WithHttpInfo
     *
     * {{{estabelecimento_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id {{{estabelecimento_request_id_value}}} (optional)
     * @param int $id_grupo_economico {{{estabelecimento_request_id_grupo_economico_value}}} (optional)
     * @param string $numero_receita_federal {{{estabelecimento_request_numero_receita_federal_value}}} (optional)
     * @param string $nome {{{estabelecimento_request_nome_value}}} (optional)
     * @param string $descricao {{{estabelecimento_request_descricao_value}}} (optional)
     * @param string $nome_fantasia {{{estabelecimento_request_nome_fantasia_value}}} (optional)
     * @param string $cep {{{estabelecimento_request_cep_value}}} (optional)
     * @param string $nome_logradouro {{{estabelecimento_request_nome_logradouro_value}}} (optional)
     * @param int $numero_endereco {{{estabelecimento_request_numero_endereco_value}}} (optional)
     * @param string $complemento {{{estabelecimento_request_complemento_value}}} (optional)
     * @param string $bairro {{{estabelecimento_request_bairro_value}}} (optional)
     * @param string $cidade {{{estabelecimento_request_cidade_value}}} (optional)
     * @param string $uf {{{estabelecimento_request_uf_value}}} (optional)
     * @param string $pais {{{estabelecimento_request_pais_value}}} (optional)
     * @param string $data_cadastramento {{{estabelecimento_request_data_cadastramento_value}}} (optional)
     * @param string $contato {{{estabelecimento_request_contato_value}}} (optional)
     * @param string $email {{{estabelecimento_request_email_value}}} (optional)
     * @param int $flag_arquivo_secr_fazenda {{{estabelecimento_request_flag_arquivo_secr_fazenda_value}}} (optional)
     * @param int $flag_cartao_digitado {{{estabelecimento_request_flag_cartao_digitado_value}}} (optional)
     * @param int $inativo {{{estabelecimento_request_inativo_value}}} (optional)
     * @param int $id_pais {{{estabelecimento_request_id_pais_value}}} (optional)
     * @param int $mcc {{{estabelecimento_request_mcc_value}}} (optional)
     * @param int $id_tipo_estabelecimento {{{estabelecimento_request_id_tipo_estabelecimento_value}}} (optional)
     * @param int $correspondencia {{{estabelecimento_request_correspondencia_value}}} (optional)
     * @param int $id_moeda {{{estabelecimento_request_id_moeda_value}}} (optional)
     * @param string $tipo_pagamento {{{estabelecimento_request_tipo_pagamento_value}}} (optional)
     * @param string $numero_estabelecimento {{{estabelecimento_request_numero_estabelecimento_value}}} (optional)
     * @param string $cep2 {{{estabelecimento_request_cep2_value}}} (optional)
     * @param string $nome_logradouro2 {{{estabelecimento_request_nome_logradouro2_value}}} (optional)
     * @param int $numero_endereco2 {{{estabelecimento_request_numero_endereco2_value}}} (optional)
     * @param string $complemento2 {{{estabelecimento_request_complemento2_value}}} (optional)
     * @param string $bairro2 {{{estabelecimento_request_bairro2_value}}} (optional)
     * @param string $cidade2 {{{estabelecimento_request_cidade2_value}}} (optional)
     * @param string $uf2 {{{estabelecimento_request_uf2_value}}} (optional)
     * @param int $flag_matriz {{{estabelecimento_request_flag_matriz_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageEstabelecimentoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET25WithHttpInfo($sort = null, $page = null, $limit = null, $id = null, $id_grupo_economico = null, $numero_receita_federal = null, $nome = null, $descricao = null, $nome_fantasia = null, $cep = null, $nome_logradouro = null, $numero_endereco = null, $complemento = null, $bairro = null, $cidade = null, $uf = null, $pais = null, $data_cadastramento = null, $contato = null, $email = null, $flag_arquivo_secr_fazenda = null, $flag_cartao_digitado = null, $inativo = null, $id_pais = null, $mcc = null, $id_tipo_estabelecimento = null, $correspondencia = null, $id_moeda = null, $tipo_pagamento = null, $numero_estabelecimento = null, $cep2 = null, $nome_logradouro2 = null, $numero_endereco2 = null, $complemento2 = null, $bairro2 = null, $cidade2 = null, $uf2 = null, $flag_matriz = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/estabelecimentos";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }// query params
        
        if ($id_grupo_economico !== null) {
            $queryParams['idGrupoEconomico'] = $this->apiClient->getSerializer()->toQueryValue($id_grupo_economico);
        }// query params
        
        if ($numero_receita_federal !== null) {
            $queryParams['numeroReceitaFederal'] = $this->apiClient->getSerializer()->toQueryValue($numero_receita_federal);
        }// query params
        
        if ($nome !== null) {
            $queryParams['nome'] = $this->apiClient->getSerializer()->toQueryValue($nome);
        }// query params
        
        if ($descricao !== null) {
            $queryParams['descricao'] = $this->apiClient->getSerializer()->toQueryValue($descricao);
        }// query params
        
        if ($nome_fantasia !== null) {
            $queryParams['nomeFantasia'] = $this->apiClient->getSerializer()->toQueryValue($nome_fantasia);
        }// query params
        
        if ($cep !== null) {
            $queryParams['cep'] = $this->apiClient->getSerializer()->toQueryValue($cep);
        }// query params
        
        if ($nome_logradouro !== null) {
            $queryParams['nomeLogradouro'] = $this->apiClient->getSerializer()->toQueryValue($nome_logradouro);
        }// query params
        
        if ($numero_endereco !== null) {
            $queryParams['numeroEndereco'] = $this->apiClient->getSerializer()->toQueryValue($numero_endereco);
        }// query params
        
        if ($complemento !== null) {
            $queryParams['complemento'] = $this->apiClient->getSerializer()->toQueryValue($complemento);
        }// query params
        
        if ($bairro !== null) {
            $queryParams['bairro'] = $this->apiClient->getSerializer()->toQueryValue($bairro);
        }// query params
        
        if ($cidade !== null) {
            $queryParams['cidade'] = $this->apiClient->getSerializer()->toQueryValue($cidade);
        }// query params
        
        if ($uf !== null) {
            $queryParams['uf'] = $this->apiClient->getSerializer()->toQueryValue($uf);
        }// query params
        
        if ($pais !== null) {
            $queryParams['pais'] = $this->apiClient->getSerializer()->toQueryValue($pais);
        }// query params
        
        if ($data_cadastramento !== null) {
            $queryParams['dataCadastramento'] = $this->apiClient->getSerializer()->toQueryValue($data_cadastramento);
        }// query params
        
        if ($contato !== null) {
            $queryParams['contato'] = $this->apiClient->getSerializer()->toQueryValue($contato);
        }// query params
        
        if ($email !== null) {
            $queryParams['email'] = $this->apiClient->getSerializer()->toQueryValue($email);
        }// query params
        
        if ($flag_arquivo_secr_fazenda !== null) {
            $queryParams['flagArquivoSecrFazenda'] = $this->apiClient->getSerializer()->toQueryValue($flag_arquivo_secr_fazenda);
        }// query params
        
        if ($flag_cartao_digitado !== null) {
            $queryParams['flagCartaoDigitado'] = $this->apiClient->getSerializer()->toQueryValue($flag_cartao_digitado);
        }// query params
        
        if ($inativo !== null) {
            $queryParams['inativo'] = $this->apiClient->getSerializer()->toQueryValue($inativo);
        }// query params
        
        if ($id_pais !== null) {
            $queryParams['idPais'] = $this->apiClient->getSerializer()->toQueryValue($id_pais);
        }// query params
        
        if ($mcc !== null) {
            $queryParams['mcc'] = $this->apiClient->getSerializer()->toQueryValue($mcc);
        }// query params
        
        if ($id_tipo_estabelecimento !== null) {
            $queryParams['idTipoEstabelecimento'] = $this->apiClient->getSerializer()->toQueryValue($id_tipo_estabelecimento);
        }// query params
        
        if ($correspondencia !== null) {
            $queryParams['correspondencia'] = $this->apiClient->getSerializer()->toQueryValue($correspondencia);
        }// query params
        
        if ($id_moeda !== null) {
            $queryParams['idMoeda'] = $this->apiClient->getSerializer()->toQueryValue($id_moeda);
        }// query params
        
        if ($tipo_pagamento !== null) {
            $queryParams['tipoPagamento'] = $this->apiClient->getSerializer()->toQueryValue($tipo_pagamento);
        }// query params
        
        if ($numero_estabelecimento !== null) {
            $queryParams['numeroEstabelecimento'] = $this->apiClient->getSerializer()->toQueryValue($numero_estabelecimento);
        }// query params
        
        if ($cep2 !== null) {
            $queryParams['cep2'] = $this->apiClient->getSerializer()->toQueryValue($cep2);
        }// query params
        
        if ($nome_logradouro2 !== null) {
            $queryParams['nomeLogradouro2'] = $this->apiClient->getSerializer()->toQueryValue($nome_logradouro2);
        }// query params
        
        if ($numero_endereco2 !== null) {
            $queryParams['numeroEndereco2'] = $this->apiClient->getSerializer()->toQueryValue($numero_endereco2);
        }// query params
        
        if ($complemento2 !== null) {
            $queryParams['complemento2'] = $this->apiClient->getSerializer()->toQueryValue($complemento2);
        }// query params
        
        if ($bairro2 !== null) {
            $queryParams['bairro2'] = $this->apiClient->getSerializer()->toQueryValue($bairro2);
        }// query params
        
        if ($cidade2 !== null) {
            $queryParams['cidade2'] = $this->apiClient->getSerializer()->toQueryValue($cidade2);
        }// query params
        
        if ($uf2 !== null) {
            $queryParams['uf2'] = $this->apiClient->getSerializer()->toQueryValue($uf2);
        }// query params
        
        if ($flag_matriz !== null) {
            $queryParams['flagMatriz'] = $this->apiClient->getSerializer()->toQueryValue($flag_matriz);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageEstabelecimentoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageEstabelecimentoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageEstabelecimentoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET28
     *
     * {{{grupo_economico_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param string $razao_social {{{grupo_economico_request_razao_social_value}}} (optional)
     * @param string $nome_credor {{{grupo_economico_request_nome_credor_value}}} (optional)
     * @param string $numero_receita_federal {{{grupo_economico_request_numero_receita_federal_value}}} (optional)
     * @param string $inscricao_estadual {{{grupo_economico_request_inscricao_estadual_value}}} (optional)
     * @param string $contato {{{grupo_economico_request_contato_value}}} (optional)
     * @param int $banco {{{grupo_economico_request_banco_value}}} (optional)
     * @param int $agencia {{{grupo_economico_request_agencia_value}}} (optional)
     * @param string $digito_agencia {{{grupo_economico_request_digito_agencia_value}}} (optional)
     * @param string $conta_corrente {{{grupo_economico_request_conta_corrente_value}}} (optional)
     * @param string $digito_conta_corrente {{{grupo_economico_request_digito_conta_corrente_value}}} (optional)
     * @param string $periodicidade {{{grupo_economico_request_periodicidade_value}}} (optional)
     * @param string $pagamento_semanal {{{grupo_economico_request_pagamento_semanal_value}}} (optional)
     * @param int $pagamento_mensal {{{grupo_economico_request_pagamento_mensal_value}}} (optional)
     * @param int $pagamento_decendial_primeiro {{{grupo_economico_request_pagamento_decendial_primeiro_value}}} (optional)
     * @param int $pagamento_decendial_segundo {{{grupo_economico_request_pagamento_decendial_segundo_value}}} (optional)
     * @param int $pagamento_decendial_terceiro {{{grupo_economico_request_pagamento_decendial_terceiro_value}}} (optional)
     * @param int $pagamento_quinzenal_primeiro {{{grupo_economico_request_pagamento_quinzenal_primeiro_value}}} (optional)
     * @param int $pagamento_quinzenal_segundo {{{grupo_economico_request_pagamento_quinzenal_segundo_value}}} (optional)
     * @param Number $percentual_rav {{{grupo_economico_request_percentual_r_a_v_value}}} (optional)
     * @param string $recebe_rav {{{grupo_economico_request_recebe_r_a_v_value}}} (optional)
     * @param Number $percentual_multiplica {{{grupo_economico_request_percentual_multiplica_value}}} (optional)
     * @param Number $taxa_adm {{{grupo_economico_request_taxa_adm_value}}} (optional)
     * @param Number $taxa_banco {{{grupo_economico_request_taxa_banco_value}}} (optional)
     * @param Number $limite_rav {{{grupo_economico_request_limite_r_a_v_value}}} (optional)
     * @param int $id_credor_rav {{{grupo_economico_request_id_credor_r_a_v_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageGrupoEconomicoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET28($sort = null, $page = null, $limit = null, $razao_social = null, $nome_credor = null, $numero_receita_federal = null, $inscricao_estadual = null, $contato = null, $banco = null, $agencia = null, $digito_agencia = null, $conta_corrente = null, $digito_conta_corrente = null, $periodicidade = null, $pagamento_semanal = null, $pagamento_mensal = null, $pagamento_decendial_primeiro = null, $pagamento_decendial_segundo = null, $pagamento_decendial_terceiro = null, $pagamento_quinzenal_primeiro = null, $pagamento_quinzenal_segundo = null, $percentual_rav = null, $recebe_rav = null, $percentual_multiplica = null, $taxa_adm = null, $taxa_banco = null, $limite_rav = null, $id_credor_rav = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGET28WithHttpInfo ($sort, $page, $limit, $razao_social, $nome_credor, $numero_receita_federal, $inscricao_estadual, $contato, $banco, $agencia, $digito_agencia, $conta_corrente, $digito_conta_corrente, $periodicidade, $pagamento_semanal, $pagamento_mensal, $pagamento_decendial_primeiro, $pagamento_decendial_segundo, $pagamento_decendial_terceiro, $pagamento_quinzenal_primeiro, $pagamento_quinzenal_segundo, $percentual_rav, $recebe_rav, $percentual_multiplica, $taxa_adm, $taxa_banco, $limite_rav, $id_credor_rav);
        return $response; 
    }


    /**
     * listarUsingGET28WithHttpInfo
     *
     * {{{grupo_economico_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param string $razao_social {{{grupo_economico_request_razao_social_value}}} (optional)
     * @param string $nome_credor {{{grupo_economico_request_nome_credor_value}}} (optional)
     * @param string $numero_receita_federal {{{grupo_economico_request_numero_receita_federal_value}}} (optional)
     * @param string $inscricao_estadual {{{grupo_economico_request_inscricao_estadual_value}}} (optional)
     * @param string $contato {{{grupo_economico_request_contato_value}}} (optional)
     * @param int $banco {{{grupo_economico_request_banco_value}}} (optional)
     * @param int $agencia {{{grupo_economico_request_agencia_value}}} (optional)
     * @param string $digito_agencia {{{grupo_economico_request_digito_agencia_value}}} (optional)
     * @param string $conta_corrente {{{grupo_economico_request_conta_corrente_value}}} (optional)
     * @param string $digito_conta_corrente {{{grupo_economico_request_digito_conta_corrente_value}}} (optional)
     * @param string $periodicidade {{{grupo_economico_request_periodicidade_value}}} (optional)
     * @param string $pagamento_semanal {{{grupo_economico_request_pagamento_semanal_value}}} (optional)
     * @param int $pagamento_mensal {{{grupo_economico_request_pagamento_mensal_value}}} (optional)
     * @param int $pagamento_decendial_primeiro {{{grupo_economico_request_pagamento_decendial_primeiro_value}}} (optional)
     * @param int $pagamento_decendial_segundo {{{grupo_economico_request_pagamento_decendial_segundo_value}}} (optional)
     * @param int $pagamento_decendial_terceiro {{{grupo_economico_request_pagamento_decendial_terceiro_value}}} (optional)
     * @param int $pagamento_quinzenal_primeiro {{{grupo_economico_request_pagamento_quinzenal_primeiro_value}}} (optional)
     * @param int $pagamento_quinzenal_segundo {{{grupo_economico_request_pagamento_quinzenal_segundo_value}}} (optional)
     * @param Number $percentual_rav {{{grupo_economico_request_percentual_r_a_v_value}}} (optional)
     * @param string $recebe_rav {{{grupo_economico_request_recebe_r_a_v_value}}} (optional)
     * @param Number $percentual_multiplica {{{grupo_economico_request_percentual_multiplica_value}}} (optional)
     * @param Number $taxa_adm {{{grupo_economico_request_taxa_adm_value}}} (optional)
     * @param Number $taxa_banco {{{grupo_economico_request_taxa_banco_value}}} (optional)
     * @param Number $limite_rav {{{grupo_economico_request_limite_r_a_v_value}}} (optional)
     * @param int $id_credor_rav {{{grupo_economico_request_id_credor_r_a_v_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageGrupoEconomicoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET28WithHttpInfo($sort = null, $page = null, $limit = null, $razao_social = null, $nome_credor = null, $numero_receita_federal = null, $inscricao_estadual = null, $contato = null, $banco = null, $agencia = null, $digito_agencia = null, $conta_corrente = null, $digito_conta_corrente = null, $periodicidade = null, $pagamento_semanal = null, $pagamento_mensal = null, $pagamento_decendial_primeiro = null, $pagamento_decendial_segundo = null, $pagamento_decendial_terceiro = null, $pagamento_quinzenal_primeiro = null, $pagamento_quinzenal_segundo = null, $percentual_rav = null, $recebe_rav = null, $percentual_multiplica = null, $taxa_adm = null, $taxa_banco = null, $limite_rav = null, $id_credor_rav = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/grupos-economicos";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($razao_social !== null) {
            $queryParams['razaoSocial'] = $this->apiClient->getSerializer()->toQueryValue($razao_social);
        }// query params
        
        if ($nome_credor !== null) {
            $queryParams['nomeCredor'] = $this->apiClient->getSerializer()->toQueryValue($nome_credor);
        }// query params
        
        if ($numero_receita_federal !== null) {
            $queryParams['numeroReceitaFederal'] = $this->apiClient->getSerializer()->toQueryValue($numero_receita_federal);
        }// query params
        
        if ($inscricao_estadual !== null) {
            $queryParams['inscricaoEstadual'] = $this->apiClient->getSerializer()->toQueryValue($inscricao_estadual);
        }// query params
        
        if ($contato !== null) {
            $queryParams['contato'] = $this->apiClient->getSerializer()->toQueryValue($contato);
        }// query params
        
        if ($banco !== null) {
            $queryParams['banco'] = $this->apiClient->getSerializer()->toQueryValue($banco);
        }// query params
        
        if ($agencia !== null) {
            $queryParams['agencia'] = $this->apiClient->getSerializer()->toQueryValue($agencia);
        }// query params
        
        if ($digito_agencia !== null) {
            $queryParams['digitoAgencia'] = $this->apiClient->getSerializer()->toQueryValue($digito_agencia);
        }// query params
        
        if ($conta_corrente !== null) {
            $queryParams['contaCorrente'] = $this->apiClient->getSerializer()->toQueryValue($conta_corrente);
        }// query params
        
        if ($digito_conta_corrente !== null) {
            $queryParams['digitoContaCorrente'] = $this->apiClient->getSerializer()->toQueryValue($digito_conta_corrente);
        }// query params
        
        if ($periodicidade !== null) {
            $queryParams['periodicidade'] = $this->apiClient->getSerializer()->toQueryValue($periodicidade);
        }// query params
        
        if ($pagamento_semanal !== null) {
            $queryParams['pagamentoSemanal'] = $this->apiClient->getSerializer()->toQueryValue($pagamento_semanal);
        }// query params
        
        if ($pagamento_mensal !== null) {
            $queryParams['pagamentoMensal'] = $this->apiClient->getSerializer()->toQueryValue($pagamento_mensal);
        }// query params
        
        if ($pagamento_decendial_primeiro !== null) {
            $queryParams['pagamentoDecendialPrimeiro'] = $this->apiClient->getSerializer()->toQueryValue($pagamento_decendial_primeiro);
        }// query params
        
        if ($pagamento_decendial_segundo !== null) {
            $queryParams['pagamentoDecendialSegundo'] = $this->apiClient->getSerializer()->toQueryValue($pagamento_decendial_segundo);
        }// query params
        
        if ($pagamento_decendial_terceiro !== null) {
            $queryParams['pagamentoDecendialTerceiro'] = $this->apiClient->getSerializer()->toQueryValue($pagamento_decendial_terceiro);
        }// query params
        
        if ($pagamento_quinzenal_primeiro !== null) {
            $queryParams['pagamentoQuinzenalPrimeiro'] = $this->apiClient->getSerializer()->toQueryValue($pagamento_quinzenal_primeiro);
        }// query params
        
        if ($pagamento_quinzenal_segundo !== null) {
            $queryParams['pagamentoQuinzenalSegundo'] = $this->apiClient->getSerializer()->toQueryValue($pagamento_quinzenal_segundo);
        }// query params
        
        if ($percentual_rav !== null) {
            $queryParams['percentualRAV'] = $this->apiClient->getSerializer()->toQueryValue($percentual_rav);
        }// query params
        
        if ($recebe_rav !== null) {
            $queryParams['recebeRAV'] = $this->apiClient->getSerializer()->toQueryValue($recebe_rav);
        }// query params
        
        if ($percentual_multiplica !== null) {
            $queryParams['percentualMultiplica'] = $this->apiClient->getSerializer()->toQueryValue($percentual_multiplica);
        }// query params
        
        if ($taxa_adm !== null) {
            $queryParams['taxaAdm'] = $this->apiClient->getSerializer()->toQueryValue($taxa_adm);
        }// query params
        
        if ($taxa_banco !== null) {
            $queryParams['taxaBanco'] = $this->apiClient->getSerializer()->toQueryValue($taxa_banco);
        }// query params
        
        if ($limite_rav !== null) {
            $queryParams['limiteRAV'] = $this->apiClient->getSerializer()->toQueryValue($limite_rav);
        }// query params
        
        if ($id_credor_rav !== null) {
            $queryParams['idCredorRAV'] = $this->apiClient->getSerializer()->toQueryValue($id_credor_rav);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageGrupoEconomicoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageGrupoEconomicoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageGrupoEconomicoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET29
     *
     * {{{grupo_origem_comercial_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param string $nome {{{grupo_origem_comercial_request_nome_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageGrupoOrigemComercialResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET29($sort = null, $page = null, $limit = null, $nome = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGET29WithHttpInfo ($sort, $page, $limit, $nome);
        return $response; 
    }


    /**
     * listarUsingGET29WithHttpInfo
     *
     * {{{grupo_origem_comercial_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param string $nome {{{grupo_origem_comercial_request_nome_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageGrupoOrigemComercialResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET29WithHttpInfo($sort = null, $page = null, $limit = null, $nome = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/grupos-origens-comerciais";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($nome !== null) {
            $queryParams['nome'] = $this->apiClient->getSerializer()->toQueryValue($nome);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageGrupoOrigemComercialResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageGrupoOrigemComercialResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageGrupoOrigemComercialResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET32
     *
     * {{{maquineta_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_estabelecimento {{{maquineta_request_id_estabelecimento_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageMaquinetaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET32($sort = null, $page = null, $limit = null, $id_estabelecimento = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGET32WithHttpInfo ($sort, $page, $limit, $id_estabelecimento);
        return $response; 
    }


    /**
     * listarUsingGET32WithHttpInfo
     *
     * {{{maquineta_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_estabelecimento {{{maquineta_request_id_estabelecimento_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageMaquinetaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET32WithHttpInfo($sort = null, $page = null, $limit = null, $id_estabelecimento = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/maquinetas";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id_estabelecimento !== null) {
            $queryParams['idEstabelecimento'] = $this->apiClient->getSerializer()->toQueryValue($id_estabelecimento);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageMaquinetaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageMaquinetaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageMaquinetaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET33
     *
     * {{{moeda_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param string $codigo_moeda {{{moeda_request_codigo_moeda_value}}} (optional)
     * @param string $simbolo {{{moeda_request_simbolo_value}}} (optional)
     * @param string $descricao {{{moeda_request_descricao_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageMoedaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET33($sort = null, $page = null, $limit = null, $codigo_moeda = null, $simbolo = null, $descricao = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGET33WithHttpInfo ($sort, $page, $limit, $codigo_moeda, $simbolo, $descricao);
        return $response; 
    }


    /**
     * listarUsingGET33WithHttpInfo
     *
     * {{{moeda_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param string $codigo_moeda {{{moeda_request_codigo_moeda_value}}} (optional)
     * @param string $simbolo {{{moeda_request_simbolo_value}}} (optional)
     * @param string $descricao {{{moeda_request_descricao_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageMoedaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET33WithHttpInfo($sort = null, $page = null, $limit = null, $codigo_moeda = null, $simbolo = null, $descricao = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/tipos-moedas";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($codigo_moeda !== null) {
            $queryParams['codigoMoeda'] = $this->apiClient->getSerializer()->toQueryValue($codigo_moeda);
        }// query params
        
        if ($simbolo !== null) {
            $queryParams['simbolo'] = $this->apiClient->getSerializer()->toQueryValue($simbolo);
        }// query params
        
        if ($descricao !== null) {
            $queryParams['descricao'] = $this->apiClient->getSerializer()->toQueryValue($descricao);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageMoedaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageMoedaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageMoedaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET34
     *
     * {{{operacao_credor_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_operacao {{{operacao_credor_request_id_operacao_value}}} (optional)
     * @param int $id_credor {{{operacao_credor_request_id_credor_value}}} (optional)
     * @param int $id_produto {{{operacao_credor_request_id_produto_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageOperacaoCredorResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET34($sort = null, $page = null, $limit = null, $id_operacao = null, $id_credor = null, $id_produto = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGET34WithHttpInfo ($sort, $page, $limit, $id_operacao, $id_credor, $id_produto);
        return $response; 
    }


    /**
     * listarUsingGET34WithHttpInfo
     *
     * {{{operacao_credor_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_operacao {{{operacao_credor_request_id_operacao_value}}} (optional)
     * @param int $id_credor {{{operacao_credor_request_id_credor_value}}} (optional)
     * @param int $id_produto {{{operacao_credor_request_id_produto_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageOperacaoCredorResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET34WithHttpInfo($sort = null, $page = null, $limit = null, $id_operacao = null, $id_credor = null, $id_produto = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/regras-operacoes-estabelecimentos";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id_operacao !== null) {
            $queryParams['idOperacao'] = $this->apiClient->getSerializer()->toQueryValue($id_operacao);
        }// query params
        
        if ($id_credor !== null) {
            $queryParams['idCredor'] = $this->apiClient->getSerializer()->toQueryValue($id_credor);
        }// query params
        
        if ($id_produto !== null) {
            $queryParams['idProduto'] = $this->apiClient->getSerializer()->toQueryValue($id_produto);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageOperacaoCredorResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageOperacaoCredorResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageOperacaoCredorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET49
     *
     * {{{telefone_estabelecimento_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_estabelecimento {{{telefone_estabelecimento_request_id_estabelecimento_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageTelefoneEstabelecimentoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET49($sort = null, $page = null, $limit = null, $id_estabelecimento = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGET49WithHttpInfo ($sort, $page, $limit, $id_estabelecimento);
        return $response; 
    }


    /**
     * listarUsingGET49WithHttpInfo
     *
     * {{{telefone_estabelecimento_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_estabelecimento {{{telefone_estabelecimento_request_id_estabelecimento_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageTelefoneEstabelecimentoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET49WithHttpInfo($sort = null, $page = null, $limit = null, $id_estabelecimento = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/telefones-estabelecimentos";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id_estabelecimento !== null) {
            $queryParams['idEstabelecimento'] = $this->apiClient->getSerializer()->toQueryValue($id_estabelecimento);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageTelefoneEstabelecimentoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageTelefoneEstabelecimentoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageTelefoneEstabelecimentoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET51
     *
     * {{{terminal_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id {{{terminal_request_id_value}}} (optional)
     * @param string $terminal {{{terminal_request_terminal_value}}} (optional)
     * @param int $numero_estabelecimento {{{terminal_request_numero_estabelecimento_value}}} (optional)
     * @param int $id_estabelecimento {{{terminal_request_id_estabelecimento_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageTerminalResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET51($sort = null, $page = null, $limit = null, $id = null, $terminal = null, $numero_estabelecimento = null, $id_estabelecimento = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGET51WithHttpInfo ($sort, $page, $limit, $id, $terminal, $numero_estabelecimento, $id_estabelecimento);
        return $response; 
    }


    /**
     * listarUsingGET51WithHttpInfo
     *
     * {{{terminal_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id {{{terminal_request_id_value}}} (optional)
     * @param string $terminal {{{terminal_request_terminal_value}}} (optional)
     * @param int $numero_estabelecimento {{{terminal_request_numero_estabelecimento_value}}} (optional)
     * @param int $id_estabelecimento {{{terminal_request_id_estabelecimento_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageTerminalResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET51WithHttpInfo($sort = null, $page = null, $limit = null, $id = null, $terminal = null, $numero_estabelecimento = null, $id_estabelecimento = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/terminais";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }// query params
        
        if ($terminal !== null) {
            $queryParams['terminal'] = $this->apiClient->getSerializer()->toQueryValue($terminal);
        }// query params
        
        if ($numero_estabelecimento !== null) {
            $queryParams['numeroEstabelecimento'] = $this->apiClient->getSerializer()->toQueryValue($numero_estabelecimento);
        }// query params
        
        if ($id_estabelecimento !== null) {
            $queryParams['idEstabelecimento'] = $this->apiClient->getSerializer()->toQueryValue($id_estabelecimento);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageTerminalResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageTerminalResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageTerminalResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET64
     *
     * {{{vinculo_estabelecimento_adquirente_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_adquirente {{{vinculo_estabelecimento_adquirente_request_id_adquirente_value}}} (optional)
     * @param int $id_estabelecimento {{{vinculo_estabelecimento_adquirente_request_id_estabelecimento_value}}} (optional)
     * @param string $codigo_estabelecimento_adquirente {{{vinculo_estabelecimento_adquirente_request_codigo_estabelecimento_adquirente_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageVinculoEstabelecimentoAdquirenteResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET64($sort = null, $page = null, $limit = null, $id_adquirente = null, $id_estabelecimento = null, $codigo_estabelecimento_adquirente = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGET64WithHttpInfo ($sort, $page, $limit, $id_adquirente, $id_estabelecimento, $codigo_estabelecimento_adquirente);
        return $response; 
    }


    /**
     * listarUsingGET64WithHttpInfo
     *
     * {{{vinculo_estabelecimento_adquirente_resource_listar}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_adquirente {{{vinculo_estabelecimento_adquirente_request_id_adquirente_value}}} (optional)
     * @param int $id_estabelecimento {{{vinculo_estabelecimento_adquirente_request_id_estabelecimento_value}}} (optional)
     * @param string $codigo_estabelecimento_adquirente {{{vinculo_estabelecimento_adquirente_request_codigo_estabelecimento_adquirente_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageVinculoEstabelecimentoAdquirenteResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET64WithHttpInfo($sort = null, $page = null, $limit = null, $id_adquirente = null, $id_estabelecimento = null, $codigo_estabelecimento_adquirente = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/adquirentes-estabelecimento";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id_adquirente !== null) {
            $queryParams['idAdquirente'] = $this->apiClient->getSerializer()->toQueryValue($id_adquirente);
        }// query params
        
        if ($id_estabelecimento !== null) {
            $queryParams['idEstabelecimento'] = $this->apiClient->getSerializer()->toQueryValue($id_estabelecimento);
        }// query params
        
        if ($codigo_estabelecimento_adquirente !== null) {
            $queryParams['codigoEstabelecimentoAdquirente'] = $this->apiClient->getSerializer()->toQueryValue($codigo_estabelecimento_adquirente);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageVinculoEstabelecimentoAdquirenteResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageVinculoEstabelecimentoAdquirenteResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageVinculoEstabelecimentoAdquirenteResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET65
     *
     * {{{vinculo_operacao_resource_listar}}}
     *
     * @param int $id {{{vinculo_operacao_resource_listar_param_id}}} (required)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_produto {{{vinculo_operacao_request_id_produto_value}}} (optional)
     * @param int $id_operacao {{{vinculo_operacao_request_id_operacao_value}}} (optional)
     * @param int $codigo_mcc {{{vinculo_operacao_request_codigo_m_c_c_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageVinculoOperacaoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET65($id, $sort = null, $page = null, $limit = null, $id_produto = null, $id_operacao = null, $codigo_mcc = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGET65WithHttpInfo ($id, $sort, $page, $limit, $id_produto, $id_operacao, $codigo_mcc);
        return $response; 
    }


    /**
     * listarUsingGET65WithHttpInfo
     *
     * {{{vinculo_operacao_resource_listar}}}
     *
     * @param int $id {{{vinculo_operacao_resource_listar_param_id}}} (required)
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_produto {{{vinculo_operacao_request_id_produto_value}}} (optional)
     * @param int $id_operacao {{{vinculo_operacao_request_id_operacao_value}}} (optional)
     * @param int $codigo_mcc {{{vinculo_operacao_request_codigo_m_c_c_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageVinculoOperacaoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET65WithHttpInfo($id, $sort = null, $page = null, $limit = null, $id_produto = null, $id_operacao = null, $codigo_mcc = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling listarUsingGET65');
        }
  
        // parse inputs
        $resourcePath = "/api/estabelecimentos/{id}/operacoes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id_produto !== null) {
            $queryParams['idProduto'] = $this->apiClient->getSerializer()->toQueryValue($id_produto);
        }// query params
        
        if ($id_operacao !== null) {
            $queryParams['idOperacao'] = $this->apiClient->getSerializer()->toQueryValue($id_operacao);
        }// query params
        
        if ($codigo_mcc !== null) {
            $queryParams['codigoMCC'] = $this->apiClient->getSerializer()->toQueryValue($codigo_mcc);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageVinculoOperacaoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageVinculoOperacaoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageVinculoOperacaoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * salvarUsingPOST19
     *
     * {{{maquineta_resource_salvar}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\MaquinetaPersist $maquineta_persist maquinetaPersist (required)
     * @return \br.com.conductor.pier.api.v2.model\MaquinetaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST19($maquineta_persist)
    {
        list($response, $statusCode, $httpHeader) = $this->salvarUsingPOST19WithHttpInfo ($maquineta_persist);
        return $response; 
    }


    /**
     * salvarUsingPOST19WithHttpInfo
     *
     * {{{maquineta_resource_salvar}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\MaquinetaPersist $maquineta_persist maquinetaPersist (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\MaquinetaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST19WithHttpInfo($maquineta_persist)
    {
        
        // verify the required parameter 'maquineta_persist' is set
        if ($maquineta_persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $maquineta_persist when calling salvarUsingPOST19');
        }
  
        // parse inputs
        $resourcePath = "/api/maquinetas";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($maquineta_persist)) {
            $_tempBody = $maquineta_persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\MaquinetaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\MaquinetaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\MaquinetaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * salvarUsingPOST20
     *
     * {{{operacao_credor_resource_salvar}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\OperacaoCredorPersist $operacao_credor_persist operacaoCredorPersist (required)
     * @return \br.com.conductor.pier.api.v2.model\OperacaoCredorResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST20($operacao_credor_persist)
    {
        list($response, $statusCode, $httpHeader) = $this->salvarUsingPOST20WithHttpInfo ($operacao_credor_persist);
        return $response; 
    }


    /**
     * salvarUsingPOST20WithHttpInfo
     *
     * {{{operacao_credor_resource_salvar}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\OperacaoCredorPersist $operacao_credor_persist operacaoCredorPersist (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\OperacaoCredorResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST20WithHttpInfo($operacao_credor_persist)
    {
        
        // verify the required parameter 'operacao_credor_persist' is set
        if ($operacao_credor_persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $operacao_credor_persist when calling salvarUsingPOST20');
        }
  
        // parse inputs
        $resourcePath = "/api/regras-operacoes-estabelecimentos";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($operacao_credor_persist)) {
            $_tempBody = $operacao_credor_persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\OperacaoCredorResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\OperacaoCredorResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\OperacaoCredorResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * salvarUsingPOST27
     *
     * {{{telefone_estabelecimento_resource_salvar}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\TelefoneEstabelecimentoPersist $telefone_estabelecimento_persist telefoneEstabelecimentoPersist (required)
     * @return \br.com.conductor.pier.api.v2.model\TelefoneEstabelecimentoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST27($telefone_estabelecimento_persist)
    {
        list($response, $statusCode, $httpHeader) = $this->salvarUsingPOST27WithHttpInfo ($telefone_estabelecimento_persist);
        return $response; 
    }


    /**
     * salvarUsingPOST27WithHttpInfo
     *
     * {{{telefone_estabelecimento_resource_salvar}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\TelefoneEstabelecimentoPersist $telefone_estabelecimento_persist telefoneEstabelecimentoPersist (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\TelefoneEstabelecimentoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST27WithHttpInfo($telefone_estabelecimento_persist)
    {
        
        // verify the required parameter 'telefone_estabelecimento_persist' is set
        if ($telefone_estabelecimento_persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $telefone_estabelecimento_persist when calling salvarUsingPOST27');
        }
  
        // parse inputs
        $resourcePath = "/api/telefones-estabelecimentos";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($telefone_estabelecimento_persist)) {
            $_tempBody = $telefone_estabelecimento_persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\TelefoneEstabelecimentoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\TelefoneEstabelecimentoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\TelefoneEstabelecimentoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * salvarUsingPOST29
     *
     * {{{terminal_resource_salvar}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\TerminalPersist $terminal_persist terminalPersist (required)
     * @return \br.com.conductor.pier.api.v2.model\TerminalResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST29($terminal_persist)
    {
        list($response, $statusCode, $httpHeader) = $this->salvarUsingPOST29WithHttpInfo ($terminal_persist);
        return $response; 
    }


    /**
     * salvarUsingPOST29WithHttpInfo
     *
     * {{{terminal_resource_salvar}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\TerminalPersist $terminal_persist terminalPersist (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\TerminalResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST29WithHttpInfo($terminal_persist)
    {
        
        // verify the required parameter 'terminal_persist' is set
        if ($terminal_persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $terminal_persist when calling salvarUsingPOST29');
        }
  
        // parse inputs
        $resourcePath = "/api/terminais";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($terminal_persist)) {
            $_tempBody = $terminal_persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\TerminalResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\TerminalResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\TerminalResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * salvarUsingPOST34
     *
     * {{{vinculo_estabelecimento_adquirente_resource_salvar}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\VinculoEstabelecimentoAdquirentePersist $vinculo_estabelecimento_adquirente_persist vinculoEstabelecimentoAdquirentePersist (required)
     * @return \br.com.conductor.pier.api.v2.model\VinculoEstabelecimentoAdquirenteResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST34($vinculo_estabelecimento_adquirente_persist)
    {
        list($response, $statusCode, $httpHeader) = $this->salvarUsingPOST34WithHttpInfo ($vinculo_estabelecimento_adquirente_persist);
        return $response; 
    }


    /**
     * salvarUsingPOST34WithHttpInfo
     *
     * {{{vinculo_estabelecimento_adquirente_resource_salvar}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\VinculoEstabelecimentoAdquirentePersist $vinculo_estabelecimento_adquirente_persist vinculoEstabelecimentoAdquirentePersist (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\VinculoEstabelecimentoAdquirenteResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST34WithHttpInfo($vinculo_estabelecimento_adquirente_persist)
    {
        
        // verify the required parameter 'vinculo_estabelecimento_adquirente_persist' is set
        if ($vinculo_estabelecimento_adquirente_persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vinculo_estabelecimento_adquirente_persist when calling salvarUsingPOST34');
        }
  
        // parse inputs
        $resourcePath = "/api/adquirentes-estabelecimento";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($vinculo_estabelecimento_adquirente_persist)) {
            $_tempBody = $vinculo_estabelecimento_adquirente_persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\VinculoEstabelecimentoAdquirenteResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\VinculoEstabelecimentoAdquirenteResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\VinculoEstabelecimentoAdquirenteResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
