<?php
/**
 * CartaoEmbossingResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2.model;

use \ArrayAccess;
/**
 * CartaoEmbossingResponse Class Doc Comment
 *
 * @category    Class
 * @description Objeto Cart\u00E3o para Impress\u00E3o pela Gr\u00E1fica
 * @package     br.com.conductor.pier.api.v2.invoker
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CartaoEmbossingResponse implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'flag_virtual' => 'int',
        'id_conta' => 'int',
        'id_pessoa' => 'int',
        'id_cartao' => 'int',
        'id_bandeira' => 'int',
        'id_tipo_cartao' => 'int',
        'data_geracao' => 'string',
        'data_validade' => 'string',
        'nome_origem_comercial' => 'string',
        'cpf' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'flag_virtual' => 'flagVirtual',
        'id_conta' => 'idConta',
        'id_pessoa' => 'idPessoa',
        'id_cartao' => 'idCartao',
        'id_bandeira' => 'idBandeira',
        'id_tipo_cartao' => 'idTipoCartao',
        'data_geracao' => 'dataGeracao',
        'data_validade' => 'dataValidade',
        'nome_origem_comercial' => 'nomeOrigemComercial',
        'cpf' => 'cpf'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'flag_virtual' => 'setFlagVirtual',
        'id_conta' => 'setIdConta',
        'id_pessoa' => 'setIdPessoa',
        'id_cartao' => 'setIdCartao',
        'id_bandeira' => 'setIdBandeira',
        'id_tipo_cartao' => 'setIdTipoCartao',
        'data_geracao' => 'setDataGeracao',
        'data_validade' => 'setDataValidade',
        'nome_origem_comercial' => 'setNomeOrigemComercial',
        'cpf' => 'setCpf'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'flag_virtual' => 'getFlagVirtual',
        'id_conta' => 'getIdConta',
        'id_pessoa' => 'getIdPessoa',
        'id_cartao' => 'getIdCartao',
        'id_bandeira' => 'getIdBandeira',
        'id_tipo_cartao' => 'getIdTipoCartao',
        'data_geracao' => 'getDataGeracao',
        'data_validade' => 'getDataValidade',
        'nome_origem_comercial' => 'getNomeOrigemComercial',
        'cpf' => 'getCpf'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $flag_virtual Apresenta o status que informa se o cart\u00E3o \u00E9 virtual 
      * @var int
      */
    protected $flag_virtual;
    
    /**
      * $id_conta Apresenta o C\u00F3digo de Identifica\u00E7\u00E3o da Conta (id) a qual o cart\u00E3o gerado pertence.
      * @var int
      */
    protected $id_conta;
    
    /**
      * $id_pessoa Apresenta o C\u00F3digo de Identifica\u00E7\u00E3o da Pessoa (id) portadora do cart\u00E3o gerado.
      * @var int
      */
    protected $id_pessoa;
    
    /**
      * $id_cartao Apresenta o C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id) que foi gerado.
      * @var int
      */
    protected $id_cartao;
    
    /**
      * $id_bandeira Apresenta o C\u00F3digo de Identifica\u00E7\u00E3o da Bandeira (id) a qual o Cart\u00E3o pertence, quando bandeirado.
      * @var int
      */
    protected $id_bandeira;
    
    /**
      * $id_tipo_cartao Apresenta o C\u00F3digo de Identifica\u00E7\u00E3o do Tipo do Cart\u00E3o (id) atribu\u00EDdo ao Cart\u00E3o.
      * @var int
      */
    protected $id_tipo_cartao;
    
    /**
      * $data_geracao Apresenta a data de emiss\u00E3o do Cart\u00E3o.
      * @var string
      */
    protected $data_geracao;
    
    /**
      * $data_validade Apresenta a data de Validade do Cart\u00E3o.
      * @var string
      */
    protected $data_validade;
    
    /**
      * $nome_origem_comercial Apresenta o nome da Origem Comercial que realizou o cadastro do Titular da Conta a qual o Cart\u00E3o pertence.
      * @var string
      */
    protected $nome_origem_comercial;
    
    /**
      * $cpf Apresenta o CPF do Portador do Cart\u00E3o.
      * @var string
      */
    protected $cpf;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->flag_virtual = $data["flag_virtual"];
            $this->id_conta = $data["id_conta"];
            $this->id_pessoa = $data["id_pessoa"];
            $this->id_cartao = $data["id_cartao"];
            $this->id_bandeira = $data["id_bandeira"];
            $this->id_tipo_cartao = $data["id_tipo_cartao"];
            $this->data_geracao = $data["data_geracao"];
            $this->data_validade = $data["data_validade"];
            $this->nome_origem_comercial = $data["nome_origem_comercial"];
            $this->cpf = $data["cpf"];
        }
    }
    
    /**
     * Gets flag_virtual
     * @return int
     */
    public function getFlagVirtual()
    {
        return $this->flag_virtual;
    }
  
    /**
     * Sets flag_virtual
     * @param int $flag_virtual Apresenta o status que informa se o cart\u00E3o \u00E9 virtual 
     * @return $this
     */
    public function setFlagVirtual($flag_virtual)
    {
        
        $this->flag_virtual = $flag_virtual;
        return $this;
    }
    
    /**
     * Gets id_conta
     * @return int
     */
    public function getIdConta()
    {
        return $this->id_conta;
    }
  
    /**
     * Sets id_conta
     * @param int $id_conta Apresenta o C\u00F3digo de Identifica\u00E7\u00E3o da Conta (id) a qual o cart\u00E3o gerado pertence.
     * @return $this
     */
    public function setIdConta($id_conta)
    {
        
        $this->id_conta = $id_conta;
        return $this;
    }
    
    /**
     * Gets id_pessoa
     * @return int
     */
    public function getIdPessoa()
    {
        return $this->id_pessoa;
    }
  
    /**
     * Sets id_pessoa
     * @param int $id_pessoa Apresenta o C\u00F3digo de Identifica\u00E7\u00E3o da Pessoa (id) portadora do cart\u00E3o gerado.
     * @return $this
     */
    public function setIdPessoa($id_pessoa)
    {
        
        $this->id_pessoa = $id_pessoa;
        return $this;
    }
    
    /**
     * Gets id_cartao
     * @return int
     */
    public function getIdCartao()
    {
        return $this->id_cartao;
    }
  
    /**
     * Sets id_cartao
     * @param int $id_cartao Apresenta o C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id) que foi gerado.
     * @return $this
     */
    public function setIdCartao($id_cartao)
    {
        
        $this->id_cartao = $id_cartao;
        return $this;
    }
    
    /**
     * Gets id_bandeira
     * @return int
     */
    public function getIdBandeira()
    {
        return $this->id_bandeira;
    }
  
    /**
     * Sets id_bandeira
     * @param int $id_bandeira Apresenta o C\u00F3digo de Identifica\u00E7\u00E3o da Bandeira (id) a qual o Cart\u00E3o pertence, quando bandeirado.
     * @return $this
     */
    public function setIdBandeira($id_bandeira)
    {
        
        $this->id_bandeira = $id_bandeira;
        return $this;
    }
    
    /**
     * Gets id_tipo_cartao
     * @return int
     */
    public function getIdTipoCartao()
    {
        return $this->id_tipo_cartao;
    }
  
    /**
     * Sets id_tipo_cartao
     * @param int $id_tipo_cartao Apresenta o C\u00F3digo de Identifica\u00E7\u00E3o do Tipo do Cart\u00E3o (id) atribu\u00EDdo ao Cart\u00E3o.
     * @return $this
     */
    public function setIdTipoCartao($id_tipo_cartao)
    {
        
        $this->id_tipo_cartao = $id_tipo_cartao;
        return $this;
    }
    
    /**
     * Gets data_geracao
     * @return string
     */
    public function getDataGeracao()
    {
        return $this->data_geracao;
    }
  
    /**
     * Sets data_geracao
     * @param string $data_geracao Apresenta a data de emiss\u00E3o do Cart\u00E3o.
     * @return $this
     */
    public function setDataGeracao($data_geracao)
    {
        
        $this->data_geracao = $data_geracao;
        return $this;
    }
    
    /**
     * Gets data_validade
     * @return string
     */
    public function getDataValidade()
    {
        return $this->data_validade;
    }
  
    /**
     * Sets data_validade
     * @param string $data_validade Apresenta a data de Validade do Cart\u00E3o.
     * @return $this
     */
    public function setDataValidade($data_validade)
    {
        
        $this->data_validade = $data_validade;
        return $this;
    }
    
    /**
     * Gets nome_origem_comercial
     * @return string
     */
    public function getNomeOrigemComercial()
    {
        return $this->nome_origem_comercial;
    }
  
    /**
     * Sets nome_origem_comercial
     * @param string $nome_origem_comercial Apresenta o nome da Origem Comercial que realizou o cadastro do Titular da Conta a qual o Cart\u00E3o pertence.
     * @return $this
     */
    public function setNomeOrigemComercial($nome_origem_comercial)
    {
        
        $this->nome_origem_comercial = $nome_origem_comercial;
        return $this;
    }
    
    /**
     * Gets cpf
     * @return string
     */
    public function getCpf()
    {
        return $this->cpf;
    }
  
    /**
     * Sets cpf
     * @param string $cpf Apresenta o CPF do Portador do Cart\u00E3o.
     * @return $this
     */
    public function setCpf($cpf)
    {
        
        $this->cpf = $cpf;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
