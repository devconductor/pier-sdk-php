<?php
/**
 * NotificacaoApi
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2;

use \br.com.conductor.pier.api.v2.invoker\Configuration;
use \br.com.conductor.pier.api.v2.invoker\ApiClient;
use \br.com.conductor.pier.api.v2.invoker\ApiException;
use \br.com.conductor.pier.api.v2.invoker\ObjectSerializer;

/**
 * NotificacaoApi Class Doc Comment
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NotificacaoApi
{

    /**
     * API Client
     * @var \br.com.conductor.pier.api.v2.invoker\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://localhost/');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \br.com.conductor.pier.api.v2.invoker\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient $apiClient set the API client
     * @return NotificacaoApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * alterarConfiguracaoUsingPUT
     *
     * Altera configura\u00E7\u00F5es de E-mail
     *
     * @param int $id C\u00F3digo de Identifica\u00E7\u00E3o da configura\u00E7\u00E3o de e-mail. (required)
     * @param \br.com.conductor.pier.api.v2.model\ConfiguracaoEmailPersist $persist persist (required)
     * @return \br.com.conductor.pier.api.v2.model\ConfiguracaoEmailResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarConfiguracaoUsingPUT($id, $persist)
    {
        list($response, $statusCode, $httpHeader) = $this->alterarConfiguracaoUsingPUTWithHttpInfo ($id, $persist);
        return $response; 
    }


    /**
     * alterarConfiguracaoUsingPUTWithHttpInfo
     *
     * Altera configura\u00E7\u00F5es de E-mail
     *
     * @param int $id C\u00F3digo de Identifica\u00E7\u00E3o da configura\u00E7\u00E3o de e-mail. (required)
     * @param \br.com.conductor.pier.api.v2.model\ConfiguracaoEmailPersist $persist persist (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\ConfiguracaoEmailResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarConfiguracaoUsingPUTWithHttpInfo($id, $persist)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling alterarConfiguracaoUsingPUT');
        }
        // verify the required parameter 'persist' is set
        if ($persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $persist when calling alterarConfiguracaoUsingPUT');
        }
  
        // parse inputs
        $resourcePath = "/api/configuracoes-email/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($persist)) {
            $_tempBody = $persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\ConfiguracaoEmailResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\ConfiguracaoEmailResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\ConfiguracaoEmailResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * alterarTemplateNotificacaoUsingPUT
     *
     * Alterar template de notifica\u00E7\u00E3o
     *
     * @param int $id C\u00F3digo de Identifica\u00E7\u00E3o do layout de e-mail. (required)
     * @param string $conteudo Template HTML (required)
     * @param int $id_configuracao_email C\u00F3digo de identifica\u00E7\u00E3o da configra\u00E7\u00E3o de EMAIL. (optional)
     * @param string $tipo_layout Tipo do layout. (optional)
     * @param string $tipo_notificacao Tipo da notifica\u00E7\u00E3o. (optional)
     * @param string $remetente Remetente (optional)
     * @param string $assunto Assunto da Notificaca\u00E7\u00E3o. (optional)
     * @param bool $template_padrao Template Padr\u00E3o. (optional)
     * @return \br.com.conductor.pier.api.v2.model\TemplateNotificacaoDetalheResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarTemplateNotificacaoUsingPUT($id, $conteudo, $id_configuracao_email = null, $tipo_layout = null, $tipo_notificacao = null, $remetente = null, $assunto = null, $template_padrao = null)
    {
        list($response, $statusCode, $httpHeader) = $this->alterarTemplateNotificacaoUsingPUTWithHttpInfo ($id, $conteudo, $id_configuracao_email, $tipo_layout, $tipo_notificacao, $remetente, $assunto, $template_padrao);
        return $response; 
    }


    /**
     * alterarTemplateNotificacaoUsingPUTWithHttpInfo
     *
     * Alterar template de notifica\u00E7\u00E3o
     *
     * @param int $id C\u00F3digo de Identifica\u00E7\u00E3o do layout de e-mail. (required)
     * @param string $conteudo Template HTML (required)
     * @param int $id_configuracao_email C\u00F3digo de identifica\u00E7\u00E3o da configra\u00E7\u00E3o de EMAIL. (optional)
     * @param string $tipo_layout Tipo do layout. (optional)
     * @param string $tipo_notificacao Tipo da notifica\u00E7\u00E3o. (optional)
     * @param string $remetente Remetente (optional)
     * @param string $assunto Assunto da Notificaca\u00E7\u00E3o. (optional)
     * @param bool $template_padrao Template Padr\u00E3o. (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\TemplateNotificacaoDetalheResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarTemplateNotificacaoUsingPUTWithHttpInfo($id, $conteudo, $id_configuracao_email = null, $tipo_layout = null, $tipo_notificacao = null, $remetente = null, $assunto = null, $template_padrao = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling alterarTemplateNotificacaoUsingPUT');
        }
        // verify the required parameter 'conteudo' is set
        if ($conteudo === null) {
            throw new \InvalidArgumentException('Missing the required parameter $conteudo when calling alterarTemplateNotificacaoUsingPUT');
        }
  
        // parse inputs
        $resourcePath = "/api/templates-notificacoes/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('text/plain'));
  
        // query params
        
        if ($id_configuracao_email !== null) {
            $queryParams['idConfiguracaoEmail'] = $this->apiClient->getSerializer()->toQueryValue($id_configuracao_email);
        }// query params
        
        if ($tipo_layout !== null) {
            $queryParams['tipoLayout'] = $this->apiClient->getSerializer()->toQueryValue($tipo_layout);
        }// query params
        
        if ($tipo_notificacao !== null) {
            $queryParams['tipoNotificacao'] = $this->apiClient->getSerializer()->toQueryValue($tipo_notificacao);
        }// query params
        
        if ($remetente !== null) {
            $queryParams['remetente'] = $this->apiClient->getSerializer()->toQueryValue($remetente);
        }// query params
        
        if ($assunto !== null) {
            $queryParams['assunto'] = $this->apiClient->getSerializer()->toQueryValue($assunto);
        }// query params
        
        if ($template_padrao !== null) {
            $queryParams['templatePadrao'] = $this->apiClient->getSerializer()->toQueryValue($template_padrao);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($conteudo)) {
            $_tempBody = $conteudo;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\TemplateNotificacaoDetalheResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\TemplateNotificacaoDetalheResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\TemplateNotificacaoDetalheResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * atualizarSMSUsingPOST
     *
     * Atualizar SMS
     *
     * @param string $nsu Seu n\u00FAmero (optional)
     * @param string $status Status (optional)
     * @param string $data Data (optional)
     * @param string $texto_status TextoStatus (optional)
     * @param string $operadora Operadora (optional)
     * @return \br.com.conductor.pier.api.v2.model\NotificacaoSMSResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function atualizarSMSUsingPOST($nsu = null, $status = null, $data = null, $texto_status = null, $operadora = null)
    {
        list($response, $statusCode, $httpHeader) = $this->atualizarSMSUsingPOSTWithHttpInfo ($nsu, $status, $data, $texto_status, $operadora);
        return $response; 
    }


    /**
     * atualizarSMSUsingPOSTWithHttpInfo
     *
     * Atualizar SMS
     *
     * @param string $nsu Seu n\u00FAmero (optional)
     * @param string $status Status (optional)
     * @param string $data Data (optional)
     * @param string $texto_status TextoStatus (optional)
     * @param string $operadora Operadora (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\NotificacaoSMSResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function atualizarSMSUsingPOSTWithHttpInfo($nsu = null, $status = null, $data = null, $texto_status = null, $operadora = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/notificacoes/sms/atualizar-status";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($nsu !== null) {
            $queryParams['nsu'] = $this->apiClient->getSerializer()->toQueryValue($nsu);
        }// query params
        
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }// query params
        
        if ($data !== null) {
            $queryParams['data'] = $this->apiClient->getSerializer()->toQueryValue($data);
        }// query params
        
        if ($texto_status !== null) {
            $queryParams['texto_status'] = $this->apiClient->getSerializer()->toQueryValue($texto_status);
        }// query params
        
        if ($operadora !== null) {
            $queryParams['operadora'] = $this->apiClient->getSerializer()->toQueryValue($operadora);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\NotificacaoSMSResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\NotificacaoSMSResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\NotificacaoSMSResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarConfiguracaoUsingGET
     *
     * Consulta configura\u00E7\u00E3o de E-mail
     *
     * @param int $id C\u00F3digo de Identifica\u00E7\u00E3o da configura\u00E7\u00E3o de e-mail. (required)
     * @return \br.com.conductor.pier.api.v2.model\ConfiguracaoEmailResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarConfiguracaoUsingGET($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarConfiguracaoUsingGETWithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarConfiguracaoUsingGETWithHttpInfo
     *
     * Consulta configura\u00E7\u00E3o de E-mail
     *
     * @param int $id C\u00F3digo de Identifica\u00E7\u00E3o da configura\u00E7\u00E3o de e-mail. (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\ConfiguracaoEmailResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarConfiguracaoUsingGETWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarConfiguracaoUsingGET');
        }
  
        // parse inputs
        $resourcePath = "/api/configuracoes-email/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\ConfiguracaoEmailResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\ConfiguracaoEmailResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\ConfiguracaoEmailResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarPorEmailUsingGET
     *
     * Consulta c\u00F3digo de seguran\u00E7a E-mail
     *
     * @param int $id C\u00F3digo de Identifica\u00E7\u00E3o da configura\u00E7\u00E3o de e-mail. (required)
     * @return \br.com.conductor.pier.api.v2.model\CodigoSegurancaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarPorEmailUsingGET($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarPorEmailUsingGETWithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarPorEmailUsingGETWithHttpInfo
     *
     * Consulta c\u00F3digo de seguran\u00E7a E-mail
     *
     * @param int $id C\u00F3digo de Identifica\u00E7\u00E3o da configura\u00E7\u00E3o de e-mail. (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\CodigoSegurancaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarPorEmailUsingGETWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarPorEmailUsingGET');
        }
  
        // parse inputs
        $resourcePath = "/api/codigos-seguranca-email/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\CodigoSegurancaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\CodigoSegurancaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\CodigoSegurancaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarPorSMSUsingGET
     *
     * Consulta c\u00F3digo de seguran\u00E7a SMS
     *
     * @param int $id C\u00F3digo de Identifica\u00E7\u00E3o da configura\u00E7\u00E3o de e-mail. (required)
     * @return \br.com.conductor.pier.api.v2.model\CodigoSegurancaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarPorSMSUsingGET($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarPorSMSUsingGETWithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarPorSMSUsingGETWithHttpInfo
     *
     * Consulta c\u00F3digo de seguran\u00E7a SMS
     *
     * @param int $id C\u00F3digo de Identifica\u00E7\u00E3o da configura\u00E7\u00E3o de e-mail. (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\CodigoSegurancaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarPorSMSUsingGETWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarPorSMSUsingGET');
        }
  
        // parse inputs
        $resourcePath = "/api/codigos-seguranca-sms/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\CodigoSegurancaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\CodigoSegurancaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\CodigoSegurancaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarTemplateNotificacaoUsingGET
     *
     * Consulta template de notifica\u00E7\u00E3o
     *
     * @param int $id C\u00F3digo de Identifica\u00E7\u00E3o do layout de e-mail. (required)
     * @return \br.com.conductor.pier.api.v2.model\TemplateNotificacaoDetalheResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarTemplateNotificacaoUsingGET($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarTemplateNotificacaoUsingGETWithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarTemplateNotificacaoUsingGETWithHttpInfo
     *
     * Consulta template de notifica\u00E7\u00E3o
     *
     * @param int $id C\u00F3digo de Identifica\u00E7\u00E3o do layout de e-mail. (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\TemplateNotificacaoDetalheResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarTemplateNotificacaoUsingGETWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarTemplateNotificacaoUsingGET');
        }
  
        // parse inputs
        $resourcePath = "/api/templates-notificacoes/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\TemplateNotificacaoDetalheResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\TemplateNotificacaoDetalheResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\TemplateNotificacaoDetalheResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * gerarTokenEMAILUsingPOST
     *
     * Gerar c\u00F3digo de seguran\u00E7a e enviar por e-mail
     *
     * @param string $email email (required)
     * @return string
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function gerarTokenEMAILUsingPOST($email)
    {
        list($response, $statusCode, $httpHeader) = $this->gerarTokenEMAILUsingPOSTWithHttpInfo ($email);
        return $response; 
    }


    /**
     * gerarTokenEMAILUsingPOSTWithHttpInfo
     *
     * Gerar c\u00F3digo de seguran\u00E7a e enviar por e-mail
     *
     * @param string $email email (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function gerarTokenEMAILUsingPOSTWithHttpInfo($email)
    {
        
        // verify the required parameter 'email' is set
        if ($email === null) {
            throw new \InvalidArgumentException('Missing the required parameter $email when calling gerarTokenEMAILUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/notificacoes-email/gerar-codigo-seguranca";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($email)) {
            $_tempBody = $email;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'string'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * gerarTokenSMSUsingPOST
     *
     * Gerar c\u00F3digo de seguran\u00E7a e enviar por sms
     *
     * @param \br.com.conductor.pier.api.v2.model\CodigoSegurancaSMSPersist $persist persist (required)
     * @return string
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function gerarTokenSMSUsingPOST($persist)
    {
        list($response, $statusCode, $httpHeader) = $this->gerarTokenSMSUsingPOSTWithHttpInfo ($persist);
        return $response; 
    }


    /**
     * gerarTokenSMSUsingPOSTWithHttpInfo
     *
     * Gerar c\u00F3digo de seguran\u00E7a e enviar por sms
     *
     * @param \br.com.conductor.pier.api.v2.model\CodigoSegurancaSMSPersist $persist persist (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function gerarTokenSMSUsingPOSTWithHttpInfo($persist)
    {
        
        // verify the required parameter 'persist' is set
        if ($persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $persist when calling gerarTokenSMSUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/notificacoes-sms/gerar-codigo-seguranca";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($persist)) {
            $_tempBody = $persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'string'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarConfiguracaoUsingGET
     *
     * Lista configura\u00E7\u00F5es de E-mails
     *
     * @param string[] $sort Tipo de ordena\u00E7\u00E3o dos registros. (optional)
     * @param int $page P\u00E1gina solicitada (Default = 0) (optional)
     * @param int $limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50) (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageConfiguracaoEmailResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarConfiguracaoUsingGET($sort = null, $page = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarConfiguracaoUsingGETWithHttpInfo ($sort, $page, $limit);
        return $response; 
    }


    /**
     * listarConfiguracaoUsingGETWithHttpInfo
     *
     * Lista configura\u00E7\u00F5es de E-mails
     *
     * @param string[] $sort Tipo de ordena\u00E7\u00E3o dos registros. (optional)
     * @param int $page P\u00E1gina solicitada (Default = 0) (optional)
     * @param int $limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50) (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageConfiguracaoEmailResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarConfiguracaoUsingGETWithHttpInfo($sort = null, $page = null, $limit = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/configuracoes-email";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageConfiguracaoEmailResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageConfiguracaoEmailResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageConfiguracaoEmailResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarPorEmailUsingGET
     *
     * Lista os c\u00F3digos de seguran\u00E7a E-Mail
     *
     * @param string[] $sort Tipo de ordena\u00E7\u00E3o dos registros. (optional)
     * @param int $page P\u00E1gina solicitada (Default = 0) (optional)
     * @param int $limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50) (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageCodigoSegurancaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarPorEmailUsingGET($sort = null, $page = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarPorEmailUsingGETWithHttpInfo ($sort, $page, $limit);
        return $response; 
    }


    /**
     * listarPorEmailUsingGETWithHttpInfo
     *
     * Lista os c\u00F3digos de seguran\u00E7a E-Mail
     *
     * @param string[] $sort Tipo de ordena\u00E7\u00E3o dos registros. (optional)
     * @param int $page P\u00E1gina solicitada (Default = 0) (optional)
     * @param int $limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50) (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageCodigoSegurancaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarPorEmailUsingGETWithHttpInfo($sort = null, $page = null, $limit = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/codigos-seguranca-email";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageCodigoSegurancaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageCodigoSegurancaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageCodigoSegurancaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarPorSMSUsingGET
     *
     * Lista os c\u00F3digos de seguran\u00E7a SMS
     *
     * @param string[] $sort Tipo de ordena\u00E7\u00E3o dos registros. (optional)
     * @param int $page P\u00E1gina solicitada (Default = 0) (optional)
     * @param int $limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50) (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageCodigoSegurancaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarPorSMSUsingGET($sort = null, $page = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarPorSMSUsingGETWithHttpInfo ($sort, $page, $limit);
        return $response; 
    }


    /**
     * listarPorSMSUsingGETWithHttpInfo
     *
     * Lista os c\u00F3digos de seguran\u00E7a SMS
     *
     * @param string[] $sort Tipo de ordena\u00E7\u00E3o dos registros. (optional)
     * @param int $page P\u00E1gina solicitada (Default = 0) (optional)
     * @param int $limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50) (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageCodigoSegurancaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarPorSMSUsingGETWithHttpInfo($sort = null, $page = null, $limit = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/codigos-seguranca-sms";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageCodigoSegurancaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageCodigoSegurancaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageCodigoSegurancaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarPushUsingGET
     *
     * Listar Push
     *
     * @param string[] $sort Tipo de ordena\u00E7\u00E3o dos registros. (optional)
     * @param int $page P\u00E1gina solicitada (Default = 0) (optional)
     * @param int $limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50) (optional)
     * @param string $data_envio Apresenta a data e em que o registro foi enviado para o dispositivo. (optional)
     * @param string $tipo_evento Nome do tipoEvento da notifica\u00E7\u00E3o (optional)
     * @param string $status Status de envio da notifica\u00E7\u00E3o (optional)
     * @param string $plataforma Plataforma de Push notifications. (optional)
     * @param string $protocolo N\u00FAmero do protocolo de envio de notifica\u00E7\u00F5es (optional)
     * @return \br.com.conductor.pier.api.v2.model\PagePushResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarPushUsingGET($sort = null, $page = null, $limit = null, $data_envio = null, $tipo_evento = null, $status = null, $plataforma = null, $protocolo = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarPushUsingGETWithHttpInfo ($sort, $page, $limit, $data_envio, $tipo_evento, $status, $plataforma, $protocolo);
        return $response; 
    }


    /**
     * listarPushUsingGETWithHttpInfo
     *
     * Listar Push
     *
     * @param string[] $sort Tipo de ordena\u00E7\u00E3o dos registros. (optional)
     * @param int $page P\u00E1gina solicitada (Default = 0) (optional)
     * @param int $limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50) (optional)
     * @param string $data_envio Apresenta a data e em que o registro foi enviado para o dispositivo. (optional)
     * @param string $tipo_evento Nome do tipoEvento da notifica\u00E7\u00E3o (optional)
     * @param string $status Status de envio da notifica\u00E7\u00E3o (optional)
     * @param string $plataforma Plataforma de Push notifications. (optional)
     * @param string $protocolo N\u00FAmero do protocolo de envio de notifica\u00E7\u00F5es (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PagePushResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarPushUsingGETWithHttpInfo($sort = null, $page = null, $limit = null, $data_envio = null, $tipo_evento = null, $status = null, $plataforma = null, $protocolo = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/notificacoes/push";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($data_envio !== null) {
            $queryParams['dataEnvio'] = $this->apiClient->getSerializer()->toQueryValue($data_envio);
        }// query params
        
        if ($tipo_evento !== null) {
            $queryParams['tipoEvento'] = $this->apiClient->getSerializer()->toQueryValue($tipo_evento);
        }// query params
        
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }// query params
        
        if ($plataforma !== null) {
            $queryParams['plataforma'] = $this->apiClient->getSerializer()->toQueryValue($plataforma);
        }// query params
        
        if ($protocolo !== null) {
            $queryParams['protocolo'] = $this->apiClient->getSerializer()->toQueryValue($protocolo);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PagePushResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PagePushResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PagePushResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarSMSUsingGET
     *
     * Listar SMS
     *
     * @param string[] $sort Tipo de ordena\u00E7\u00E3o dos registros. (optional)
     * @param int $page P\u00E1gina solicitada (Default = 0) (optional)
     * @param int $limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50) (optional)
     * @param string $data_inclusao Apresenta a data e em que o registro foi inclu\u00EDdo na base para ser enviado (optional)
     * @param string $tipo_evento Nome do tipoEvento da notifica\u00E7\u00E3o (optional)
     * @param string $status Status de envio da notifica\u00E7\u00E3o (optional)
     * @param string $operadora Nome da operadora a qual a notifica\u00E7\u00E3o foi enviada. (optional)
     * @param string $protocolo N\u00FAmero do protocolo de envio de notifica\u00E7\u00F5es (optional)
     * @param int $nsu Apresenta o nsu da notifica\u00E7\u00E3o (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageSMSResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarSMSUsingGET($sort = null, $page = null, $limit = null, $data_inclusao = null, $tipo_evento = null, $status = null, $operadora = null, $protocolo = null, $nsu = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarSMSUsingGETWithHttpInfo ($sort, $page, $limit, $data_inclusao, $tipo_evento, $status, $operadora, $protocolo, $nsu);
        return $response; 
    }


    /**
     * listarSMSUsingGETWithHttpInfo
     *
     * Listar SMS
     *
     * @param string[] $sort Tipo de ordena\u00E7\u00E3o dos registros. (optional)
     * @param int $page P\u00E1gina solicitada (Default = 0) (optional)
     * @param int $limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50) (optional)
     * @param string $data_inclusao Apresenta a data e em que o registro foi inclu\u00EDdo na base para ser enviado (optional)
     * @param string $tipo_evento Nome do tipoEvento da notifica\u00E7\u00E3o (optional)
     * @param string $status Status de envio da notifica\u00E7\u00E3o (optional)
     * @param string $operadora Nome da operadora a qual a notifica\u00E7\u00E3o foi enviada. (optional)
     * @param string $protocolo N\u00FAmero do protocolo de envio de notifica\u00E7\u00F5es (optional)
     * @param int $nsu Apresenta o nsu da notifica\u00E7\u00E3o (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageSMSResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarSMSUsingGETWithHttpInfo($sort = null, $page = null, $limit = null, $data_inclusao = null, $tipo_evento = null, $status = null, $operadora = null, $protocolo = null, $nsu = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/notificacoes/sms";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($data_inclusao !== null) {
            $queryParams['dataInclusao'] = $this->apiClient->getSerializer()->toQueryValue($data_inclusao);
        }// query params
        
        if ($tipo_evento !== null) {
            $queryParams['tipoEvento'] = $this->apiClient->getSerializer()->toQueryValue($tipo_evento);
        }// query params
        
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }// query params
        
        if ($operadora !== null) {
            $queryParams['operadora'] = $this->apiClient->getSerializer()->toQueryValue($operadora);
        }// query params
        
        if ($protocolo !== null) {
            $queryParams['protocolo'] = $this->apiClient->getSerializer()->toQueryValue($protocolo);
        }// query params
        
        if ($nsu !== null) {
            $queryParams['nsu'] = $this->apiClient->getSerializer()->toQueryValue($nsu);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageSMSResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageSMSResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageSMSResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarTemplateNotificacaoUsingGET
     *
     * Lista templates de notifica\u00E7\u00F5es
     *
     * @param string[] $sort Tipo de ordena\u00E7\u00E3o dos registros. (optional)
     * @param int $page P\u00E1gina solicitada (Default = 0) (optional)
     * @param int $limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50) (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageTemplateNotificacaoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarTemplateNotificacaoUsingGET($sort = null, $page = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarTemplateNotificacaoUsingGETWithHttpInfo ($sort, $page, $limit);
        return $response; 
    }


    /**
     * listarTemplateNotificacaoUsingGETWithHttpInfo
     *
     * Lista templates de notifica\u00E7\u00F5es
     *
     * @param string[] $sort Tipo de ordena\u00E7\u00E3o dos registros. (optional)
     * @param int $page P\u00E1gina solicitada (Default = 0) (optional)
     * @param int $limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50) (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageTemplateNotificacaoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarTemplateNotificacaoUsingGETWithHttpInfo($sort = null, $page = null, $limit = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/templates-notificacoes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageTemplateNotificacaoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageTemplateNotificacaoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageTemplateNotificacaoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarTiposLayoutsUsingGET
     *
     * Lista os tipos templates de notifica\u00E7\u00E3o
     *
     * @return object[]
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarTiposLayoutsUsingGET()
    {
        list($response, $statusCode, $httpHeader) = $this->listarTiposLayoutsUsingGETWithHttpInfo ();
        return $response; 
    }


    /**
     * listarTiposLayoutsUsingGETWithHttpInfo
     *
     * Lista os tipos templates de notifica\u00E7\u00E3o
     *
     * @return Array of object[], HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarTiposLayoutsUsingGETWithHttpInfo()
    {
        
  
        // parse inputs
        $resourcePath = "/api/tipos-layouts";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, 'object[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, 'object[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), 'object[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * notificacaoEmailUsingPOST
     *
     * Enviar notifica\u00E7\u00E3o por email
     *
     * @param \br.com.conductor.pier.api.v2.model\NotificacaoEmailRequest $request request (required)
     * @return object
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function notificacaoEmailUsingPOST($request)
    {
        list($response, $statusCode, $httpHeader) = $this->notificacaoEmailUsingPOSTWithHttpInfo ($request);
        return $response; 
    }


    /**
     * notificacaoEmailUsingPOSTWithHttpInfo
     *
     * Enviar notifica\u00E7\u00E3o por email
     *
     * @param \br.com.conductor.pier.api.v2.model\NotificacaoEmailRequest $request request (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function notificacaoEmailUsingPOSTWithHttpInfo($request)
    {
        
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling notificacaoEmailUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/notificacoes-email";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'object'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * reenviarTokenSMSUsingPOST
     *
     * Reenviar c\u00F3digo de seguran\u00E7a por sms
     *
     * @param \br.com.conductor.pier.api.v2.model\CodigoSegurancaSMSPersist $persist persist (required)
     * @return string
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function reenviarTokenSMSUsingPOST($persist)
    {
        list($response, $statusCode, $httpHeader) = $this->reenviarTokenSMSUsingPOSTWithHttpInfo ($persist);
        return $response; 
    }


    /**
     * reenviarTokenSMSUsingPOSTWithHttpInfo
     *
     * Reenviar c\u00F3digo de seguran\u00E7a por sms
     *
     * @param \br.com.conductor.pier.api.v2.model\CodigoSegurancaSMSPersist $persist persist (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function reenviarTokenSMSUsingPOSTWithHttpInfo($persist)
    {
        
        // verify the required parameter 'persist' is set
        if ($persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $persist when calling reenviarTokenSMSUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/notificacoes-sms/reenviar-codigo-seguranca";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($persist)) {
            $_tempBody = $persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'string'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * responderSMSGetUsingGET
     *
     * Responder SMS
     *
     * @param string $nsu Seu n\u00FAmero (optional)
     * @param string $data Data (optional)
     * @param string $resposta TextoStatus (optional)
     * @return \br.com.conductor.pier.api.v2.model\NotificacaoSMSResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function responderSMSGetUsingGET($nsu = null, $data = null, $resposta = null)
    {
        list($response, $statusCode, $httpHeader) = $this->responderSMSGetUsingGETWithHttpInfo ($nsu, $data, $resposta);
        return $response; 
    }


    /**
     * responderSMSGetUsingGETWithHttpInfo
     *
     * Responder SMS
     *
     * @param string $nsu Seu n\u00FAmero (optional)
     * @param string $data Data (optional)
     * @param string $resposta TextoStatus (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\NotificacaoSMSResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function responderSMSGetUsingGETWithHttpInfo($nsu = null, $data = null, $resposta = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/notificacoes/sms/responder";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($nsu !== null) {
            $queryParams['nsu'] = $this->apiClient->getSerializer()->toQueryValue($nsu);
        }// query params
        
        if ($data !== null) {
            $queryParams['data'] = $this->apiClient->getSerializer()->toQueryValue($data);
        }// query params
        
        if ($resposta !== null) {
            $queryParams['resposta'] = $this->apiClient->getSerializer()->toQueryValue($resposta);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\NotificacaoSMSResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\NotificacaoSMSResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\NotificacaoSMSResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * salvarConfiguracaoUsingPOST
     *
     * Salva configura\u00E7\u00F5es de E-mail
     *
     * @param \br.com.conductor.pier.api.v2.model\ConfiguracaoEmailPersist $persist persist (required)
     * @return \br.com.conductor.pier.api.v2.model\ConfiguracaoEmailResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarConfiguracaoUsingPOST($persist)
    {
        list($response, $statusCode, $httpHeader) = $this->salvarConfiguracaoUsingPOSTWithHttpInfo ($persist);
        return $response; 
    }


    /**
     * salvarConfiguracaoUsingPOSTWithHttpInfo
     *
     * Salva configura\u00E7\u00F5es de E-mail
     *
     * @param \br.com.conductor.pier.api.v2.model\ConfiguracaoEmailPersist $persist persist (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\ConfiguracaoEmailResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarConfiguracaoUsingPOSTWithHttpInfo($persist)
    {
        
        // verify the required parameter 'persist' is set
        if ($persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $persist when calling salvarConfiguracaoUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/configuracoes-email";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($persist)) {
            $_tempBody = $persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\ConfiguracaoEmailResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\ConfiguracaoEmailResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\ConfiguracaoEmailResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * salvarPushFCMUsingPOST
     *
     * Enviar Push FCM
     *
     * @param \br.com.conductor.pier.api.v2.model\PushFCMEGCM[] $push_persists pushPersists (required)
     * @return \br.com.conductor.pier.api.v2.model\NotificacaoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarPushFCMUsingPOST($push_persists)
    {
        list($response, $statusCode, $httpHeader) = $this->salvarPushFCMUsingPOSTWithHttpInfo ($push_persists);
        return $response; 
    }


    /**
     * salvarPushFCMUsingPOSTWithHttpInfo
     *
     * Enviar Push FCM
     *
     * @param \br.com.conductor.pier.api.v2.model\PushFCMEGCM[] $push_persists pushPersists (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\NotificacaoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarPushFCMUsingPOSTWithHttpInfo($push_persists)
    {
        
        // verify the required parameter 'push_persists' is set
        if ($push_persists === null) {
            throw new \InvalidArgumentException('Missing the required parameter $push_persists when calling salvarPushFCMUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/notificacoes/push/fcm";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($push_persists)) {
            $_tempBody = $push_persists;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\NotificacaoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\NotificacaoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\NotificacaoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * salvarPushGCMUsingPOST
     *
     * Enviar Push GCM
     *
     * @param \br.com.conductor.pier.api.v2.model\PushFCMEGCM[] $push_persists pushPersists (required)
     * @return \br.com.conductor.pier.api.v2.model\NotificacaoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarPushGCMUsingPOST($push_persists)
    {
        list($response, $statusCode, $httpHeader) = $this->salvarPushGCMUsingPOSTWithHttpInfo ($push_persists);
        return $response; 
    }


    /**
     * salvarPushGCMUsingPOSTWithHttpInfo
     *
     * Enviar Push GCM
     *
     * @param \br.com.conductor.pier.api.v2.model\PushFCMEGCM[] $push_persists pushPersists (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\NotificacaoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarPushGCMUsingPOSTWithHttpInfo($push_persists)
    {
        
        // verify the required parameter 'push_persists' is set
        if ($push_persists === null) {
            throw new \InvalidArgumentException('Missing the required parameter $push_persists when calling salvarPushGCMUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/notificacoes/push/gcm";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($push_persists)) {
            $_tempBody = $push_persists;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\NotificacaoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\NotificacaoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\NotificacaoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * salvarPushUsingPOST
     *
     * Enviar Push APNS
     *
     * @param \br.com.conductor.pier.api.v2.model\PushAPNS[] $push_persists pushPersists (required)
     * @return \br.com.conductor.pier.api.v2.model\NotificacaoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarPushUsingPOST($push_persists)
    {
        list($response, $statusCode, $httpHeader) = $this->salvarPushUsingPOSTWithHttpInfo ($push_persists);
        return $response; 
    }


    /**
     * salvarPushUsingPOSTWithHttpInfo
     *
     * Enviar Push APNS
     *
     * @param \br.com.conductor.pier.api.v2.model\PushAPNS[] $push_persists pushPersists (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\NotificacaoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarPushUsingPOSTWithHttpInfo($push_persists)
    {
        
        // verify the required parameter 'push_persists' is set
        if ($push_persists === null) {
            throw new \InvalidArgumentException('Missing the required parameter $push_persists when calling salvarPushUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/notificacoes/push/apns";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($push_persists)) {
            $_tempBody = $push_persists;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\NotificacaoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\NotificacaoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\NotificacaoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * salvarSMSUsingPOST
     *
     * Enviar SMS
     *
     * @param \br.com.conductor.pier.api.v2.model\NotificacaoSMSBody[] $lista_sms listaSMS (required)
     * @return \br.com.conductor.pier.api.v2.model\NotificacaoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarSMSUsingPOST($lista_sms)
    {
        list($response, $statusCode, $httpHeader) = $this->salvarSMSUsingPOSTWithHttpInfo ($lista_sms);
        return $response; 
    }


    /**
     * salvarSMSUsingPOSTWithHttpInfo
     *
     * Enviar SMS
     *
     * @param \br.com.conductor.pier.api.v2.model\NotificacaoSMSBody[] $lista_sms listaSMS (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\NotificacaoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarSMSUsingPOSTWithHttpInfo($lista_sms)
    {
        
        // verify the required parameter 'lista_sms' is set
        if ($lista_sms === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lista_sms when calling salvarSMSUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/notificacoes/sms";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($lista_sms)) {
            $_tempBody = $lista_sms;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\NotificacaoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\NotificacaoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\NotificacaoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * salvarTemplateNotificacaoUsingPOST
     *
     * Salva template de notifica\u00E7\u00E3o
     *
     * @param string $conteudo Template HTML (required)
     * @param int $id_configuracao_email C\u00F3digo de identifica\u00E7\u00E3o da configra\u00E7\u00E3o de EMAIL. (optional)
     * @param string $tipo_layout Tipo do layout. (optional)
     * @param string $tipo_notificacao Tipo da notifica\u00E7\u00E3o. (optional)
     * @param string $remetente Remetente (optional)
     * @param string $assunto Assunto da Notificaca\u00E7\u00E3o. (optional)
     * @param bool $template_padrao Template Padr\u00E3o. (optional)
     * @return \br.com.conductor.pier.api.v2.model\TemplateNotificacaoDetalheResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarTemplateNotificacaoUsingPOST($conteudo, $id_configuracao_email = null, $tipo_layout = null, $tipo_notificacao = null, $remetente = null, $assunto = null, $template_padrao = null)
    {
        list($response, $statusCode, $httpHeader) = $this->salvarTemplateNotificacaoUsingPOSTWithHttpInfo ($conteudo, $id_configuracao_email, $tipo_layout, $tipo_notificacao, $remetente, $assunto, $template_padrao);
        return $response; 
    }


    /**
     * salvarTemplateNotificacaoUsingPOSTWithHttpInfo
     *
     * Salva template de notifica\u00E7\u00E3o
     *
     * @param string $conteudo Template HTML (required)
     * @param int $id_configuracao_email C\u00F3digo de identifica\u00E7\u00E3o da configra\u00E7\u00E3o de EMAIL. (optional)
     * @param string $tipo_layout Tipo do layout. (optional)
     * @param string $tipo_notificacao Tipo da notifica\u00E7\u00E3o. (optional)
     * @param string $remetente Remetente (optional)
     * @param string $assunto Assunto da Notificaca\u00E7\u00E3o. (optional)
     * @param bool $template_padrao Template Padr\u00E3o. (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\TemplateNotificacaoDetalheResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarTemplateNotificacaoUsingPOSTWithHttpInfo($conteudo, $id_configuracao_email = null, $tipo_layout = null, $tipo_notificacao = null, $remetente = null, $assunto = null, $template_padrao = null)
    {
        
        // verify the required parameter 'conteudo' is set
        if ($conteudo === null) {
            throw new \InvalidArgumentException('Missing the required parameter $conteudo when calling salvarTemplateNotificacaoUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/templates-notificacoes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('text/plain'));
  
        // query params
        
        if ($id_configuracao_email !== null) {
            $queryParams['idConfiguracaoEmail'] = $this->apiClient->getSerializer()->toQueryValue($id_configuracao_email);
        }// query params
        
        if ($tipo_layout !== null) {
            $queryParams['tipoLayout'] = $this->apiClient->getSerializer()->toQueryValue($tipo_layout);
        }// query params
        
        if ($tipo_notificacao !== null) {
            $queryParams['tipoNotificacao'] = $this->apiClient->getSerializer()->toQueryValue($tipo_notificacao);
        }// query params
        
        if ($remetente !== null) {
            $queryParams['remetente'] = $this->apiClient->getSerializer()->toQueryValue($remetente);
        }// query params
        
        if ($assunto !== null) {
            $queryParams['assunto'] = $this->apiClient->getSerializer()->toQueryValue($assunto);
        }// query params
        
        if ($template_padrao !== null) {
            $queryParams['templatePadrao'] = $this->apiClient->getSerializer()->toQueryValue($template_padrao);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($conteudo)) {
            $_tempBody = $conteudo;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\TemplateNotificacaoDetalheResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\TemplateNotificacaoDetalheResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\TemplateNotificacaoDetalheResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * validarTokenEMAILUsingPOST
     *
     * Validar c\u00F3digo de seguran\u00E7a enviado por e-mail
     *
     * @param \br.com.conductor.pier.api.v2.model\CodigoSegurancaEMAILPersist $request request (required)
     * @return string
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function validarTokenEMAILUsingPOST($request)
    {
        list($response, $statusCode, $httpHeader) = $this->validarTokenEMAILUsingPOSTWithHttpInfo ($request);
        return $response; 
    }


    /**
     * validarTokenEMAILUsingPOSTWithHttpInfo
     *
     * Validar c\u00F3digo de seguran\u00E7a enviado por e-mail
     *
     * @param \br.com.conductor.pier.api.v2.model\CodigoSegurancaEMAILPersist $request request (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function validarTokenEMAILUsingPOSTWithHttpInfo($request)
    {
        
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling validarTokenEMAILUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/notificacoes-email/validar-codigo-seguranca";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'string'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * validarTokenSMSUsingPOST
     *
     * Validar c\u00F3digo de seguran\u00E7a enviado por sms
     *
     * @param \br.com.conductor.pier.api.v2.model\CodigoSegurancaSMSRequest $request request (required)
     * @return string
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function validarTokenSMSUsingPOST($request)
    {
        list($response, $statusCode, $httpHeader) = $this->validarTokenSMSUsingPOSTWithHttpInfo ($request);
        return $response; 
    }


    /**
     * validarTokenSMSUsingPOSTWithHttpInfo
     *
     * Validar c\u00F3digo de seguran\u00E7a enviado por sms
     *
     * @param \br.com.conductor.pier.api.v2.model\CodigoSegurancaSMSRequest $request request (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function validarTokenSMSUsingPOSTWithHttpInfo($request)
    {
        
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling validarTokenSMSUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/notificacoes-sms/validar-codigo-seguranca";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'string'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
