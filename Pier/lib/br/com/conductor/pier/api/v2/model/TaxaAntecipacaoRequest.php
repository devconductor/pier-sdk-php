<?php
/**
 * TaxaAntecipacaoRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2.model;

use \ArrayAccess;
/**
 * TaxaAntecipacaoRequest Class Doc Comment
 *
 * @category    Class
 * @description Objeto de Requisi\u00C3\u00A7\u00C3\u00A3o de Taxa de Antecipa\u00C3\u00A7\u00C3\u00A3o
 * @package     br.com.conductor.pier.api.v2.invoker
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TaxaAntecipacaoRequest implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'tipo_transacao' => 'string',
        'valor_taxa' => 'Number'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'tipo_transacao' => 'tipoTransacao',
        'valor_taxa' => 'valorTaxa'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'tipo_transacao' => 'setTipoTransacao',
        'valor_taxa' => 'setValorTaxa'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'tipo_transacao' => 'getTipoTransacao',
        'valor_taxa' => 'getValorTaxa'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $tipo_transacao C\u00C3\u00B3digo que identifica se um par\u00C3\u00A2metro refere-se a uma transa\u00C3\u00A7\u00C3\u00A3o On-Us ou Off-Us.
      * @var string
      */
    protected $tipo_transacao;
    
    /**
      * $valor_taxa Valor da Taxa de Antecipa\u00C3\u00A7\u00C3\u00A3o.
      * @var Number
      */
    protected $valor_taxa;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->tipo_transacao = $data["tipo_transacao"];
            $this->valor_taxa = $data["valor_taxa"];
        }
    }
    
    /**
     * Gets tipo_transacao
     * @return string
     */
    public function getTipoTransacao()
    {
        return $this->tipo_transacao;
    }
  
    /**
     * Sets tipo_transacao
     * @param string $tipo_transacao C\u00C3\u00B3digo que identifica se um par\u00C3\u00A2metro refere-se a uma transa\u00C3\u00A7\u00C3\u00A3o On-Us ou Off-Us.
     * @return $this
     */
    public function setTipoTransacao($tipo_transacao)
    {
        $allowed_values = array("ON_US", "OFF_US");
        if (!in_array($tipo_transacao, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'tipo_transacao', must be one of 'ON_US', 'OFF_US'");
        }
        $this->tipo_transacao = $tipo_transacao;
        return $this;
    }
    
    /**
     * Gets valor_taxa
     * @return Number
     */
    public function getValorTaxa()
    {
        return $this->valor_taxa;
    }
  
    /**
     * Sets valor_taxa
     * @param Number $valor_taxa Valor da Taxa de Antecipa\u00C3\u00A7\u00C3\u00A3o.
     * @return $this
     */
    public function setValorTaxa($valor_taxa)
    {
        
        $this->valor_taxa = $valor_taxa;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
