<?php
/**
 * GlobaltagfaturamentoApi
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2;

use \br.com.conductor.pier.api.v2.invoker\Configuration;
use \br.com.conductor.pier.api.v2.invoker\ApiClient;
use \br.com.conductor.pier.api.v2.invoker\ApiException;
use \br.com.conductor.pier.api.v2.invoker\ObjectSerializer;

/**
 * GlobaltagfaturamentoApi Class Doc Comment
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GlobaltagfaturamentoApi
{

    /**
     * API Client
     * @var \br.com.conductor.pier.api.v2.invoker\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://localhost/');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \br.com.conductor.pier.api.v2.invoker\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient $apiClient set the API client
     * @return GlobaltagfaturamentoApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * alterarTipoFaturamentoUsingPUT
     *
     * {{{faturamento_resource_alterar_tipo_faturamento}}}
     *
     * @param int $id {{{faturamento_resource_alterar_tipo_faturamento_param_id_tipo_faturamento}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\TipoFaturamentoPersistValue_ $tipo_faturamento_persist tipoFaturamentoPersist (required)
     * @return \br.com.conductor.pier.api.v2.model\TipoFaturamentoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarTipoFaturamentoUsingPUT($id, $tipo_faturamento_persist)
    {
        list($response, $statusCode, $httpHeader) = $this->alterarTipoFaturamentoUsingPUTWithHttpInfo ($id, $tipo_faturamento_persist);
        return $response; 
    }


    /**
     * alterarTipoFaturamentoUsingPUTWithHttpInfo
     *
     * {{{faturamento_resource_alterar_tipo_faturamento}}}
     *
     * @param int $id {{{faturamento_resource_alterar_tipo_faturamento_param_id_tipo_faturamento}}} (required)
     * @param \br.com.conductor.pier.api.v2.model\TipoFaturamentoPersistValue_ $tipo_faturamento_persist tipoFaturamentoPersist (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\TipoFaturamentoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarTipoFaturamentoUsingPUTWithHttpInfo($id, $tipo_faturamento_persist)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling alterarTipoFaturamentoUsingPUT');
        }
        // verify the required parameter 'tipo_faturamento_persist' is set
        if ($tipo_faturamento_persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tipo_faturamento_persist when calling alterarTipoFaturamentoUsingPUT');
        }
  
        // parse inputs
        $resourcePath = "/api/tipos-faturamento/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($tipo_faturamento_persist)) {
            $_tempBody = $tipo_faturamento_persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\TipoFaturamentoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\TipoFaturamentoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\TipoFaturamentoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * cadastrarFaturamentoPorContaUsingPOST
     *
     * {{{faturamento_resource_cadastrar_faturamento_por_conta}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\TipoFaturamentoPorContaPersistValue_ $tipo_faturamento_por_conta_persist tipoFaturamentoPorContaPersist (required)
     * @return \br.com.conductor.pier.api.v2.model\TipoFaturamentoPorContaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function cadastrarFaturamentoPorContaUsingPOST($tipo_faturamento_por_conta_persist)
    {
        list($response, $statusCode, $httpHeader) = $this->cadastrarFaturamentoPorContaUsingPOSTWithHttpInfo ($tipo_faturamento_por_conta_persist);
        return $response; 
    }


    /**
     * cadastrarFaturamentoPorContaUsingPOSTWithHttpInfo
     *
     * {{{faturamento_resource_cadastrar_faturamento_por_conta}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\TipoFaturamentoPorContaPersistValue_ $tipo_faturamento_por_conta_persist tipoFaturamentoPorContaPersist (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\TipoFaturamentoPorContaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function cadastrarFaturamentoPorContaUsingPOSTWithHttpInfo($tipo_faturamento_por_conta_persist)
    {
        
        // verify the required parameter 'tipo_faturamento_por_conta_persist' is set
        if ($tipo_faturamento_por_conta_persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tipo_faturamento_por_conta_persist when calling cadastrarFaturamentoPorContaUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/tipos-faturamento-conta";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($tipo_faturamento_por_conta_persist)) {
            $_tempBody = $tipo_faturamento_por_conta_persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\TipoFaturamentoPorContaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\TipoFaturamentoPorContaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\TipoFaturamentoPorContaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * cadastrarTipoFaturamentoUsingPOST
     *
     * {{{faturamento_resource_cadastrar_tipo_faturamento}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\TipoFaturamentoPersistValue_ $tipo_faturamento_persist tipoFaturamentoPersist (required)
     * @return \br.com.conductor.pier.api.v2.model\TipoFaturamentoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function cadastrarTipoFaturamentoUsingPOST($tipo_faturamento_persist)
    {
        list($response, $statusCode, $httpHeader) = $this->cadastrarTipoFaturamentoUsingPOSTWithHttpInfo ($tipo_faturamento_persist);
        return $response; 
    }


    /**
     * cadastrarTipoFaturamentoUsingPOSTWithHttpInfo
     *
     * {{{faturamento_resource_cadastrar_tipo_faturamento}}}
     *
     * @param \br.com.conductor.pier.api.v2.model\TipoFaturamentoPersistValue_ $tipo_faturamento_persist tipoFaturamentoPersist (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\TipoFaturamentoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function cadastrarTipoFaturamentoUsingPOSTWithHttpInfo($tipo_faturamento_persist)
    {
        
        // verify the required parameter 'tipo_faturamento_persist' is set
        if ($tipo_faturamento_persist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tipo_faturamento_persist when calling cadastrarTipoFaturamentoUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/tipos-faturamento";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($tipo_faturamento_persist)) {
            $_tempBody = $tipo_faturamento_persist;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\TipoFaturamentoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\TipoFaturamentoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\TipoFaturamentoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarTipoFaturamentoUsingGET
     *
     * {{{faturamento_resource_consultar_tipo_faturamento}}}
     *
     * @param int $id {{{faturamento_resource_consultar_tipo_faturamento_param_id_tipo_faturamento}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\TipoFaturamentoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarTipoFaturamentoUsingGET($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarTipoFaturamentoUsingGETWithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarTipoFaturamentoUsingGETWithHttpInfo
     *
     * {{{faturamento_resource_consultar_tipo_faturamento}}}
     *
     * @param int $id {{{faturamento_resource_consultar_tipo_faturamento_param_id_tipo_faturamento}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\TipoFaturamentoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarTipoFaturamentoUsingGETWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarTipoFaturamentoUsingGET');
        }
  
        // parse inputs
        $resourcePath = "/api/tipos-faturamento/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\TipoFaturamentoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\TipoFaturamentoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\TipoFaturamentoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * desativarFaturamentoPorContaUsingPOST
     *
     * {{{faturamento_resource_desativar_faturamento_por_conta}}}
     *
     * @param int $id {{{faturamento_resource_desativar_faturamento_por_conta_param_id}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\TipoFaturamentoPorContaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function desativarFaturamentoPorContaUsingPOST($id)
    {
        list($response, $statusCode, $httpHeader) = $this->desativarFaturamentoPorContaUsingPOSTWithHttpInfo ($id);
        return $response; 
    }


    /**
     * desativarFaturamentoPorContaUsingPOSTWithHttpInfo
     *
     * {{{faturamento_resource_desativar_faturamento_por_conta}}}
     *
     * @param int $id {{{faturamento_resource_desativar_faturamento_por_conta_param_id}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\TipoFaturamentoPorContaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function desativarFaturamentoPorContaUsingPOSTWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling desativarFaturamentoPorContaUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/tipos-faturamento-conta/{id}/desativar";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\TipoFaturamentoPorContaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\TipoFaturamentoPorContaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\TipoFaturamentoPorContaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * desativarTipoFaturamentoUsingPOST
     *
     * {{{faturamento_resource_desativar_tipo_faturamento}}}
     *
     * @param int $id {{{faturamento_resource_desativar_tipo_faturamento_param_id_tipo_faturamento}}} (required)
     * @return \br.com.conductor.pier.api.v2.model\TipoFaturamentoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function desativarTipoFaturamentoUsingPOST($id)
    {
        list($response, $statusCode, $httpHeader) = $this->desativarTipoFaturamentoUsingPOSTWithHttpInfo ($id);
        return $response; 
    }


    /**
     * desativarTipoFaturamentoUsingPOSTWithHttpInfo
     *
     * {{{faturamento_resource_desativar_tipo_faturamento}}}
     *
     * @param int $id {{{faturamento_resource_desativar_tipo_faturamento_param_id_tipo_faturamento}}} (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\TipoFaturamentoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function desativarTipoFaturamentoUsingPOSTWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling desativarTipoFaturamentoUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/api/tipos-faturamento/{id}/desativar";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\TipoFaturamentoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\TipoFaturamentoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\TipoFaturamentoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarFaturamentoPorContaUsingGET
     *
     * {{{faturamento_resource_listar_faturamento_por_conta}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_tipo_faturamento_por_conta {{{tipo_faturamento_por_conta_request_id_tipo_faturamento_por_conta_value}}} (optional)
     * @param bool $ativo {{{tipo_faturamento_por_conta_request_status_value}}} (optional)
     * @param int $id_conta {{{tipo_faturamento_por_conta_request_id_conta_value}}} (optional)
     * @param int $id_tipo_faturamento {{{tipo_faturamento_por_conta_request_id_tipo_faturamento_value}}} (optional)
     * @param string $data_hora_inclusao {{{tipo_faturamento_por_conta_request_data_hora_inclusao_value}}} (optional)
     * @param string $data_hora_cancelamento {{{tipo_faturamento_por_conta_request_data_hora_cancelamento_value}}} (optional)
     * @param string $modificado_por {{{tipo_faturamento_por_conta_request_modificado_por_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageTipoFaturamentoPorContaResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarFaturamentoPorContaUsingGET($sort = null, $page = null, $limit = null, $id_tipo_faturamento_por_conta = null, $ativo = null, $id_conta = null, $id_tipo_faturamento = null, $data_hora_inclusao = null, $data_hora_cancelamento = null, $modificado_por = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarFaturamentoPorContaUsingGETWithHttpInfo ($sort, $page, $limit, $id_tipo_faturamento_por_conta, $ativo, $id_conta, $id_tipo_faturamento, $data_hora_inclusao, $data_hora_cancelamento, $modificado_por);
        return $response; 
    }


    /**
     * listarFaturamentoPorContaUsingGETWithHttpInfo
     *
     * {{{faturamento_resource_listar_faturamento_por_conta}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_tipo_faturamento_por_conta {{{tipo_faturamento_por_conta_request_id_tipo_faturamento_por_conta_value}}} (optional)
     * @param bool $ativo {{{tipo_faturamento_por_conta_request_status_value}}} (optional)
     * @param int $id_conta {{{tipo_faturamento_por_conta_request_id_conta_value}}} (optional)
     * @param int $id_tipo_faturamento {{{tipo_faturamento_por_conta_request_id_tipo_faturamento_value}}} (optional)
     * @param string $data_hora_inclusao {{{tipo_faturamento_por_conta_request_data_hora_inclusao_value}}} (optional)
     * @param string $data_hora_cancelamento {{{tipo_faturamento_por_conta_request_data_hora_cancelamento_value}}} (optional)
     * @param string $modificado_por {{{tipo_faturamento_por_conta_request_modificado_por_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageTipoFaturamentoPorContaResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarFaturamentoPorContaUsingGETWithHttpInfo($sort = null, $page = null, $limit = null, $id_tipo_faturamento_por_conta = null, $ativo = null, $id_conta = null, $id_tipo_faturamento = null, $data_hora_inclusao = null, $data_hora_cancelamento = null, $modificado_por = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/tipos-faturamento-conta";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id_tipo_faturamento_por_conta !== null) {
            $queryParams['idTipoFaturamentoPorConta'] = $this->apiClient->getSerializer()->toQueryValue($id_tipo_faturamento_por_conta);
        }// query params
        
        if ($ativo !== null) {
            $queryParams['ativo'] = $this->apiClient->getSerializer()->toQueryValue($ativo);
        }// query params
        
        if ($id_conta !== null) {
            $queryParams['idConta'] = $this->apiClient->getSerializer()->toQueryValue($id_conta);
        }// query params
        
        if ($id_tipo_faturamento !== null) {
            $queryParams['idTipoFaturamento'] = $this->apiClient->getSerializer()->toQueryValue($id_tipo_faturamento);
        }// query params
        
        if ($data_hora_inclusao !== null) {
            $queryParams['dataHoraInclusao'] = $this->apiClient->getSerializer()->toQueryValue($data_hora_inclusao);
        }// query params
        
        if ($data_hora_cancelamento !== null) {
            $queryParams['dataHoraCancelamento'] = $this->apiClient->getSerializer()->toQueryValue($data_hora_cancelamento);
        }// query params
        
        if ($modificado_por !== null) {
            $queryParams['modificadoPor'] = $this->apiClient->getSerializer()->toQueryValue($modificado_por);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageTipoFaturamentoPorContaResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageTipoFaturamentoPorContaResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageTipoFaturamentoPorContaResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarTipoFaturamentoUsingGET
     *
     * {{{faturamento_resource_listar_tipo_faturamento}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_tipo_faturamento {{{tipo_faturamento_request_id_tipo_faturamento_value}}} (optional)
     * @param string $descricao {{{tipo_faturamento_request_descricao_value}}} (optional)
     * @param bool $flag_apenas_demonstrativo {{{tipo_faturamento_request_flag_apenas_demonstrativo_value}}} (optional)
     * @param int $id_convenio {{{tipo_faturamento_request_id_convenio_value}}} (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageTipoFaturamentoResponse
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarTipoFaturamentoUsingGET($sort = null, $page = null, $limit = null, $id_tipo_faturamento = null, $descricao = null, $flag_apenas_demonstrativo = null, $id_convenio = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarTipoFaturamentoUsingGETWithHttpInfo ($sort, $page, $limit, $id_tipo_faturamento, $descricao, $flag_apenas_demonstrativo, $id_convenio);
        return $response; 
    }


    /**
     * listarTipoFaturamentoUsingGETWithHttpInfo
     *
     * {{{faturamento_resource_listar_tipo_faturamento}}}
     *
     * @param string[] $sort {{{global_menssagem_sort_sort}}} (optional)
     * @param int $page {{{global_menssagem_sort_page_value}}} (optional)
     * @param int $limit {{{global_menssagem_sort_limit}}} (optional)
     * @param int $id_tipo_faturamento {{{tipo_faturamento_request_id_tipo_faturamento_value}}} (optional)
     * @param string $descricao {{{tipo_faturamento_request_descricao_value}}} (optional)
     * @param bool $flag_apenas_demonstrativo {{{tipo_faturamento_request_flag_apenas_demonstrativo_value}}} (optional)
     * @param int $id_convenio {{{tipo_faturamento_request_id_convenio_value}}} (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageTipoFaturamentoResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarTipoFaturamentoUsingGETWithHttpInfo($sort = null, $page = null, $limit = null, $id_tipo_faturamento = null, $descricao = null, $flag_apenas_demonstrativo = null, $id_convenio = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/tipos-faturamento";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($sort)) {
            $sort = $this->apiClient->getSerializer()->serializeCollection($sort, 'multi', true);
        }
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id_tipo_faturamento !== null) {
            $queryParams['idTipoFaturamento'] = $this->apiClient->getSerializer()->toQueryValue($id_tipo_faturamento);
        }// query params
        
        if ($descricao !== null) {
            $queryParams['descricao'] = $this->apiClient->getSerializer()->toQueryValue($descricao);
        }// query params
        
        if ($flag_apenas_demonstrativo !== null) {
            $queryParams['flagApenasDemonstrativo'] = $this->apiClient->getSerializer()->toQueryValue($flag_apenas_demonstrativo);
        }// query params
        
        if ($id_convenio !== null) {
            $queryParams['idConvenio'] = $this->apiClient->getSerializer()->toQueryValue($id_convenio);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageTipoFaturamentoResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageTipoFaturamentoResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageTipoFaturamentoResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
