<?php
/**
 * BaseApi
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace br.com.conductor.pier.api.v2;

use \br.com.conductor.pier.api.v2.invoker\Configuration;
use \br.com.conductor.pier.api.v2.invoker\ApiClient;
use \br.com.conductor.pier.api.v2.invoker\ApiException;
use \br.com.conductor.pier.api.v2.invoker\ObjectSerializer;

/**
 * BaseApi Class Doc Comment
 *
 * @category Class
 * @package  br.com.conductor.pier.api.v2.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BaseApi
{

    /**
     * API Client
     * @var \br.com.conductor.pier.api.v2.invoker\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost/');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \br.com.conductor.pier.api.v2.invoker\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \br.com.conductor.pier.api.v2.invoker\ApiClient $apiClient set the API client
     * @return BaseApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * alterarUsingPUT
     *
     * Alterar base
     *
     * @param int $id C\u00C3\u00B3digo identificador da base (required)
     * @param string $servidor IP do servidor (required)
     * @param string $usuario Nome do usu\u00C3\u00A1rio (required)
     * @param string $senha Senha (required)
     * @param string $nome_base Nome da base (required)
     * @param bool $senha_criptografada senha Criptografada (required)
     * @param string $domain Dom\u00C3\u00ADnio da base (required)
     * @param string $nome_base_controle_acesso Nome da base de controle acesso (required)
     * @param string $servidor_controle_acesso Servidor do controle de acesso (required)
     * @param int $id_emissor C\u00C3\u00B3digo do identificador do emissor (optional)
     * @return \br.com.conductor.pier.api.v2.model\Base
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUT($id, $servidor, $usuario, $senha, $nome_base, $senha_criptografada, $domain, $nome_base_controle_acesso, $servidor_controle_acesso, $id_emissor = null)
    {
        list($response, $statusCode, $httpHeader) = $this->alterarUsingPUTWithHttpInfo ($id, $servidor, $usuario, $senha, $nome_base, $senha_criptografada, $domain, $nome_base_controle_acesso, $servidor_controle_acesso, $id_emissor);
        return $response; 
    }


    /**
     * alterarUsingPUTWithHttpInfo
     *
     * Alterar base
     *
     * @param int $id C\u00C3\u00B3digo identificador da base (required)
     * @param string $servidor IP do servidor (required)
     * @param string $usuario Nome do usu\u00C3\u00A1rio (required)
     * @param string $senha Senha (required)
     * @param string $nome_base Nome da base (required)
     * @param bool $senha_criptografada senha Criptografada (required)
     * @param string $domain Dom\u00C3\u00ADnio da base (required)
     * @param string $nome_base_controle_acesso Nome da base de controle acesso (required)
     * @param string $servidor_controle_acesso Servidor do controle de acesso (required)
     * @param int $id_emissor C\u00C3\u00B3digo do identificador do emissor (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\Base, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function alterarUsingPUTWithHttpInfo($id, $servidor, $usuario, $senha, $nome_base, $senha_criptografada, $domain, $nome_base_controle_acesso, $servidor_controle_acesso, $id_emissor = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling alterarUsingPUT');
        }
        // verify the required parameter 'servidor' is set
        if ($servidor === null) {
            throw new \InvalidArgumentException('Missing the required parameter $servidor when calling alterarUsingPUT');
        }
        // verify the required parameter 'usuario' is set
        if ($usuario === null) {
            throw new \InvalidArgumentException('Missing the required parameter $usuario when calling alterarUsingPUT');
        }
        // verify the required parameter 'senha' is set
        if ($senha === null) {
            throw new \InvalidArgumentException('Missing the required parameter $senha when calling alterarUsingPUT');
        }
        // verify the required parameter 'nome_base' is set
        if ($nome_base === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nome_base when calling alterarUsingPUT');
        }
        // verify the required parameter 'senha_criptografada' is set
        if ($senha_criptografada === null) {
            throw new \InvalidArgumentException('Missing the required parameter $senha_criptografada when calling alterarUsingPUT');
        }
        // verify the required parameter 'domain' is set
        if ($domain === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain when calling alterarUsingPUT');
        }
        // verify the required parameter 'nome_base_controle_acesso' is set
        if ($nome_base_controle_acesso === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nome_base_controle_acesso when calling alterarUsingPUT');
        }
        // verify the required parameter 'servidor_controle_acesso' is set
        if ($servidor_controle_acesso === null) {
            throw new \InvalidArgumentException('Missing the required parameter $servidor_controle_acesso when calling alterarUsingPUT');
        }
  
        // parse inputs
        $resourcePath = "/api/bases";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }// query params
        
        if ($servidor !== null) {
            $queryParams['servidor'] = $this->apiClient->getSerializer()->toQueryValue($servidor);
        }// query params
        
        if ($usuario !== null) {
            $queryParams['usuario'] = $this->apiClient->getSerializer()->toQueryValue($usuario);
        }// query params
        
        if ($senha !== null) {
            $queryParams['senha'] = $this->apiClient->getSerializer()->toQueryValue($senha);
        }// query params
        
        if ($nome_base !== null) {
            $queryParams['nomeBase'] = $this->apiClient->getSerializer()->toQueryValue($nome_base);
        }// query params
        
        if ($senha_criptografada !== null) {
            $queryParams['senhaCriptografada'] = $this->apiClient->getSerializer()->toQueryValue($senha_criptografada);
        }// query params
        
        if ($domain !== null) {
            $queryParams['domain'] = $this->apiClient->getSerializer()->toQueryValue($domain);
        }// query params
        
        if ($nome_base_controle_acesso !== null) {
            $queryParams['nomeBaseControleAcesso'] = $this->apiClient->getSerializer()->toQueryValue($nome_base_controle_acesso);
        }// query params
        
        if ($id_emissor !== null) {
            $queryParams['idEmissor'] = $this->apiClient->getSerializer()->toQueryValue($id_emissor);
        }// query params
        
        if ($servidor_controle_acesso !== null) {
            $queryParams['servidorControleAcesso'] = $this->apiClient->getSerializer()->toQueryValue($servidor_controle_acesso);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\Base'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\Base', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\Base', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * clearUsingGET
     *
     * Limpar mapa de bases
     *
     * @return \br.com.conductor.pier.api.v2.model\BodyAccessToken
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function clearUsingGET()
    {
        list($response, $statusCode, $httpHeader) = $this->clearUsingGETWithHttpInfo ();
        return $response; 
    }


    /**
     * clearUsingGETWithHttpInfo
     *
     * Limpar mapa de bases
     *
     * @return Array of \br.com.conductor.pier.api.v2.model\BodyAccessToken, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function clearUsingGETWithHttpInfo()
    {
        
  
        // parse inputs
        $resourcePath = "/api/bases/clear";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\BodyAccessToken'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\BodyAccessToken', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\BodyAccessToken', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * consultarUsingGET1
     *
     * Consultar base
     *
     * @param int $id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da base (id). (required)
     * @return \br.com.conductor.pier.api.v2.model\Base
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET1($id)
    {
        list($response, $statusCode, $httpHeader) = $this->consultarUsingGET1WithHttpInfo ($id);
        return $response; 
    }


    /**
     * consultarUsingGET1WithHttpInfo
     *
     * Consultar base
     *
     * @param int $id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da base (id). (required)
     * @return Array of \br.com.conductor.pier.api.v2.model\Base, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function consultarUsingGET1WithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling consultarUsingGET1');
        }
  
        // parse inputs
        $resourcePath = "/api/bases/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\Base'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\Base', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\Base', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * listarUsingGET1
     *
     * Listar bases
     *
     * @param int $page P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     * @param int $limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100) (optional)
     * @param int $id C\u00C3\u00B3digo identificador da base (optional)
     * @param string $servidor IP do servidor (optional)
     * @param string $usuario Nome do usu\u00C3\u00A1rio (optional)
     * @param string $senha Senha (optional)
     * @param string $nome_base Nome da base (optional)
     * @param bool $senha_criptografada senha Criptografada (optional)
     * @param string $domain Dom\u00C3\u00ADnio da base (optional)
     * @param string $nome_base_controle_acesso Nome da base de controle acesso (optional)
     * @param int $id_emissor C\u00C3\u00B3digo do identificador do emissor (optional)
     * @param string $servidor_controle_acesso Servidor do controle de acesso (optional)
     * @return \br.com.conductor.pier.api.v2.model\PageBases
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET1($page = null, $limit = null, $id = null, $servidor = null, $usuario = null, $senha = null, $nome_base = null, $senha_criptografada = null, $domain = null, $nome_base_controle_acesso = null, $id_emissor = null, $servidor_controle_acesso = null)
    {
        list($response, $statusCode, $httpHeader) = $this->listarUsingGET1WithHttpInfo ($page, $limit, $id, $servidor, $usuario, $senha, $nome_base, $senha_criptografada, $domain, $nome_base_controle_acesso, $id_emissor, $servidor_controle_acesso);
        return $response; 
    }


    /**
     * listarUsingGET1WithHttpInfo
     *
     * Listar bases
     *
     * @param int $page P\u00C3\u00A1gina solicitada (Default = 0) (optional)
     * @param int $limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100) (optional)
     * @param int $id C\u00C3\u00B3digo identificador da base (optional)
     * @param string $servidor IP do servidor (optional)
     * @param string $usuario Nome do usu\u00C3\u00A1rio (optional)
     * @param string $senha Senha (optional)
     * @param string $nome_base Nome da base (optional)
     * @param bool $senha_criptografada senha Criptografada (optional)
     * @param string $domain Dom\u00C3\u00ADnio da base (optional)
     * @param string $nome_base_controle_acesso Nome da base de controle acesso (optional)
     * @param int $id_emissor C\u00C3\u00B3digo do identificador do emissor (optional)
     * @param string $servidor_controle_acesso Servidor do controle de acesso (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\PageBases, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function listarUsingGET1WithHttpInfo($page = null, $limit = null, $id = null, $servidor = null, $usuario = null, $senha = null, $nome_base = null, $senha_criptografada = null, $domain = null, $nome_base_controle_acesso = null, $id_emissor = null, $servidor_controle_acesso = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/bases";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }// query params
        
        if ($servidor !== null) {
            $queryParams['servidor'] = $this->apiClient->getSerializer()->toQueryValue($servidor);
        }// query params
        
        if ($usuario !== null) {
            $queryParams['usuario'] = $this->apiClient->getSerializer()->toQueryValue($usuario);
        }// query params
        
        if ($senha !== null) {
            $queryParams['senha'] = $this->apiClient->getSerializer()->toQueryValue($senha);
        }// query params
        
        if ($nome_base !== null) {
            $queryParams['nomeBase'] = $this->apiClient->getSerializer()->toQueryValue($nome_base);
        }// query params
        
        if ($senha_criptografada !== null) {
            $queryParams['senhaCriptografada'] = $this->apiClient->getSerializer()->toQueryValue($senha_criptografada);
        }// query params
        
        if ($domain !== null) {
            $queryParams['domain'] = $this->apiClient->getSerializer()->toQueryValue($domain);
        }// query params
        
        if ($nome_base_controle_acesso !== null) {
            $queryParams['nomeBaseControleAcesso'] = $this->apiClient->getSerializer()->toQueryValue($nome_base_controle_acesso);
        }// query params
        
        if ($id_emissor !== null) {
            $queryParams['idEmissor'] = $this->apiClient->getSerializer()->toQueryValue($id_emissor);
        }// query params
        
        if ($servidor_controle_acesso !== null) {
            $queryParams['servidorControleAcesso'] = $this->apiClient->getSerializer()->toQueryValue($servidor_controle_acesso);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\PageBases'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\PageBases', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\PageBases', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * salvarUsingPOST1
     *
     * Salvar base
     *
     * @param string $servidor IP do servidor (required)
     * @param string $usuario Nome do usu\u00C3\u00A1rio (required)
     * @param string $senha Senha (required)
     * @param string $nome_base Nome da base (required)
     * @param bool $senha_criptografada senha Criptografada (required)
     * @param string $domain Dom\u00C3\u00ADnio da base (required)
     * @param string $nome_base_controle_acesso Nome da base de controle acesso (required)
     * @param string $servidor_controle_acesso Servidor do controle de acesso (required)
     * @param int $id_emissor C\u00C3\u00B3digo do identificador do emissor (optional)
     * @return \br.com.conductor.pier.api.v2.model\Base
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST1($servidor, $usuario, $senha, $nome_base, $senha_criptografada, $domain, $nome_base_controle_acesso, $servidor_controle_acesso, $id_emissor = null)
    {
        list($response, $statusCode, $httpHeader) = $this->salvarUsingPOST1WithHttpInfo ($servidor, $usuario, $senha, $nome_base, $senha_criptografada, $domain, $nome_base_controle_acesso, $servidor_controle_acesso, $id_emissor);
        return $response; 
    }


    /**
     * salvarUsingPOST1WithHttpInfo
     *
     * Salvar base
     *
     * @param string $servidor IP do servidor (required)
     * @param string $usuario Nome do usu\u00C3\u00A1rio (required)
     * @param string $senha Senha (required)
     * @param string $nome_base Nome da base (required)
     * @param bool $senha_criptografada senha Criptografada (required)
     * @param string $domain Dom\u00C3\u00ADnio da base (required)
     * @param string $nome_base_controle_acesso Nome da base de controle acesso (required)
     * @param string $servidor_controle_acesso Servidor do controle de acesso (required)
     * @param int $id_emissor C\u00C3\u00B3digo do identificador do emissor (optional)
     * @return Array of \br.com.conductor.pier.api.v2.model\Base, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.pier.api.v2.invoker\ApiException on non-2xx response
     */
    public function salvarUsingPOST1WithHttpInfo($servidor, $usuario, $senha, $nome_base, $senha_criptografada, $domain, $nome_base_controle_acesso, $servidor_controle_acesso, $id_emissor = null)
    {
        
        // verify the required parameter 'servidor' is set
        if ($servidor === null) {
            throw new \InvalidArgumentException('Missing the required parameter $servidor when calling salvarUsingPOST1');
        }
        // verify the required parameter 'usuario' is set
        if ($usuario === null) {
            throw new \InvalidArgumentException('Missing the required parameter $usuario when calling salvarUsingPOST1');
        }
        // verify the required parameter 'senha' is set
        if ($senha === null) {
            throw new \InvalidArgumentException('Missing the required parameter $senha when calling salvarUsingPOST1');
        }
        // verify the required parameter 'nome_base' is set
        if ($nome_base === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nome_base when calling salvarUsingPOST1');
        }
        // verify the required parameter 'senha_criptografada' is set
        if ($senha_criptografada === null) {
            throw new \InvalidArgumentException('Missing the required parameter $senha_criptografada when calling salvarUsingPOST1');
        }
        // verify the required parameter 'domain' is set
        if ($domain === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain when calling salvarUsingPOST1');
        }
        // verify the required parameter 'nome_base_controle_acesso' is set
        if ($nome_base_controle_acesso === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nome_base_controle_acesso when calling salvarUsingPOST1');
        }
        // verify the required parameter 'servidor_controle_acesso' is set
        if ($servidor_controle_acesso === null) {
            throw new \InvalidArgumentException('Missing the required parameter $servidor_controle_acesso when calling salvarUsingPOST1');
        }
  
        // parse inputs
        $resourcePath = "/api/bases";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($servidor !== null) {
            $queryParams['servidor'] = $this->apiClient->getSerializer()->toQueryValue($servidor);
        }// query params
        
        if ($usuario !== null) {
            $queryParams['usuario'] = $this->apiClient->getSerializer()->toQueryValue($usuario);
        }// query params
        
        if ($senha !== null) {
            $queryParams['senha'] = $this->apiClient->getSerializer()->toQueryValue($senha);
        }// query params
        
        if ($nome_base !== null) {
            $queryParams['nomeBase'] = $this->apiClient->getSerializer()->toQueryValue($nome_base);
        }// query params
        
        if ($senha_criptografada !== null) {
            $queryParams['senhaCriptografada'] = $this->apiClient->getSerializer()->toQueryValue($senha_criptografada);
        }// query params
        
        if ($domain !== null) {
            $queryParams['domain'] = $this->apiClient->getSerializer()->toQueryValue($domain);
        }// query params
        
        if ($nome_base_controle_acesso !== null) {
            $queryParams['nomeBaseControleAcesso'] = $this->apiClient->getSerializer()->toQueryValue($nome_base_controle_acesso);
        }// query params
        
        if ($id_emissor !== null) {
            $queryParams['idEmissor'] = $this->apiClient->getSerializer()->toQueryValue($id_emissor);
        }// query params
        
        if ($servidor_controle_acesso !== null) {
            $queryParams['servidorControleAcesso'] = $this->apiClient->getSerializer()->toQueryValue($servidor_controle_acesso);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.pier.api.v2.model\Base'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.pier.api.v2.model\Base', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.pier.api.v2.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.pier.api.v2.model\Base', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
